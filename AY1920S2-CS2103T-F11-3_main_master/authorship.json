[
  {
    "path": ".gitattributes",
    "fileType": "gitattributes",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "*.pdf binary"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*.json merge\u003dours"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*.html merge\u003dours"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 1
    }
  },
  {
    "path": ".gitignore",
    "fileType": "gitignore",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/*.iml"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Storage/log files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/data/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/config.json"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/preferences.json"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/*.log.*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/*.json"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "# Test sandbox files"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "src/test/data/sandbox/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "foodiebot-budget.json"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "foodiebot.json"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "src/main/resources/.idea/misc.xml"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*.xml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*.pdf"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "lsjxavier": 2,
      "-": 21,
      "ignatiusong": 4
    }
  },
  {
    "path": ".travis.yml",
    "fileType": "yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "language: java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "sudo: false"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "matrix:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  include:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    - os: linux"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      dist: trusty"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      jdk: openjdk11"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      env:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        - _JAVA_OPTIONS\u003d\"--add-opens\u003djava.base/java.util\u003dALL-UNNAMED -Djava.awt.headless\u003dtrue -Dtestfx.robot\u003dglass -Dtestfx.headless\u003dtrue -Dprism.order\u003dsw\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "addons:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  apt:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    packages:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      - openjdk-11-jdk"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "script: \u003e-"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  ./config/travis/run-checks.sh \u0026\u0026"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  ./gradlew clean checkstyleMain checkstyleTest test coverage coveralls asciidoctor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "deploy:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  skip_cleanup: true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  provider: script"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  script: ./config/travis/deploy_github_pages.sh"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  on:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    branch: master"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  directories:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/caches/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    - $HOME/.gradle/wrapper/"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12,
      "-": 18
    }
  },
  {
    "path": "README.adoc",
    "fileType": "adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d FoodieBot"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-F11-3/main[image:https://travis-ci.org/AY1920S2-CS2103T-F11-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-F11-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-F11-3/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub\u0026kill-cache\u003d1[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "https://www.codacy.com/gh/AY1920S2-CS2103T-F11-3/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S2-CS2103T-F11-3/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/3f316be5c02a4726a5eb5298cd829401[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "FoodieBot is a campus food locator application which can help students look for food they want, by recommending the canteens nearest to them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Our target users are students, staff and tourists. In general anyone who comes to or visits NUS."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "In particular, for the indecisive user, this application can give a random food suggestion tailored to each user based on their budget and/ or past food selections etcetera."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Original source code from https://se-education.org"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 38
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.foodiebot.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    compile group: \u0027org.testfx\u0027, name: \u0027testfx-junit5\u0027, version: \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    compile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    testCompile \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    testCompile \"org.testfx:testfx-junit5:4.0.15-alpha\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    testCompile \"org.testfx:testfx-core:4.0.15-alpha\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    testCompile \"org.testfx:openjfx-monocle:jdk-11+26\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    compile group: \u0027org.fxmisc.richtext\u0027, name: \u0027richtextfx\u0027, version: \u00270.10.4\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    archiveFileName \u003d \u0027foodiebot.jar\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    destinationDirectory \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F11-3/main\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 9,
      "Samanthaseahpl": 3,
      "-": 152
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d FoodieBot - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 2,
      "-": 46
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//Insert icon"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d FoodieBot - Developer Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `F11-03`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Software Overview"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBot is a campus food application which can help users look for food they want, by recommending the canteens nearest to them,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "providing randomized food suggestions, helping users plan their budget and provide info on food around"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "NUS."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBot is the one stop application to solve all meal decision problems on NUS."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Purpose"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The purpose of this document is to describe the architecture and system design of the FoodieBot. This documentation is for anyone who"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "wishes to understand more about FoodieBot and how it works."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Audience"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Our target users are students, staff and tourists, in general anyone who comes to or visits NUS."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "In particular, for the indecisive user, this application can give a random food suggestion tailored to each user based on their budget and/ or past food selections etcetera."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Our application is being managed by the dependency management tool Gradle."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The project is available at https://github.com/AY1920S2-CS2103T-F11-3/main. After cloning the repository, you can follow these steps:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "For IntelliJ users"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run gradle build."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "2. Run gradle run."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d Definitions"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Defined below are common terminology that will be used frequently throughout this document."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[BLUE]#Context#::"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Refers to which state the application is in. Use interchangeably with user interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/foodiebot/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/foodiebot/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `favorites set 1`."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Component interactions for `favorites set 1` command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/foodiebot/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `CanteenListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/foodiebot/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "link:{repoURL}/src/main/java/seedu/foodiebot/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ".  `Logic` uses the `FoodieBotParser` class to parse the user command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/foodiebot/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* stores the FoodieBot data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCanteen\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `FoodieBot`, which `Canteen` can reference. This would allow `FoodieBot` to only require one `Tag` object per unique `Tag`, instead of each `Canteen` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/foodiebot/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* can save the FoodieBot data in json format and read it back."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Classes used by multiple components are in the `seedu.foodiebot.commons` package."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Executing similar tasks but for different objects"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "e.g. Selecting canteens, stalls, food."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* Alternative 1 (current choice): Create a context class that"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "executes commands based on the context the user is in."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros: Higher quality user interface, user does not need to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "so many commands."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons: More difficult to implement."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* Alternative 2: Create different commands for different objects"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros: Easier to implement. There will not be any chance"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "of overlapping commands"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons: Reduce quality of user interface as user has to remember many"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "different commands."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d [Proposed] List feature"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The list command is facilitated by `ListCommandParser`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "It extends `FoodieBotParser` to handle list canteen commands."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `ListCommand#execute()` -- Updates the canteen list to show all the canteens or filtered by location."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "`ListCommand` extends `Command` with `Command#execute()`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `ListCommandParser#arePrefixesPresent()` -- Checks if the prefixes specified in `parse()` are found in the command entered by the user."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `ListCommandParser#parse()` -- Identifies if prefixes have been specified and handles them respectively. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "For example, if ListCommand has the nearest block name passed through as a parameter `list f\\com1`, ListCommand will filter the canteen list with the given block name with `new ListCommand(\"com1\")`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The following sequence diagram shows how the list operation works:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::ListSequenceDiagram.png[]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a list command:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::ListActivityDiagram.png[]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d List Design Considerations"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: User command format"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* **Alternative 1 (current choice):** `list f/com`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "** Cons: `f/` is an optional prefix, user might forget that it exists as no error is shown in the command result box"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* **Alternative 2:** find nearest `BLOCK_NAME`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "** Pros: The user finds it natural to type the word find."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "** Cons: Can be confusing whether find shows the list of canteens, food, or location of the canteen on campus. Having the \u0027find\u0027 command is also one additional command for the user to remember."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Budget Command"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `budget` command is implemented by the `BudgetCommand` class."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to set the budget for the user or to view the current budget of the user."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrate the different scenario for the budge command:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Budget Command Implementation"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `BudgetCommandParse` object."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `BudgetCommandParse` then parse the budget command to determine if the action of the budget is `set`, `view` or invalid. +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new `BudgetCommand` object."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access then `BudgetCommand#execute()` to determine the type of execution."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the action is `set` then the `budget` object saves the user input accordingly."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the action is `view` then the budge is retrieve from the storage."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `BudgetCommand#execute()` returns a `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `budget` command:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Budget Design Considerations"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Enter Command"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `enter` command is implemented by either the `EnterCanteenCommand` class or the `EnterStallCommand` class."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "These commands are accessed by the `LogicManager#execute()` to switch the user interface accordingly base on where the user is at."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates the different scenario for the enter command:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Enter Command Implementation"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` which parses the user input into a `ParserContext` to determine if the user is currently on the main context."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the user has input `enter` on the main context, it creates a `EnterCanteenCommandParser` object that parses in the user input to determine which canteen to enter."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Otherwise if the user has Input `enter` on the stall context, it creates a `EnterStallCommandParser` object that parses in the user input to determine which stall to enter"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new `EnterCanteenCommand` */* `EnterStallCommand` object accordingly to the `LogicManager`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `EnterCanteenCommand#execute()` */* `EnterStallCommand#execute()` to switch the current display to the stalls/food available within the selected canteen/stall."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Both `EnterCanteenCommand#execute()` and `EnterStallCommand#execute()` returns a `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Below is the _activity diagram_ that summarizes what happens during the execution of the `enter` command:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "image::EnterActivityDiagram.png[]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Enter Design Considerations"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Favorites Command"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `favorites` command is implemented by the `FavoritesCommand` class."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to edit or view the favorite on food items."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `favorite` command:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Favorites Command Implementation"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `FavoritesCommandParser` object."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `FavoritesCommandParser` then parse the user input to determine if the favorite command is `set`, `remove`, or `view`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new `FavoritesCommand` object."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `FavoritesCommand#execute()`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If `set` was chosen, the selected food item favorite is then updated."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If `view` was chosen, a list of favorite food items are displayed."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If `remove` was chosen, the respective food item is remove from the favorite food item list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `FavoritesCommand#execute()` creates a new `ActionCommandResult` that extends the `CommandResult` which is to be returned"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "to the `LogicManager`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `favorites` command:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Favorites Design Considerations"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Filter Command"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `filter` command is implemented by the `FilterCommand` class."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to filter outputs according to th euser input."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `filter` command:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Filter Command Implementation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `FilterCommandParser` object."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `FilterCommandParser` then parse the filter command to determine if the filter output should be by price range or tags +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new `FilterCommand` object."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `FilterCommand#execute()` which filter the options based on the user input and the context where `filter` is called."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the filter option is based on a price, the current context has to be the stall, otherwise an error message is thrown."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the option is based on a tag, the filter option will return a list of option base on the current context."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `FilterCommand#execute()` returns a `CommandResult` to the `LogicManager`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `filter` command:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Filter Design Considerations"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Goto Command"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `goto` command is implemented by the `GoToCanteenCommand` class."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to display the direction to a canteen base on the user input."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `goto` command:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Goto Command Implementation"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `GoToCanteenCommandParser` object."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `GoToCanteenCommandParser` then parse the goto command to determine the canteen name and the current location. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new `GoToCanteenCommand` object."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `GoToCanteenCommand#execute()` to retrieve the directions based on the user input."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `GoToCanteenCommand#execute()` creates a new `DirectionsCommandResults` that extends the `CommandResult` which is to be returned"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "to the `LogicManager`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `goto` command:"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Goto Design Considerations"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Randomize Command"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `randomize` command is implemented  by the `RandomizeCommand` class."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to generate five random options based on the user input."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates the different scenario for the randomize command:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::RandomizeActivityDiagram.png[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Randomize Command Implementation"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `RandomizeCommandParser` object."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `RandomizeCommandParser` then parse the randomize command to separate the prefix if any and return a command object."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "In this case a `RandomizeCommand` object is created and returned to the `LogicManager`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `RandomizeCommand#execute()`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". From `RandomizeCommand#execute()`, `randomize` objects are called to generate a random option based on the user input."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `RandomizeCommand#execute()` returns a  `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `randomize` command:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::RandomizeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Randomize Design Considerations"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Context where `randomize` can be called from"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `randomize` function is only called from the canteen context."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons: Prefix are necessary to indicate if randomize is to be within one canteen only."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:** `randomize` can be called after entering a canteen and/or stall."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros: Reduce user inputs."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons: Additional method will be needed to store the knowledge of the current canteen and/or stall entered."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Rate Command"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `rate` command is implemented by the `RateCommand` class."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to rate a food item."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `rate` command:"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Rate Command Implementation"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `RateCommandParser` object."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `RateCommandParser` then parse in the user input to ensure that the `rate` command is only use in the transaction context"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "and that the inputs are valid. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process creates and return a `RateCommand` object to the `LogicManager`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access the `RateCommand#execute()` to retrieve the food item from the transaction storage and"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "update the rating of the food."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `RateCommand#execute()` returns a  `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `rate` command:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Rate Design Considerations"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Review Command"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `review` command is implemented by the `ReviewCommand` class."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to review a food item."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `review` command:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Review Command Implementation"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `ReviewCommandParser` object."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `ReviewCommandParser` then parse in the user input to ensure that the `review` command is only use in the transaction context"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "and that the inputs are valid. +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process creates and return a `ReviewCommand` object to the `LogicManager`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access the `ReviewCommand#execute()` to retrieve the food item from the transaction storage and"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "update the review of the food."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `ReviewCommand#execute()` returns a  `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `review` command:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Review Design Considerations"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Report Command (Please Update, IDK how it works)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `report` command is implemented by the `ReportCommand` class."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to review a food item."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `report` command:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Report Command Implementation"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `ReportCommandParser` object."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `ReportCommandParser` then parse the user input to determine the period of report to display. +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This Process returns a `ReportCommand` object to the `LogicManager`."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `ReportCommand#execute()`."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `ReportCommand#execute()`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `ReportCommand#execute()` returns a  `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `report` command:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Review Design Considerations"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Select Command"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `select` command is implemented  by the `SelectItemCommand` class."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to store the current selected food item into the storage as well as to update the current budget of the user."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `select` command:"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Select Command Implementation"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `SelectItemCommandParser` object."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `SelectItemCommandParser` then parse the select command to ensure that the select command is called only on the stall context."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process also checks if the user input is the food index or the food name that is available in that stall."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Returning a `SelectItemCommand` object to the `LogicManager`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `SelectItemCommand#execute()`."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `SelectItemCommand#execute()` retrieve that food selected and update other variables within its class for storage."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `SelectItemCommand#execute()` returns a  `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `select` command:"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Select Design Considerations"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Transactions Command"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The `transaction` command is implemented  by the `TransactionsCommand` class."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This command is accessed by the `LogicManager#execute()` to display the transaction of the given period if stated."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following _activity diagram_ illustrates what happens when a user executes the `transactions` command:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Transactions Command Implementation"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` first executes `FoodieBotParser` to create a `TransactionsCommandParser` object."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". `TransactionsCommandParser` then parse the user input to determine the period of transaction report to display. +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This Process returns a `TransactionsCommand` object to the `LogicManager`."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `LogicManager` then access `TransactionsCommand#execute()`."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `TransactionsCommand#execute()` retrieve the transaction list from storage and display the list within the given period or everything of period is not stated."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The `TransactionsCommand#execute()` returns a  `CommandResult` object to the `LogicManger`."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Below is the _sequence diagram_ that summarizes what happens during the execution of the `transactions` command:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "//image::"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d Transactions Design Considerations"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 1 (current choice):** `"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* **Alternative 2:**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to keep track for food expenses"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* are indecisive on what food to have in campus"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "* does not know which canteens are near them"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* is comfortable with command-line inputs on desktop"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: get a food choice decided without having to work with GUI controls"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "The user is not particularly limited to student and staff, it can be anyone who comes to visit NUS and is introduced to use the app"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | new user | see usage instructions. | refer to instructions when I forget how to use the App."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | user | find nearest canteens. | get to the canteen quickly."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | user | see which stores are open. | remove entries that I no longer need."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | user who is new to NUS (tourist, visitor or freshman). | get a clear directory to the canteen | make my way to the canteen with ease."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | user in campus | randomize a food choice. | try something new every now and then."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | user who is budget conscious | know which food items fall within my budget. | I would not overspend."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* * *` | user | take down some personal notes about the store, for example which dish at the mixed veg store is good. | see which is my favourite food amongst the NUS canteens."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | user who has an idea of what s/he wants to have | search for food items. | see which canteens sell them."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | user | see which food items I have not tried. | try all food items in the canteen."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | user with disability | know if there is convenient access to the canteen. | try all food items in the canteen."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | student on budget | search through prices of food items in different canteens. | discover which are the cheapest food items."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | user who do not carry a lot of cash | see the type of payment methods available. | prepare myself beforehand."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | user | track the frequency of the food I eat. | eat certain food in moderation and save money if i have been eating expensive food frequently."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`* *` | user | see some images of the food .| get some better understanding of the food aside from just the food description."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`*` | user who is health conscious | view the dietary options available for each canteen. | know which stall i can visit."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d User Story for Version 2.0"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "| Priority | As a ... | I want to ... | So that I can..."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`v2.0` | user | place an order. | receive the food when I arrive."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`v2.0` | store owner | add new food items on the menu. | easily update the menu."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`v2.0` | store owner | set menu items to be on promotion. | attract more students to select the menu item."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`v2.0` | user | view the crowd condition. | avoid going to the canteen if it is too crowded."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|`v2.0` | user | send invitation to a friend. | have meals together with friends."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the System is FoodieBot and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003d\u003d\u003d Use case: UC1 - Select a randomised stall suggestion"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to randomise"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "2. FoodieBot shows the randomised suggestions"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "3. User selects one of the randomised suggestion"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "* 1a. User wants to remove a randomised suggestion."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "** 1a1. User request to remove suggestion."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "+"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "** 1a2. FoodieBot updates the food item not to be suggested in the future"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: UC2 - Set Budget"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "1. (Optional) User requests to view budget"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "2. FoodieBot shows the current budget with list of expenses"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "3. User request to set budget"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "4. FoodieBot updates the budget for the specified period"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given amount is invalid."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. FoodieBot shows an error message."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. The given period is invalid."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "** 3b1. FoodieBot shows an error message."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: UC3 - Review Food Item"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to view transactions"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "2. FoodieBot shows a list of transactions"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "3. User request to review the food item in the list"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "4. FoodieBot shows the edit screen for user to update"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "5. FoodieBot saves the user review"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. FoodieBot shows an error message."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* 5. The cancel command is supplied."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: UC4 - Rate Food Item"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "1. User requests to view transactions"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "2. FoodieBot shows a list of transactions"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "3. User request to rate the food item in the list"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "4. FoodieBot updates the review for the food item on the list"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. FoodieBot shows an error message."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. The given rating is invalid."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** 3b1. FoodieBot shows an error message."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "+"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "image::UseCase.png[width\u003d\"400\"]"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "* Fig1. Use Case Diagram"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be usable by users who have never used an e-directory"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ".  The application should have images for the food items, if the food items are shown to the user"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ".  The system should be backward compatible with data produced by earlier versions of the system"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Activity Diagram::"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Use to a model workflow."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "API::"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Application Programming Interface"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "CLI::"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Command Line Interface"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "In-Memory::"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Type of database that relies primarily on memory for data storage."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "MSS::"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Main Success Scenario"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Mainstream OS::"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "PlantUML::"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Component used to write diagrams."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Sequence Diagram::"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Captures the interactions between multiple objects for a given scenario."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "UI::"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "User Interface"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name* Pizza on iOS appstore"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Author: Bryan Wu"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow randomisation for food that requires choosing of ingredients"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow choosing of ingredients for pizza only"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "* Does not recommend which stores sell the pizza"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 458,
      "leslieharland": 1,
      "shaungoh97": 12,
      "-": 241,
      "ignatiusong": 180
    }
  },
  {
    "path": "docs/DeveloperGuide.html",
    "fileType": "html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 2.0.10\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctitle\u003eFoodieBot - Developer Guide\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/* Uncomment @import statement to use as custom stylesheet */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "audio,video{display:inline-block}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a{background:none}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "*,*::before,*::after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".stretch{width:100%}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a img{border:0}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul,ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "blockquote cite::before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table thead,table tfoot{background:#f7f8f7}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table tr.even,table tr.alt{background:#f8f8f7}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:\" \";display:table}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".clearfix::after,.float-group::after{clear:both}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ":not(pre):not([class^\u003dL])\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ":not(pre)\u003ecode.nobreak{word-wrap:normal}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ":not(pre)\u003ecode.nowrap{white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre{color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre\u003ecode{display:block}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "em em{font-style:normal}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "strong strong{font-weight:400}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".menuseq,.menuref{color:#000}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".menuseq b:not(.caret),.menuref{font-weight:inherit}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".menuseq{word-spacing:-.02em}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".menuseq b.caret{font-size:1.25em;line-height:.8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".menuseq i.caret{font-weight:bold;text-align:center;width:.45em}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "b.button::before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "b.button::after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:\" \";display:table}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header::after,#content::after,#footnotes::after,#footer::after{clear:both}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content::before{content:none}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details br+span::before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details br+span.author::before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header .details br+span#revremark::before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#header #revnumber::after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footer{max-width:100%;background:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content{margin-bottom:.625em}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media screen and (min-width:768px){#content{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sect1:last-child{padding-bottom:0}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sect1+.sect1{border-top:1px solid #e7e7e9}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content h1\u003ea.anchor::before,h2\u003ea.anchor::before,h3\u003ea.anchor::before,#toctitle\u003ea.anchor::before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor::before,h4\u003ea.anchor::before,h5\u003ea.anchor::before,h6\u003ea.anchor::before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "details\u003esummary:first-of-type{cursor:pointer;display:list-item;outline:none;margin-bottom:.75em}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.tableblock.fit-content\u003ecaption.title{white-space:nowrap;width:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e[class\u003d\"paragraph\"]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e[class\u003d\"paragraph\"]:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".literalblock pre,.listingblock\u003e.content\u003epre{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;overflow-x:auto;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media screen and (min-width:768px){.literalblock pre,.listingblock\u003e.content\u003epre{font-size:.90625em}}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media screen and (min-width:1280px){.literalblock pre,.listingblock\u003e.content\u003epre{font-size:1em}}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".literalblock pre,.listingblock\u003e.content\u003epre:not(.highlight),.listingblock\u003e.content\u003epre[class\u003d\"highlight\"],.listingblock\u003e.content\u003epre[class^\u003d\"highlight \"]{background:#f7f7f8}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock:hover code[data-lang]::before{display:block}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt])::before{content:\"$\"}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.prettyprint .linenums{line-height:1.45;margin-left:2em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.prettyprint li code[data-lang]::before{opacity:1}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.linenotable td.code{padding-left:.75em}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.linenotable td.linenos{border-right:1px solid currentColor;opacity:.35;padding-right:.5em}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.pygments .lineno{border-right:1px solid currentColor;opacity:.35;display:inline-block;margin-right:.75em}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre.pygments .lineno::before{content:\"\";margin-right:-.125em}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock:not(.excerpt)\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock blockquote::before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".verseblock{margin:0 1em 1.25em}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.abstract{margin:0 1em 1.25em;display:block}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.abstract\u003e.title{margin:0 0 .375em;font-size:1.15em;text-align:center}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.excerpt\u003eblockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;text-align:left;margin-right:0}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p.tableblock:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "td.tableblock\u003e.content\u003e:last-child{margin-bottom:-1.25em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "td.tableblock\u003e.content\u003e:last-child.sidebarblock{margin-bottom:0}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-all\u003ethead\u003etr\u003e.tableblock,table.grid-all\u003etbody\u003etr\u003e.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-all\u003etfoot\u003etr\u003e.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-cols\u003e*\u003etr\u003e.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-rows\u003ethead\u003etr\u003e.tableblock,table.grid-rows\u003etbody\u003etr\u003e.tableblock{border-width:0 0 1px}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-rows\u003etfoot\u003etr\u003e.tableblock{border-width:1px 0 0}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-all\u003e*\u003etr\u003e.tableblock:last-child,table.grid-cols\u003e*\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.grid-all\u003etbody\u003etr:last-child\u003e.tableblock,table.grid-all\u003ethead:last-child\u003etr\u003e.tableblock,table.grid-rows\u003etbody\u003etr:last-child\u003e.tableblock,table.grid-rows\u003ethead:last-child\u003etr\u003e.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.frame-topbot,table.frame-ends{border-width:1px 0}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table.stripes-all tr,table.stripes-odd tr:nth-of-type(odd),table.stripes-even tr:nth-of-type(even),table.stripes-hover tr:hover{background:#f8f8f7}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.unstyled,ol.unstyled{margin-left:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{margin-right:.25em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.inline{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ul.inline\u003eli{margin-left:1.25em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".colist td:not([class]):first-child img{max-width:none}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".colist td:not([class]):last-child{padding:.25em 0}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".imageblock.left{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".imageblock.right{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".aqua-background{background:#00fafa}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".black-background{background:#000}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".blue-background{background:#0000fa}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".fuchsia-background{background:#fa00fa}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".gray-background{background:#7d7d7d}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".green-background{background:#007d00}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".lime-background{background:#00fa00}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".maroon-background{background:#7d0000}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".navy-background{background:#00007d}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".olive-background{background:#7d7d00}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".purple-background{background:#7d007d}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".red-background{background:#fa0000}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".silver-background{background:#bcbcbc}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".teal-background{background:#007d7d}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".white-background{background:#fafafa}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".yellow-background{background:#fafa00}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a span.icon\u003e.fa{cursor:inherit}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.icon .icon-note::before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.icon .icon-tip::before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.icon .icon-warning::before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.icon .icon-caution::before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".admonitionblock td.icon .icon-important::before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".conum[data-value]::after{content:attr(data-value)}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".exampleblock\u003e.content{background:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media print{*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "html{font-size:80%}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare)::after,a[href^\u003d\"https:\"]:not(.bare)::after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "abbr[title]::after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #header .details br+span::before{content:none!important}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".listingblock code[data-lang]::before{display:block}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footer{padding:0 .9375em}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media print,amzn-kf8{#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sect1{padding:0!important}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".sect1+.sect1{border:0}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footer{background:none}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch1\u003eFoodieBot - Developer Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"preamble\"\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-18\"\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBy: \u003ccode\u003eF11-03\u003c/code\u003e      Since: \u003ccode\u003eFeb 2020\u003c/code\u003e      Licence: \u003ccode\u003eMIT\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"sectlevel1\"\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_introduction\"\u003e1. Introduction\u003c/a\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_software_overview\"\u003e1.1. Software Overview\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_purpose\"\u003e1.2. Purpose\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_audience\"\u003e1.3. Audience\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_setting_up\"\u003e2. Setting up\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_definitions\"\u003e3. Definitions\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_design\"\u003e4. Design\u003c/a\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Architecture\"\u003e4.1. Architecture\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Ui\"\u003e4.2. UI component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Logic\"\u003e4.3. Logic component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Model\"\u003e4.4. Model component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Storage\"\u003e4.5. Storage component\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Design-Commons\"\u003e4.6. Common classes\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_design_considerations\"\u003e4.7. Design Considerations\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_implementation\"\u003e5. Implementation\u003c/a\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_proposed_list_feature\"\u003e5.1. [Proposed] List feature\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_budget_command\"\u003e5.2. Budget Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_enter_command\"\u003e5.3. Enter Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_filter_command\"\u003e5.4. Filter Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_goto_command\"\u003e5.5. Goto Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_randomize_command\"\u003e5.6. Randomize Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_rate_command\"\u003e5.7. Rate Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_review_command\"\u003e5.8. Review Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_report_command_please_update_idk_how_it_works\"\u003e5.9. Report Command (Please Update, IDK how it works)\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_select_command\"\u003e5.10. Select Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_transactions_command\"\u003e5.11. Transactions Command\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_testing\"\u003e6. Testing\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_dev_ops\"\u003e7. Dev Ops\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_product_scope\"\u003eAppendix A: Product Scope\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_user_stories\"\u003eAppendix B: User Stories\u003c/a\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_user_story_for_version_2_0\"\u003eB.1. User Story for Version 2.0\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_use_cases\"\u003eAppendix C: Use Cases\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_non_functional_requirements\"\u003eAppendix D: Non Functional Requirements\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_glossary\"\u003eAppendix E: Glossary\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_product_survey\"\u003eAppendix F: Product Survey\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-20\"\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_introduction\"\u003e1. Introduction\u003c/h2\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-22\"\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_software_overview\"\u003e1.1. Software Overview\u003c/h3\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-24\"\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot is a campus food application which can help users look for food they want, by recommending the canteens nearest to them,"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "providing randomized food suggestions, helping users plan their budget and provide info on food around"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "NUS."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "FoodieBot is the one stop application to solve all meal decision problems on NUS.\u003c/p\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-29\"\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_purpose\"\u003e1.2. Purpose\u003c/h3\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-31\"\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe purpose of this document is to describe the architecture and system design of the FoodieBot. This documentation is for anyone who"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "wishes to understand more about FoodieBot and how it works.\u003c/p\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-34\"\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_audience\"\u003e1.3. Audience\u003c/h3\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-36\"\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eOur target users are students, staff and tourists, in general anyone who comes to or visits NUS."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "In particular, for the indecisive user, this application can give a random food suggestion tailored to each user based on their budget and/ or past food selections etcetera.\u003c/p\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-39\"\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_setting_up\"\u003e2. Setting up\u003c/h2\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-40\"\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eOur application is being managed by the dependency management tool Gradle."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The project is available at \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main\" class\u003d\"bare\"\u003ehttps://github.com/AY1920S2-CS2103T-F11-3/main\u003c/a\u003e. After cloning the repository, you can follow these steps:\u003c/p\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-43\"\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFor IntelliJ users\u003c/p\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-45\"\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-45\"\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRun gradle build.\u003c/p\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-46\"\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRun gradle run.\u003c/p\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-48\"\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_definitions\"\u003e3. Definitions\u003c/h2\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-50\"\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDefined below are common terminology that will be used frequently throughout this document.\u003c/p\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-52\"\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003cspan class\u003d\"BLUE\"\u003eContext\u003c/span\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRefers to which state the application is in. Use interchangeably with user interface.\u003c/p\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-55\"\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_design\"\u003e4. Design\u003c/h2\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-57\"\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"Design-Architecture\"\u003e4.1. Architecture\u003c/h3\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-60\"\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" alt\u003d\"ArchitectureDiagram\"\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 1. Architecture Diagram\u003c/div\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-62\"\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003cstrong\u003e\u003cem\u003eArchitecture Diagram\u003c/em\u003e\u003c/strong\u003e given above explains the high-level design of the App. Given below is a quick overview of each component.\u003c/p\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-65\"\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The \u003ccode\u003e.puml\u003c/code\u003e files used to create diagrams in this document can be found in the \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/docs/diagrams/\"\u003ediagrams\u003c/a\u003e folder."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Refer to the \u003ca href\u003d\"UsingPlantUml.html\"\u003eUsing PlantUML guide\u003c/a\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-68\"\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eMain\u003c/code\u003e has two classes called \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/Main.java\"\u003e\u003ccode\u003eMain\u003c/code\u003e\u003c/a\u003e and \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/MainApp.java\"\u003e\u003ccode\u003eMainApp\u003c/code\u003e\u003c/a\u003e. It is responsible for,\u003c/p\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-70\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-70\"\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAt app launch: Initializes the components in the correct sequence, and connects them up with each other.\u003c/p\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-71\"\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAt shut down: Shuts down the components and invokes cleanup methods where necessary.\u003c/p\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-73\"\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Commons\"\u003e\u003cstrong\u003e\u003ccode\u003eCommons\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following class plays an important role at the architecture level:\u003c/p\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-76\"\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-76\"\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eLogsCenter\u003c/code\u003e : Used by many classes to write log messages to the App\u0026#8217;s log file.\u003c/p\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-78\"\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe rest of the App consists of four components.\u003c/p\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-80\"\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-80\"\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Ui\"\u003e\u003cstrong\u003e\u003ccode\u003eUI\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: The UI of the App.\u003c/p\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-81\"\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Logic\"\u003e\u003cstrong\u003e\u003ccode\u003eLogic\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: The command executor.\u003c/p\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-82\"\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Model\"\u003e\u003cstrong\u003e\u003ccode\u003eModel\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: Holds the data of the App in-memory.\u003c/p\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-83\"\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ca href\u003d\"#Design-Storage\"\u003e\u003cstrong\u003e\u003ccode\u003eStorage\u003c/code\u003e\u003c/strong\u003e\u003c/a\u003e: Reads data from, and writes data to, the hard disk.\u003c/p\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-85\"\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eEach of the four components\u003c/p\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-87\"\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-87\"\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDefines its \u003cem\u003eAPI\u003c/em\u003e in an \u003ccode\u003einterface\u003c/code\u003e with the same name as the Component.\u003c/p\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-88\"\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExposes its functionality using a \u003ccode\u003e{Component Name}Manager\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-90\"\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFor example, the \u003ccode\u003eLogic\u003c/code\u003e component (see the class diagram given below) defines it\u0026#8217;s API in the \u003ccode\u003eLogic.java\u003c/code\u003e interface and exposes its functionality using the \u003ccode\u003eLogicManager.java\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-93\"\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/LogicClassDiagram.png\" alt\u003d\"LogicClassDiagram\"\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 2. Class Diagram of the Logic Component\u003c/div\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_how_the_architecture_components_interact_with_each_other\" class\u003d\"discrete has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-96\"\u003eHow the architecture components interact with each other\u003c/h4\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-98\"\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003cem\u003eSequence Diagram\u003c/em\u003e below shows how the components interact with each other for the scenario where the user issues the command \u003ccode\u003efavorites set 1\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-101\"\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" alt\u003d\"ArchitectureSequenceDiagram\"\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 3. Component interactions for \u003ccode\u003efavorites set 1\u003c/code\u003e command\u003c/div\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-103\"\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe sections below give more details of each component.\u003c/p\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-106\"\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"Design-Ui\"\u003e4.2. UI component\u003c/h3\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-109\"\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/UiClassDiagram.png\" alt\u003d\"UiClassDiagram\"\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 4. Structure of the UI Component\u003c/div\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-111\"\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e : \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/ui/Ui.java\"\u003e\u003ccode\u003eUi.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-113\"\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe UI consists of a \u003ccode\u003eMainWindow\u003c/code\u003e that is made up of parts e.g.\u003ccode\u003eCommandBox\u003c/code\u003e, \u003ccode\u003eResultDisplay\u003c/code\u003e, \u003ccode\u003eCanteenListPanel\u003c/code\u003e, \u003ccode\u003eStatusBarFooter\u003c/code\u003e etc. All these, including the \u003ccode\u003eMainWindow\u003c/code\u003e, inherit from the abstract \u003ccode\u003eUiPart\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-115\"\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eUI\u003c/code\u003e component uses JavaFx UI framework. The layout of these UI parts are defined in matching \u003ccode\u003e.fxml\u003c/code\u003e files that are in the \u003ccode\u003esrc/main/resources/view\u003c/code\u003e folder. For example, the layout of the \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/ui/MainWindow.java\"\u003e\u003ccode\u003eMainWindow\u003c/code\u003e\u003c/a\u003e is specified in \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/resources/view/MainWindow.fxml\"\u003e\u003ccode\u003eMainWindow.fxml\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-117\"\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eUI\u003c/code\u003e component,\u003c/p\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-119\"\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-119\"\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExecutes user commands using the \u003ccode\u003eLogic\u003c/code\u003e component.\u003c/p\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-120\"\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eListens for changes to \u003ccode\u003eModel\u003c/code\u003e data so that the UI can be updated with the modified data.\u003c/p\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-123\"\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"Design-Logic\"\u003e4.3. Logic component\u003c/h3\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"fig-LogicClassDiagram\" class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-127\"\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/LogicClassDiagram.png\" alt\u003d\"LogicClassDiagram\"\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 5. Structure of the Logic Component\u003c/div\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-129\"\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e :"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/logic/Logic.java\"\u003e\u003ccode\u003eLogic.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-132\"\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-132\"\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eLogic\u003c/code\u003e uses the \u003ccode\u003eFoodieBotParser\u003c/code\u003e class to parse the user command.\u003c/p\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-133\"\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis results in a \u003ccode\u003eCommand\u003c/code\u003e object which is executed by the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-134\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe command execution can affect the \u003ccode\u003eModel\u003c/code\u003e (e.g. adding a person).\u003c/p\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-135\"\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe result of the command execution is encapsulated as a \u003ccode\u003eCommandResult\u003c/code\u003e object which is passed back to the \u003ccode\u003eUi\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-136\"\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eIn addition, the \u003ccode\u003eCommandResult\u003c/code\u003e object can also instruct the \u003ccode\u003eUi\u003c/code\u003e to perform certain actions, such as displaying help to the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-139\"\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The lifeline for \u003ccode\u003eDeleteCommandParser\u003c/code\u003e should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-142\"\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"Design-Model\"\u003e4.4. Model component\u003c/h3\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-145\"\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/ModelClassDiagram.png\" alt\u003d\"ModelClassDiagram\"\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 6. Structure of the Model Component\u003c/div\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-147\"\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e : \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/model/Model.java\"\u003e\u003ccode\u003eModel.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-149\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eModel\u003c/code\u003e,\u003c/p\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-151\"\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-151\"\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003estores a \u003ccode\u003eUserPref\u003c/code\u003e object that represents the user\u0026#8217;s preferences.\u003c/p\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-152\"\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003estores the FoodieBot data.\u003c/p\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-153\"\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eexposes an unmodifiable \u003ccode\u003eObservableList\u0026lt;Canteen\u0026gt;\u003c/code\u003e that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.\u003c/p\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-154\"\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003edoes not depend on any of the other three components.\u003c/p\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-157\"\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "As a more OOP model, we can store a \u003ccode\u003eTag\u003c/code\u003e list in \u003ccode\u003eFoodieBot\u003c/code\u003e, which \u003ccode\u003eCanteen\u003c/code\u003e can reference. This would allow \u003ccode\u003eFoodieBot\u003c/code\u003e to only require one \u003ccode\u003eTag\u003c/code\u003e object per unique \u003ccode\u003eTag\u003c/code\u003e, instead of each \u003ccode\u003eCanteen\u003c/code\u003e needing their own \u003ccode\u003eTag\u003c/code\u003e object. An example of how such a model may look like is given below.\u003cbr\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cspan class\u003d\"image\"\u003e\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" alt\u003d\"BetterModelClassDiagram\"\u003e\u003c/span\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-162\"\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"Design-Storage\"\u003e4.5. Storage component\u003c/h3\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-165\"\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/StorageClassDiagram.png\" alt\u003d\"StorageClassDiagram\"\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eFigure 7. Structure of the Storage Component\u003c/div\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-167\"\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAPI\u003c/strong\u003e : \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master/src/main/java/seedu/foodiebot/storage/Storage.java\"\u003e\u003ccode\u003eStorage.java\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-169\"\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eStorage\u003c/code\u003e component,\u003c/p\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-171\"\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-171\"\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ecan save \u003ccode\u003eUserPref\u003c/code\u003e objects in json format and read it back.\u003c/p\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-172\"\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ecan save the FoodieBot data in json format and read it back.\u003c/p\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-175\"\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"Design-Commons\"\u003e4.6. Common classes\u003c/h3\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-177\"\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eClasses used by multiple components are in the \u003ccode\u003eseedu.foodiebot.commons\u003c/code\u003e package.\u003c/p\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-180\"\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_design_considerations\"\u003e4.7. Design Considerations\u003c/h3\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-181\"\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_aspect_executing_similar_tasks_but_for_different_objects\"\u003e4.7.1. Aspect: Executing similar tasks but for different objects\u003c/h4\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-183\"\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ee.g. Selecting canteens, stalls, food.\u003c/p\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-185\"\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-185\"\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAlternative 1 (current choice): Create a context class that"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "executes commands based on the context the user is in.\u003c/p\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-187\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-187\"\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros: Higher quality user interface, user does not need to remember"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "so many commands.\u003c/p\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-189\"\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons: More difficult to implement.\u003c/p\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-191\"\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAlternative 2: Create different commands for different objects\u003c/p\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-192\"\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-192\"\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros: Easier to implement. There will not be any chance"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "of overlapping commands\u003c/p\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-194\"\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons: Reduce quality of user interface as user has to remember many"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "different commands.\u003c/p\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-198\"\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_implementation\"\u003e5. Implementation\u003c/h2\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-200\"\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_proposed_list_feature\"\u003e5.1. [Proposed] List feature\u003c/h3\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-201\"\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_proposed_implementation\"\u003e5.1.1. Proposed Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-203\"\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe list command is facilitated by \u003ccode\u003eListCommandParser\u003c/code\u003e."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "It extends \u003ccode\u003eFoodieBotParser\u003c/code\u003e to handle list canteen commands."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "It implements the following operations:\u003c/p\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-207\"\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-207\"\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eListCommand#execute()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Updates the canteen list to show all the canteens or filtered by location.\u003c/p\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-210\"\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccode\u003eListCommand\u003c/code\u003e extends \u003ccode\u003eCommand\u003c/code\u003e with \u003ccode\u003eCommand#execute()\u003c/code\u003e."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-212\"\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-212\"\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eListCommandParser#arePrefixesPresent()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Checks if the prefixes specified in \u003ccode\u003eparse()\u003c/code\u003e are found in the command entered by the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-213\"\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eListCommandParser#parse()\u003c/code\u003e\u0026#8201;\u0026#8212;\u0026#8201;Identifies if prefixes have been specified and handles them respectively.\u003cbr\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "For example, if ListCommand has the nearest block name passed through as a parameter \u003ccode\u003elist f\\com1\u003c/code\u003e, ListCommand will filter the canteen list with the given block name with \u003ccode\u003enew ListCommand(\"com1\")\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-216\"\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following sequence diagram shows how the list operation works:\u003c/p\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-219\"\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/ListSequenceDiagram.png\" alt\u003d\"ListSequenceDiagram\"\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-221\"\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following activity diagram summarizes what happens when a user executes a list command:\u003c/p\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-224\"\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/ListActivityDiagram.png\" alt\u003d\"ListActivityDiagram\"\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-227\"\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_list_design_considerations\"\u003e5.1.2. List Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-228\"\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_user_command_format\"\u003eAspect: User command format\u003c/h5\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-230\"\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-230\"\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e \u003ccode\u003elist f/com\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-231\"\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-231\"\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros: Easy to implement.\u003c/p\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-232\"\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons: \u003ccode\u003ef/\u003c/code\u003e is an optional prefix, user might forget that it exists as no error is shown in the command result box\u003c/p\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-233\"\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e find nearest \u003ccode\u003eBLOCK_NAME\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-234\"\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-234\"\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros: The user finds it natural to type the word find.\u003c/p\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-235\"\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons: Can be confusing whether find shows the list of canteens, food, or location of the canteen on campus. Having the \u0027find\u0027 command is also one additional command for the user to remember.\u003c/p\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-237\"\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_budget_command\"\u003e5.2. Budget Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-239\"\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003ebudget\u003c/code\u003e command is implemented by the \u003ccode\u003eBudgetCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-241\"\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to set the budget for the user or to view the current budget of the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-243\"\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrate the different scenario for the budge command:\u003c/p\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-247\"\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_budget_command_implementation\"\u003e5.2.1. Budget Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-249\"\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-249\"\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eBudgetCommandParse\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-250\"\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eBudgetCommandParse\u003c/code\u003e then parse the budget command to determine if the action of the budget is \u003ccode\u003eset\u003c/code\u003e, \u003ccode\u003eview\u003c/code\u003e or invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new \u003ccode\u003eBudgetCommand\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-252\"\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access then \u003ccode\u003eBudgetCommand#execute()\u003c/code\u003e to determine the type of execution.\u003c/p\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-253\"\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eIf the action is \u003ccode\u003eset\u003c/code\u003e then the \u003ccode\u003ebudget\u003c/code\u003e object saves the user input accordingly.\u003c/p\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-254\"\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eIf the action is \u003ccode\u003eview\u003c/code\u003e then the budge is retrieve from the storage.\u003c/p\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-255\"\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eBudgetCommand#execute()\u003c/code\u003e returns a \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-257\"\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003ebudget\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-261\"\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_budget_design_considerations\"\u003e5.2.2. Budget Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-262\"\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-264\"\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-264\"\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-265\"\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-265\"\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-266\"\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-267\"\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-268\"\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-268\"\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-269\"\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-271\"\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_enter_command\"\u003e5.3. Enter Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-273\"\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eEnter\u003c/code\u003e command is implemented by either the \u003ccode\u003eEnterCanteenCommand\u003c/code\u003e class or the \u003ccode\u003eEnterStallCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-275\"\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThese commands are accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to switch the user interface accordingly base on where the user is at.\u003c/p\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-277\"\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates the different scenario for the enter command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-281\"\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_enter_command_implementation\"\u003e5.3.1. Enter Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-283\"\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-283\"\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e which parses the user input into a \u003ccode\u003eParserContext\u003c/code\u003e to determine if the user is currently on the main context.\u003c/p\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-284\"\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eIf the user has input \u003ccode\u003eenter\u003c/code\u003e on the main context, it creates a \u003ccode\u003eEnterCanteenCommandParser\u003c/code\u003e object that parses in the user input to determine which canteen to enter.\u003c/p\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-285\"\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eOtherwise if the user has Input \u003ccode\u003eenter\u003c/code\u003e on the stall context, it creates a \u003ccode\u003eEnterStallCommandParser\u003c/code\u003e object that parses in the user input to determine which stall to enter"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new \u003ccode\u003eEnterCanteenCommand\u003c/code\u003e \u003cstrong\u003e/\u003c/strong\u003e \u003ccode\u003eEnterStallCommand\u003c/code\u003e object accordingly to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-287\"\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eEnterCanteenCommand#execute()\u003c/code\u003e \u003cstrong\u003e/\u003c/strong\u003e \u003ccode\u003eEnterStallCommand#execute()\u003c/code\u003e to switch the current display to the stalls/food available within the selected canteen/stall.\u003c/p\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-288\"\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBoth \u003ccode\u003eEnterCanteenCommand#execute()\u003c/code\u003e and \u003ccode\u003eEnterStallCommand#execute()\u003c/code\u003e returns a \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-290\"\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003eenter\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-294\"\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_enter_design_considerations\"\u003e5.3.2. Enter Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-295\"\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_2\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-297\"\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-297\"\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-298\"\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-298\"\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-299\"\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-300\"\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-301\"\u003e"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-301\"\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-302\"\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-304\"\u003e"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_filter_command\"\u003e5.4. Filter Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-306\"\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003efilter\u003c/code\u003e command is implemented by the \u003ccode\u003eFilterCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-308\"\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to filter outputs according to th euser input.\u003c/p\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-310\"\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003efilter\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-314\"\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_filter_command_implementation\"\u003e5.4.1. Filter Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-316\"\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eFilterCommandParser\u003c/code\u003e object."
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". \u003ccode\u003eFilterCommandParser\u003c/code\u003e then parse the filter command to determine if the filter output should be by price range or tags\u003cbr\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new \u003ccode\u003eFilterCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". The \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eFilterCommand#execute()\u003c/code\u003e which filter the options based on the user input and the context where \u003ccode\u003efilter\u003c/code\u003e is called."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the filter option is based on a price, the current context has to be the stall, otherwise an error message is thrown."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If the option is based on a tag, the filter option will return a list of option base on the current context."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". \u003ccode\u003eFilterCommand#execute()\u003c/code\u003e returns a \u003ccode\u003eCommandResult\u003c/code\u003e to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-324\"\u003e"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003efilter\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-328\"\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_filter_design_considerations\"\u003e5.4.2. Filter Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-329\"\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_3\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-331\"\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-331\"\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-332\"\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-332\"\u003e"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-333\"\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-334\"\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-335\"\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-335\"\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-336\"\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-340\"\u003e"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_goto_command\"\u003e5.5. Goto Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-342\"\u003e"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003egoto\u003c/code\u003e command is implemented by the \u003ccode\u003eGoToCanteenCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-344\"\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to display the direction to a canteen base on the user input.\u003c/p\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-346\"\u003e"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003egoto\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-350\"\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_goto_command_implementation\"\u003e5.5.1. Goto Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-352\"\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-352\"\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eGoToCanteenCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-353\"\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eGoToCanteenCommandParser\u003c/code\u003e then parse the goto command to determine the canteen name and the current location.\u003cbr\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process returns a new \u003ccode\u003eGoToCanteenCommand\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-355\"\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eGoToCanteenCommand#execute()\u003c/code\u003e to retrieve the directions based on the user input.\u003c/p\u003e"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-356\"\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eGoToCanteenCommand#execute()\u003c/code\u003e creates a new \u003ccode\u003eDirectionsCommandResults\u003c/code\u003e that extends the \u003ccode\u003eCommandResult\u003c/code\u003e which is to be returned"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-359\"\u003e"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003egoto\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-363\"\u003e"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_goto_design_considerations\"\u003e5.5.2. Goto Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-364\"\u003e"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_4\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-366\"\u003e"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-366\"\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-367\"\u003e"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-367\"\u003e"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-368\"\u003e"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-369\"\u003e"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-370\"\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-370\"\u003e"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-371\"\u003e"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-373\"\u003e"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_randomize_command\"\u003e5.6. Randomize Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-375\"\u003e"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003erandomize\u003c/code\u003e command is implemented  by the \u003ccode\u003eRandomizeCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-377\"\u003e"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to generate 5 random options based on the user input.\u003c/p\u003e"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-379\"\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates the different scenario for the randomize command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-381\"\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/RandomizeActivityDiagram.png\" alt\u003d\"RandomizeActivityDiagram\"\u003e"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-383\"\u003e"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_randomize_command_implementation\"\u003e5.6.1. Randomize Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-385\"\u003e"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-385\"\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eRandomizeCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-386\"\u003e"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eRandomizeCommandParser\u003c/code\u003e then parse the randomize command to separate the prefix if any and return a command object."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "In this case a \u003ccode\u003eRandomizeCommand\u003c/code\u003e object is created and returned to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-388\"\u003e"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eRandomizeCommand#execute()\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-389\"\u003e"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFrom \u003ccode\u003eRandomizeCommand#execute()\u003c/code\u003e, \u003ccode\u003erandomize\u003c/code\u003e objects are called to generate 5 random options based on the user input.\u003c/p\u003e"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-390\"\u003e"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eRandomizeCommand#execute()\u003c/code\u003e returns a  \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-392\"\u003e"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003erandomize\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-394\"\u003e"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/RandomizeSequenceDiagram.png\" alt\u003d\"RandomizeSequenceDiagram\"\u003e"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-396\"\u003e"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_randomize_design_considerations\"\u003e5.6.2. Randomize Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-397\"\u003e"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_context_where_randomize_can_be_called_from\"\u003eAspect: Context where \u003ccode\u003erandomize\u003c/code\u003e can be called from\u003c/h5\u003e"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-399\"\u003e"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-399\"\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e \u003ccode\u003erandomize\u003c/code\u003e function is only called from the canteen context.\u003c/p\u003e"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-400\"\u003e"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-400\"\u003e"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros: Easy to implement.\u003c/p\u003e"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-401\"\u003e"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons: Prefix are necessary to indicate if randomize is to be within one canteen only.\u003c/p\u003e"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-402\"\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e \u003ccode\u003erandomize\u003c/code\u003e can be called after entering a canteen.\u003c/p\u003e"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-403\"\u003e"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-403\"\u003e"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros: Reduce user inputs.\u003c/p\u003e"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-404\"\u003e"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons: Additional method will be needed to store the knowledge of the current canteen entered.\u003c/p\u003e"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-406\"\u003e"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_rate_command\"\u003e5.7. Rate Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-408\"\u003e"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003erate\u003c/code\u003e command is implemented by the \u003ccode\u003eRateCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-410\"\u003e"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to rate a food item.\u003c/p\u003e"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-412\"\u003e"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003erate\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-416\"\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_rate_command_implementation\"\u003e5.7.1. Rate Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-418\"\u003e"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-418\"\u003e"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eRateCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-419\"\u003e"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eRateCommandParser\u003c/code\u003e then parse in the user input to ensure that the \u003ccode\u003erate\u003c/code\u003e command is only use in the transaction context"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "and that the inputs are valid.\u003cbr\u003e"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process creates and return a \u003ccode\u003eRateCommand\u003c/code\u003e object to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-422\"\u003e"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access the \u003ccode\u003eRateCommand#execute()\u003c/code\u003e to retrieve the food item from the transaction storage and"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "update the rating of the food.\u003c/p\u003e"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-424\"\u003e"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eRateCommand#execute()\u003c/code\u003e returns a  \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-426\"\u003e"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003erate\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-430\"\u003e"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_rate_design_considerations\"\u003e5.7.2. Rate Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-431\"\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_5\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-433\"\u003e"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-433\"\u003e"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-434\"\u003e"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-434\"\u003e"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-435\"\u003e"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-436\"\u003e"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-437\"\u003e"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-437\"\u003e"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-438\"\u003e"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-440\"\u003e"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_review_command\"\u003e5.8. Review Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-442\"\u003e"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003ereview\u003c/code\u003e command is implemented by the \u003ccode\u003eReviewCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-444\"\u003e"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to review a food item.\u003c/p\u003e"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-446\"\u003e"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003ereview\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-450\"\u003e"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_review_command_implementation\"\u003e5.8.1. Review Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-452\"\u003e"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-452\"\u003e"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eReviewCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-453\"\u003e"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eReviewCommandParser\u003c/code\u003e then parse in the user input to ensure that the \u003ccode\u003ereview\u003c/code\u003e command is only use in the transaction context"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "and that the inputs are valid.\u003cbr\u003e"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process creates and return a \u003ccode\u003eReviewCommand\u003c/code\u003e object to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-456\"\u003e"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access the \u003ccode\u003eReviewCommand#execute()\u003c/code\u003e to retrieve the food item from the transaction storage and"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "update the review of the food.\u003c/p\u003e"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-458\"\u003e"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eReviewCommand#execute()\u003c/code\u003e returns a  \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-460\"\u003e"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003ereview\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-464\"\u003e"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_review_design_considerations\"\u003e5.8.2. Review Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-465\"\u003e"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_6\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-467\"\u003e"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-467\"\u003e"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-468\"\u003e"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-468\"\u003e"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-469\"\u003e"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-470\"\u003e"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-471\"\u003e"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-471\"\u003e"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-472\"\u003e"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-474\"\u003e"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_report_command_please_update_idk_how_it_works\"\u003e5.9. Report Command (Please Update, IDK how it works)\u003c/h3\u003e"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-476\"\u003e"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003ereport\u003c/code\u003e command is implemented by the \u003ccode\u003eReportCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-478\"\u003e"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to review a food item.\u003c/p\u003e"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-480\"\u003e"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003ereport\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-484\"\u003e"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_report_command_implementation\"\u003e5.9.1. Report Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-486\"\u003e"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-486\"\u003e"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eReportCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-487\"\u003e"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eReportCommandParser\u003c/code\u003e then parse the user input to determine the period of report to display.\u003cbr\u003e"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This Process returns a \u003ccode\u003eReportCommand\u003c/code\u003e object to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-489\"\u003e"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eReportCommand#execute()\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-490\"\u003e"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eReportCommand#execute()\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-491\"\u003e"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eReportCommand#execute()\u003c/code\u003e returns a  \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-493\"\u003e"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003ereport\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-497\"\u003e"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_review_design_considerations_2\"\u003e5.9.2. Review Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-498\"\u003e"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_7\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-500\"\u003e"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-500\"\u003e"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-501\"\u003e"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-501\"\u003e"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-502\"\u003e"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-503\"\u003e"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-504\"\u003e"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-504\"\u003e"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-505\"\u003e"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-508\"\u003e"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_select_command\"\u003e5.10. Select Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-510\"\u003e"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eselect\u003c/code\u003e command is implemented  by the \u003ccode\u003eSelectItemCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-512\"\u003e"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to store the current selected food item into the storage as well as to update the current budget of the user.\u003c/p\u003e"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-514\"\u003e"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003eselect\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-518\"\u003e"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_select_command_implementation\"\u003e5.10.1. Select Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-520\"\u003e"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-520\"\u003e"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eSelectItemCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-521\"\u003e"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eSelectItemCommandParser\u003c/code\u003e then parse the select command to ensure that the select command is called only on the stall context."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This process also checks if the user input is the food index or the food name that is available in that stall."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Returning a \u003ccode\u003eSelectItemCommand\u003c/code\u003e object to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-524\"\u003e"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eSelectItemCommand#execute()\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-525\"\u003e"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eSelectItemCommand#execute()\u003c/code\u003e retrieve that food selected and update other variables within its class for storage.\u003c/p\u003e"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-526\"\u003e"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eSelectItemCommand#execute()\u003c/code\u003e returns a  \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-528\"\u003e"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003eselect\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-532\"\u003e"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_select_design_considerations\"\u003e5.10.2. Select Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-533\"\u003e"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_8\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-535\"\u003e"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-535\"\u003e"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-536\"\u003e"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-536\"\u003e"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-537\"\u003e"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-538\"\u003e"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-539\"\u003e"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-539\"\u003e"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-540\"\u003e"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-542\"\u003e"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_transactions_command\"\u003e5.11. Transactions Command\u003c/h3\u003e"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-544\"\u003e"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003etransaction\u003c/code\u003e command is implemented  by the \u003ccode\u003eTransactionsCommand\u003c/code\u003e class.\u003c/p\u003e"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-546\"\u003e"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThis command is accessed by the \u003ccode\u003eLogicManager#execute()\u003c/code\u003e to display the transaction of the given period if stated.\u003c/p\u003e"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-548\"\u003e"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following \u003cem\u003eactivity diagram\u003c/em\u003e illustrates what happens when a user executes the \u003ccode\u003etransactions\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-552\"\u003e"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_transactions_command_implementation\"\u003e5.11.1. Transactions Command Implementation\u003c/h4\u003e"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-554\"\u003e"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-554\"\u003e"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e first executes \u003ccode\u003eFoodieBotParser\u003c/code\u003e to create a \u003ccode\u003eTransactionsCommandParser\u003c/code\u003e object.\u003c/p\u003e"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-555\"\u003e"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eTransactionsCommandParser\u003c/code\u003e then parse the user input to determine the period of transaction report to display.\u003cbr\u003e"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This Process returns a \u003ccode\u003eTransactionsCommand\u003c/code\u003e object to the \u003ccode\u003eLogicManager\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-557\"\u003e"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eLogicManager\u003c/code\u003e then access \u003ccode\u003eTransactionsCommand#execute()\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-558\"\u003e"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eTransactionsCommand#execute()\u003c/code\u003e retrieve the transaction list from storage and display the list within the given period or everything of period is not stated.\u003c/p\u003e"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-559\"\u003e"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe \u003ccode\u003eTransactionsCommand#execute()\u003c/code\u003e returns a  \u003ccode\u003eCommandResult\u003c/code\u003e object to the \u003ccode\u003eLogicManger\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-561\"\u003e"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBelow is the \u003cem\u003esequence diagram\u003c/em\u003e that summarizes what happens during the execution of the \u003ccode\u003etransactions\u003c/code\u003e command:\u003c/p\u003e"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect3 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-565\"\u003e"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch4 id\u003d\"_transactions_design_considerations\"\u003e5.11.2. Transactions Design Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect4 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-566\"\u003e"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch5 id\u003d\"_aspect_9\"\u003eAspect:\u003c/h5\u003e"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-568\"\u003e"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-568\"\u003e"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 1 (current choice):\u003c/strong\u003e `\u003c/p\u003e"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-569\"\u003e"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-569\"\u003e"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-570\"\u003e"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-571\"\u003e"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eAlternative 2:\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-572\"\u003e"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-572\"\u003e"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-573\"\u003e"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-576\"\u003e"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_testing\"\u003e6. Testing\u003c/h2\u003e"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-578\"\u003e"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRefer to the guide \u003ca href\u003d\"Testing.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-580\"\u003e"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_dev_ops\"\u003e7. Dev Ops\u003c/h2\u003e"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-582\"\u003e"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRefer to the guide \u003ca href\u003d\"DevOps.html\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-585\"\u003e"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_product_scope\"\u003eAppendix A: Product Scope\u003c/h2\u003e"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-587\"\u003e"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eTarget user profile\u003c/strong\u003e:\u003c/p\u003e"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-589\"\u003e"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-589\"\u003e"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ehas a need to keep track for food expenses\u003c/p\u003e"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-590\"\u003e"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eare indecisive on what food to have in campus\u003c/p\u003e"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-591\"\u003e"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003edoes not know which canteens are near them\u003c/p\u003e"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-592\"\u003e"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eis comfortable with command-line inputs on desktop\u003c/p\u003e"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-594\"\u003e"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eValue proposition\u003c/strong\u003e: get a food choice decided without having to work with GUI controls\u003c/p\u003e"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-598\"\u003e"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_user_stories\"\u003eAppendix B: User Stories\u003c/h2\u003e"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-600\"\u003e"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The user is not particularly limited to student and staff, it can be anyone who comes to visit NUS and is introduced to use the app"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-602\"\u003e"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePriorities: High (must have) - \u003ccode\u003e* * *\u003c/code\u003e, Medium (nice to have) - \u003ccode\u003e* *\u003c/code\u003e, Low (unlikely to have) - \u003ccode\u003e*\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-605\" style\u003d\"width: 80%;\"\u003e"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 22%;\"\u003e"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 23%;\"\u003e"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 30%;\"\u003e"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003ePriority\u003c/th\u003e"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eAs a \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eI want to \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eSo that I can\u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003enew user\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee usage instructions.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erefer to instructions when I forget how to use the App.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efind nearest canteens.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eget to the canteen quickly.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee which stores are open.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eremove entries that I no longer need.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser who is new to NUS (tourist, visitor or freshman).\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eget a clear directory to the canteen\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003emake my way to the canteen with ease.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser in campus\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erandomize a food choice.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etry something new every now and then.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser who is budget conscious\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eknow which food items fall within my budget.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eI would not overspend.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* * *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etake down some personal notes about the store, for example which dish at the mixed veg store is good.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee which is my favourite food amongst the NUS canteens.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser who has an idea of what s/he wants to have\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esearch for food items.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee which canteens sell them.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee which food items I have not tried.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etry all food items in the canteen.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser with disability\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eknow if there is convenient access to the canteen.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etry all food items in the canteen.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003estudent on budget\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esearch through prices of food items in different canteens.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ediscover which are the cheapest food items.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser who do not carry a lot of cash\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee the type of payment methods available.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eprepare myself beforehand.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etrack the frequency of the food I eat.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eeat certain food in moderation and save money if i have been eating expensive food frequently.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e* *\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esee some images of the food .\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eget some better understanding of the food aside from just the food description.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser who is health conscious\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eview the dietary options available for each canteen.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eknow which stall i can visit.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-640\"\u003e"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_user_story_for_version_2_0\"\u003eB.1. User Story for Version 2.0\u003c/h3\u003e"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-642\" style\u003d\"width: 80%;\"\u003e"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 22%;\"\u003e"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 23%;\"\u003e"
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 25%;\"\u003e"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 30%;\"\u003e"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003ePriority\u003c/th\u003e"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eAs a \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eI want to \u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eSo that I can\u0026#8230;\u0026#8203;\u003c/th\u003e"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003ev2.0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eplace an order.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ereceive the food when I arrive.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003ev2.0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003estore owner\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eadd new food items on the menu.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eeasily update the menu.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003ev2.0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003estore owner\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eset menu items to be on promotion.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eattract more students to select the menu item.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003ev2.0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eview the crowd condition.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eavoid going to the canteen if it is too crowded.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003e\u003ccode\u003ev2.0\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003euser\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003esend invitation to a friend.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ehave meals together with friends.\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-659\"\u003e"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_use_cases\"\u003eAppendix C: Use Cases\u003c/h2\u003e"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-661\"\u003e"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e(For all use cases below, the System is FoodieBot and the Actor is the user, unless specified otherwise)\u003c/p\u003e"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_use_case_uc1_select_a_randomised_stall_suggestion\" class\u003d\"discrete has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-664\"\u003eUse case: UC1 - Select a randomised stall suggestion\u003c/h3\u003e"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-666\"\u003e"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-668\"\u003e"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-668\"\u003e"
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser requests to randomise\u003c/p\u003e"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-669\"\u003e"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot shows the randomised suggestions\u003c/p\u003e"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-670\"\u003e"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser selects one of the randomised suggestion\u003c/p\u003e"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-673\"\u003e"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-675\"\u003e"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-678\"\u003e"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-678\"\u003e"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e1a. User wants to remove a randomised suggestion.\u003c/p\u003e"
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-681\"\u003e"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-681\"\u003e"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e1a1. User request to remove suggestion.\u003c/p\u003e"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-684\"\u003e"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e1a2. FoodieBot updates the food item not to be suggested in the future\u003c/p\u003e"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-686\"\u003e"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_use_case_uc2_set_budget\" class\u003d\"discrete has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-690\"\u003eUse case: UC2 - Set Budget\u003c/h3\u003e"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-692\"\u003e"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-694\"\u003e"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-694\"\u003e"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e(Optional) User requests to view budget\u003c/p\u003e"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-695\"\u003e"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot shows the current budget with list of expenses\u003c/p\u003e"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-696\"\u003e"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser request to set budget\u003c/p\u003e"
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-697\"\u003e"
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot updates the budget for the specified period\u003c/p\u003e"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-700\"\u003e"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-702\"\u003e"
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-705\"\u003e"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-705\"\u003e"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3a. The given amount is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-708\"\u003e"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-708\"\u003e"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3a1. FoodieBot shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-710\"\u003e"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-713\"\u003e"
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-713\"\u003e"
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3b. The given period is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-716\"\u003e"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-716\"\u003e"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3b1. FoodieBot shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-718\"\u003e"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_use_case_uc3_review_food_item\" class\u003d\"discrete has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-722\"\u003eUse case: UC3 - Review Food Item\u003c/h3\u003e"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-724\"\u003e"
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-726\"\u003e"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-726\"\u003e"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser requests to view transactions\u003c/p\u003e"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-727\"\u003e"
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot shows a list of transactions\u003c/p\u003e"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-728\"\u003e"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser request to review the food item in the list\u003c/p\u003e"
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-729\"\u003e"
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot shows the edit screen for user to update\u003c/p\u003e"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-730\"\u003e"
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot saves the user review\u003c/p\u003e"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-733\"\u003e"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-736\"\u003e"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-739\"\u003e"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-739\"\u003e"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e2a. The list is empty.\u003c/p\u003e"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-741\"\u003e"
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-744\"\u003e"
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-744\"\u003e"
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3a. The given index is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-746\"\u003e"
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-746\"\u003e"
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3a1. FoodieBot shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-748\"\u003e"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-751\"\u003e"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-751\"\u003e"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e5. The cancel command is supplied.\u003c/p\u003e"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-753\"\u003e"
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_use_case_uc4_rate_food_item\" class\u003d\"discrete has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-757\"\u003eUse case: UC4 - Rate Food Item\u003c/h3\u003e"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-760\"\u003e"
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eMSS\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-762\"\u003e"
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-762\"\u003e"
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser requests to view transactions\u003c/p\u003e"
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-763\"\u003e"
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot shows a list of transactions\u003c/p\u003e"
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-764\"\u003e"
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser request to rate the food item in the list\u003c/p\u003e"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-765\"\u003e"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot updates the review for the food item on the list\u003c/p\u003e"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-768\"\u003e"
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-770\"\u003e"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eExtensions\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-773\"\u003e"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-773\"\u003e"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e2a. The list is empty.\u003c/p\u003e"
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-775\"\u003e"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case ends.\u003c/p\u003e"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-779\"\u003e"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-779\"\u003e"
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3a. The given index is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-781\"\u003e"
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-781\"\u003e"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3a1. FoodieBot shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-783\"\u003e"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist none has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-787\"\u003e"
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"none\"\u003e"
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-787\"\u003e"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3b. The given rating is invalid.\u003c/p\u003e"
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-789\"\u003e"
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-789\"\u003e"
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e3b1. FoodieBot shows an error message.\u003c/p\u003e"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-791\"\u003e"
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse case resumes at step 2.\u003c/p\u003e"
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-794\"\u003e"
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/UseCase.png\" alt\u003d\"UseCase\" width\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-795\"\u003e"
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFig1. Use Case Diagram\u003c/p\u003e"
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-798\"\u003e"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_non_functional_requirements\"\u003eAppendix D: Non Functional Requirements\u003c/h2\u003e"
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-800\"\u003e"
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-800\"\u003e"
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eShould work on any \u003ca href\u003d\"#mainstream-os\"\u003emainstream OS\u003c/a\u003e as long as it has Java \u003ccode\u003e11\u003c/code\u003e or above installed.\u003c/p\u003e"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-801\"\u003e"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eShould be able to hold up to 1000 food items without a noticeable sluggishness in performance for typical usage.\u003c/p\u003e"
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-802\"\u003e"
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eA user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.\u003c/p\u003e"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-803\"\u003e"
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eShould be usable by users who have never used an e-directory\u003c/p\u003e"
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-804\"\u003e"
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe application should have images for the food items, if the food items are shown to the user\u003c/p\u003e"
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-805\"\u003e"
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe system should be backward compatible with data produced by earlier versions of the system\u003c/p\u003e"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-809\"\u003e"
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_glossary\"\u003eAppendix E: Glossary\u003c/h2\u003e"
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-810\"\u003e"
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eActivity Diagram\u003c/dt\u003e"
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUse to a model workflow.\u003c/p\u003e"
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eAPI\u003c/dt\u003e"
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eApplication Programming Interface\u003c/p\u003e"
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eCLI\u003c/dt\u003e"
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCommand Line Interface\u003c/p\u003e"
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eIn-Memory\u003c/dt\u003e"
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eType of database that relies primarily on memory for data storage.\u003c/p\u003e"
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eMSS\u003c/dt\u003e"
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eMain Success Scenario\u003c/p\u003e"
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eMainstream OS\u003c/dt\u003e"
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eWindows, Linux, Unix, OS-X\u003c/p\u003e"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003ePlantUML\u003c/dt\u003e"
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eComponent used to write diagrams.\u003c/p\u003e"
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eSequence Diagram\u003c/dt\u003e"
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCaptures the interactions between multiple objects for a given scenario.\u003c/p\u003e"
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eUI\u003c/dt\u003e"
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eUser Interface\u003c/p\u003e"
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-840\"\u003e"
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_product_survey\"\u003eAppendix F: Product Survey\u003c/h2\u003e"
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-842\"\u003e"
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eProduct Name\u003c/strong\u003e Pizza on iOS appstore\u003c/p\u003e"
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-845\"\u003e"
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAuthor: Bryan Wu\u003c/p\u003e"
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-847\"\u003e"
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003ePros:\u003c/p\u003e"
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-849\"\u003e"
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-849\"\u003e"
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAllow randomisation for food that requires choosing of ingredients\u003c/p\u003e"
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-851\"\u003e"
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCons:\u003c/p\u003e"
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-853\"\u003e"
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-853\"\u003e"
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAllow choosing of ingredients for pizza only\u003c/p\u003e"
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/DeveloperGuide.adoc-854\"\u003e"
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDoes not recommend which stores sell the pizza\u003c/p\u003e"
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Last updated 2020-03-29 23:13:20 +0800"
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 2298
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d FoodieBot - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-3/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d FoodieBot - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F11-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "By: `FoodieBot Team`      Since: `Feb 2020`    Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "FoodieBot is an all-in-one application created for NUS students, staff and visitors."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Designed primarily to help with your everyday campus dining needs, FoodieBot has something to offer"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "to everyone. Whether you need a random suggestion of what to eat, directions to get to the canteen, help in planning your budget for the week, or just want to see what each canteen has to offer, FoodieBot is here to provide for your needs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "// insert image to show section of UI attributes/ objects"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d About this Document"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d Symbols and Notations Used"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The following are the symbols and formatting used in this document:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "This symbol indicates tips for the particular feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`list` - A grey highlight (called a mark-up) indicates that this is a command that can be typed into the command box and executed by the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The command box location can be seen in the diagram below."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::Ui_screenshot_windows.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Definition of Common Words Used"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Context::"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "There are some commands that are only permissible at certain states of the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "For instance, the `review` and `rate` commands are only allowed after navigating to the transactions screen."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "We refer to this state as a *context*. Commands which specify a context which they are used in generally cannot work outside of that context."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "However, some commands are less particular about the context which they run in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "such as in the case of the `enter` command which can run in both the Main, Canteen and Stall contexts."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "GUI::"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Graphic User Interface is a type of visual interface that allows users to interact with."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Index::"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "It is a number that is linked to the item of the list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "An index is limited to the maximum number of items shown in the list, the item does not exist if an invalid index is specified in commands that use an index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d How to Use this Document"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Section 4. Features will introduce you to the commands for the application."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  Ensure that you have **Java 11** or above installed in your Computer."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  Download the latest **foodiebot.jar** link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your FoodieBot."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ".  Double-click the file to start the app. The Graphical User Interface(GUI) similar to the image shown below should appear in a few seconds."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::Ui_screenshot_windows.png[width\u003d\"850\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "TIP:  Some example commands you can try are listed below:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `*list*` : Lists all canteens or return to the main page."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `*enter* The Deck` : Display all the stalls location within The Deck."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `*goto* The Deck f/ COM1` : Display direction to go to deck from COM1."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `*back*` : Go back to the previous view"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `*exit*` : the exit command will close FoodieBot"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[red]*Command Format*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `budget set w/ AMOUNT`, `AMOUNT` is a parameter which can be used as `budget set w/ 9.50`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* Items in square brackets are optional entries e.g `report [w/DATE]` can be entered as `report [w/ 12-02-2020]` or as `report`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* _Canteen names_, _stall names_ and _commands_ are *case sensitive*."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003d\u003d\u003d Back Command: `*back*`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "If you want to return to your previous screen, just key in `*back*` and it\u0027ll bring you back"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "(at least if a previous screen exists)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Format: `back`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d Exit Command: `*exit*`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "When you\u0027re done using the application, type `*exit*` into the command box to close the application."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d List all Canteens: `*list*`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Curious to discover the range of dining options on campus? Simply enter `*list*` into the command box"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "and FoodieBot will show you all the fabulous canteens on campus for you to browse at your leisure."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "*  `[f/BLOCK_NAME]` - If you want to view the canteens by their distance from the place specified by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`BLOCK_NAME`, this is the tag for you. This will list the canteens in order of increasing distance from"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`BLOCK_NAME`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "TIP: You can also type `list` into the command box to return to the main page. This is a handy shortcut if"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "you ever forget which *Context* you\u0027re in."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*list*`::"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "List all canteens."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*list f/com1*`::"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "List all canteens starting with the nearest canteen from com1"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::app/list1.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Go to a Canteen: `*goto*`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "If you\u0027re ever lost in NUS, worry no more! The `goto` function can conveniently tell you the directions to the canteen you wish to"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "go to from your current location which you have indicated. It even includes a map image to aid you with understanding"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "the directions even easier."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "NOTE: This function will only work on the main page."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `goto CANTEEN_NAME f/ CURRENT_LOCATION`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `CANTEEN_NAME`: The canteen name"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `CURRENT_LOCATION`: The nearest block from your current location"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "These `CURRENT LOCATION`(s) are available for directions:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* com1"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "These `CURRENT LOCATION`(s) will be added in future releases"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "(but are recognised as valid locations):"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* pgpr"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* uhc"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* utown"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "NOTE: `CANTEEN_NAME` and `CURRENT_LOCATION` field has to be one of the suggestions. Otherwise an error message will be displayed telling the user to provide a valid `CANTEEN_NAME` and `CURRENT_LOCATION`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:: Let say you wish to go to The Deck from your current location at com1."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Enter the canteen which you want to go to and your current location in this format on the main page `goto The Deck f/ com1`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/gotoStep1.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ".  Then press kbd:[Enter]. This will give you a clear image and instruction on how to get to canteen from the nearest bus stop."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/gotoStep2.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d View Stalls or Menu: `*enter*`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Curious about the details of a particular canteen or stall? The `enter` command allows you to find out"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "all the information you want about the canteen or stall you are interested in."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Format: `enter STALL_NAME/ CANTEEN_NAME/ INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `INDEX`: An index that corresponds to a particular canteen. This index is located beside the canteen name."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `CANTEEN_NAME`: The canteen name has to be from one of the canteens displayed. Partial names are not allowed."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `STALL_NAME`:  The stall name has to be from one of the stalls displayed. Partial names are not allowed."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "NOTE: Information about the types of food sold at the stall, the rating of the stall and various other things will be implemented in v2.0. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The stall\u0027s rating is determined from the user\u0027s past experiences of the food items which were selected (find out"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "more in Section 4.13: Rate Food Items)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:: You wish to see the stalls available in Nus Flavors."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". On the main screen, type `enter Nus Flavors` or `enter 1` into the command box."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/enterStep1.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". This will display the list of stalls that Nus Flavors has."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "At the bottom of the screen, there will be a display box which displays the current canteen which you"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "have entered."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/enterStep2.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you wish to view stalls in another canteen you can enter `back` into the command box. This will bring you back to the main page."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". If you wish to see the menu of a stall, you can key in `enter` again."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Let us see what the Western stall has on their menu. You can key in `enter Western` or `enter 9`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Don\u0027t forget to hit the kbd:[enter] after you are done typing."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". This will show you the menu of the Western stall."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "For each food item, the name, the cost and the description of the food item will be given."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "At the bottom of the screen, there will also be a display box showing the current stall which you have entered."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/enterStall.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* Similarly, you can also enter `back` to return to the Nus Flavor canteen screen or enter `list` if you wish to return to the main screen."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003d\u003d\u003d Select the Food : `*select*`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Finally decided on a food item after browsing the countless food options at NUS, ordered it and want to record"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "down your dining experience? The `*select*` function is here allowing you to save your selected food"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "into your past transactions to help you track your history of food consumption."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `select`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `INDEX`: Select the food with the given index from the list displayed on the GUI"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `FOOD_NAME`: Select the food with the given name from the list displayed on the GUI"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "NOTE: If a budget has been set up, the price of the selected food will be automatically deducted from your"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "budget. This helps you keep track of how much money you have spent and how much more you can spend. Nifty, isn\u0027t it?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:: You have decided what you want to eat and you want to save that item to update your transaction history."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Ensure that you are on the menu screen of the stall. If you do not know how to get to the menu you can refer to the section above or \u003c\u003cView Stalls or Menu, here\u003e\u003e."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Continuing on from the example from the `*enter*` command above, we are currently in the Western stall."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/enterStall.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Enter `select Combo Set` or `selecct 1` into the command box."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". This will display the cost of the item, the remaining amount that you have and the amount you are left with to spend for the day."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "image::wireframe/select.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Randomize Food Selection : `*randomize*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Bamboozled by the countless dining options at NUS or simply bored of going to the same boring old canteens to"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "eat everyday? `randomize` is here to help you to generate a random option when you cannot decide on what to eat or"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "if you just want to spice up your culinary experience in NUS."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `randomize`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `[c/ CANTEEN_NAME]` - Produce a randomized list of foods from foods available at the particular canteen ."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "* `[t/ TAG]` - Randomize based on foods which are tagged with the tag provided."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:: On a day where you cannot decide on what to eat but you don\u0027t mind travelling anywhere on campus, you suddenly"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "remember that FoodieBot has a convenient `randomize` function."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Just enter `randomize` into the command box on the main screen."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/randomizeStep1.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". This will generate 1 option for you with the details of the _canteen name_ that this stall belongs to, the _stall name_, the _stall number_"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "the _price rating_ and the tag if there are any."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/randomize.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you like the option that you see, you can key in `enter Japanese` or `enter 1` to be redirected to the stall to see the menu."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you do not like the option, you can enter `randomize` again to be given another option."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:: What if you want to get a random option only from a particular canteen (eg. The Deck) that you are at or an option based on what you crave (eg. spicy food)?"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you want to get a random option based on the canteen (eg. The Deck), you can enter `randomize c/ The Deck` on the main screen."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This will display an option that is based on the canteen you want (in this case The Deck)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you want to get a random option based on your craving (eg. spicy), you can enter `randomize t/ spicy` on the main screen."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This will display a food which has the spicy tag."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* OR similarly, you can also enter the canteen first before getting a random option."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". In the command box key in `enter The deck` or `enter 2` to get the list of stalls available in The Deck."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/enterDeck.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". After that enter `randomize` or `randomize t/ TAG` to get an option. +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Let\u0027s try getting a food option that has rice from The deck"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/randomizeTag.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". This will display an option if there is a stall option that has that tag. Otherwise it will display a message in the feedback box."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/randomizeTagOutput.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Set a Budget : `*budget set*`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Have problems keeping track of your spending? The `budget set` command allows you to set up"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a daily, weekly or monthly budget to help you track how much money you have left to spend. This budget"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "can be changed anytime you want but please note the consequences in the box below!"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "NOTE: Changing the budget will reset the budget overview for the current budget cycle. +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "For example, if you have $5 remaining from a weekly budget of $20, setting a new monthly budget of $150"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "will update your current budget settings to the new one, but at the same time resets both the start date"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "of the cycle as well as the amount remaining. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "(But not to worry, your transactions are still saved!)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `budget set PERIOD AMOUNT`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `AMOUNT`: The maximum amount available to spend for the given time period."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `PERIOD`: The length of the cycle that a budget is effective for and when it will refresh."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "+"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "List of values for `PERIOD` are:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "+"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** `d/` - Daily"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** `w/` - Weekly"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** `m/` - Monthly"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: `PERIOD` field has to be one of the above suggestions. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "`AMOUNT` field has to be numeric (with or without decimal places). +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise an error message will be displayed requesting a correct type to be provided."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*budget set d/ 10*`::"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Sets daily budget to $10."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*budget set w/ 30.50*`::"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "** Sets weekly budget to $30.50."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*budget set m/ 100*`::"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Sets monthly budget to $100."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d View Budget: `*budget view*`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Curious about your budget this cycle, how much you have spent and how much you have left? `budget view` allows"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "you to see all your spending as well as the amount of money you have left to spend."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `budget view`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/budgetView.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d View Expense Report: `*report*`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "If you want to see how much you have spent over a period of time, view a beautifully designed report of your"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "past expenses with the `report` command."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Format: `report`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[f/FROM_DATE] [t/TO_DATE]` - Generates report from `FROM_DATE` until `TO_DATE`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: `report f/ 12-02-2020 t/ 30-04-2020`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[w/DATE]` - Generates report for the week (Monday-Sunday) of the input date."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: `report w/ 12-02-2020`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[m/MONTH]` - Generates report of the input month."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: `report m/ jan` - Generates a report for the month of January for the current year."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: `report m/ jul y/ 2019` - Generates a report for the month of July of the specified year"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "of 2019."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[y/YEAR]` - Generates report of the input year."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: `report y/ 2020`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: `FROM_DATE` cannot be a future date. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`TO_DATE` cannot be before the `FROM_DATE`, or the earliest possible date if the [f/] field is empty."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "image::wireframe/report.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d View Past Transactions: `*transactions*`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "In a similar way to `report`, `transactions` also allows you to see all the food you have purchased in"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "a particular period."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `transactions`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[f/FROM_DATE] [t/TO_DATE]` - Displays transactions from and till the given dates."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: transactions `f/ 12-02-2020 t/ 30-04-2020`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[w/DATE]` - Displays transactions for the week (Monday-Sunday) of the input date."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: transactions `w/ 12-02-2020`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[m/MONTH]` - Displays transactions of the input month."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: transactions `m/ jan` - Displays all transactions in the month of the current year."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: transactions `m/ jul y/ 2019` - Displays all transactions in the month of the specified year."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[y/YEAR]` - Displays transactions of the input year."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Example: transactions `y/ 2020`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: `FROM_DATE` cannot be a future date. +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "`TO_DATE` cannot be before the `FROM_DATE`, or the earliest possible date if the f/ field is empty."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "image::wireframe/transaction.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Review Food Items: `*review*`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "From the *transactions* screen, leave a food review for a food item you have consumed to help you jog"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "your memory and recall your experiences, be it pleasant or unpleasant, of the previous time you had the food."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Format: `review INDEX REVIEW`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `INDEX` - This must be the first parameter and an index from the list has to be specified."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `REVIEW`- This must be the second parameter and the review message cannot be blank."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:: You want to review a food item that you have eaten for future reference."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Ensure that you are on the transaction screen. You can key in `transactions` on the main screen to get there."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ". Pick a food you wish to review. Now perhaps you think that the Combo Set was delicious and that you absolutely adored the bbq sauce. +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Key in `review 1 The food is delicious! Love the bbq sauce` into the command box, and hit kbd:[enter]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "+"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "image::wireframe/review.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "TIP: You can update existing reviews by using the same command."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Rate Food Items: `*rate*`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Lazy to write a full food review? Well from the `*transactions*` screen, you can simply leave a food rating"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "to show how well you thought of the food you had."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "Format: `rate INDEX RATING`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `INDEX` - This must be the first parameter and an index from the list has to be specified."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `RATING`- This must be the second parameter and requires a rating for the food item."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*rate 3 8*`::"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Rate the 3rd item in the transactions list as 8."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "TIP: You can also update existing ratings by using the rate on the same food item."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d Set Food Items as Favorites: `*favorites set*`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Just had this absolutely delicious meal and want to save it for the next time so you can remember to have it"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "again or recommend it others? From the *menu screen* of a stall, you can easily set your favourite food items"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "for easier access in the future."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `favorites set INDEX`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `INDEX` - This must be the first parameter and an index from the list has to be specified."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d View Favorited Food Items: `*favorites view*`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Once you have saved your favorite food items, you can easily access them with this command."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `favorites view`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "image::wireframe/favoritesView.PNG[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Remove Favorite Food Items: `*favorites remove*`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Had a change of heart and a particular food has lost your fancy? Don\u0027t worry because FoodieBot makes it"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "painless to severe your ties, by allowing quick removal of that food."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `favorites remove INDEX`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `INDEX` - This must be the first parameter and an index from the list has to be specified."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003d\u003d\u003d Filter Canteens, Stalls or Food: `*filter*`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "If you only want a canteen, stall or food with a particular tag, filter allows you to as its name suggests"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "filter to show only the things you want. Filter also enables you to filter based on the maximum price you"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "are willing to pay"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Format: `filter TAG/ PRICE`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Parameters:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `TAG` - Label tag associated with the canteen or stall depending on which context you are on."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* `PRICE` - a number which indicates the maximum price of food you are willing to pay for."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "NOTE: You can only filter by _price_ from the *menu page* of a stall. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "When filtering by _tag_, tags varies base on the *current context*."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "****"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you wish to filter tags base on what the canteen has, you can enter"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "`*filter asian*` on the main screen. This will displays canteens with the asian tag."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* After entering a canteen, you can also filter the stalls base on tags as well."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "* If you have decided on the stall you wish to eat from, but then have a limit on how much you can spend ($4)."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "You can `filter 4` on the menu page. This will display all the options available that are within your budget."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*Q*: How can I update the list of canteens if there are changes to the canteens on campus? +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*A*: You can manually download foodiebot.json file which we have published link:https://github.com/AY1920S2-CS2103T-F11-3/main/blob/master/foodiebot.json[here]."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "*Q*: Can I write my personal review in other languages?  +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*A*: Yes, FoodieBot accepts input for different types of language, however it does not support in-app localization."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[width\u003d\"80%\",cols\u003d\"33%,\u003c60%,\u003c60%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "|Command |Function |Example"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|budget set PERIOD AMOUNT |Set a budget for the allocated period |budget set w/ 9.50"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|budget view |Views the current budget|"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|enter CANTEEN_NAME |Displays the menu for the selected canteen |enter The Deck"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|favorites set |Set the food item in the stall as a favorite |favorites set 1"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|favorites view |Displays all favorited food |favorites view"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|filter |Shows only canteens or stalls with a specified tag |filter asian"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|goto CANTEEN_NAME f/ CURRENT_LOCATION |Gets direction to canteen from the current location |goto The Deck f/ COM1"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|list |Displays the list of canteen |"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|rate INDEX | Gives a rating to the stall |"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|randomize |Displays a list of randomize options | randomize c/ The Deck"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|report |Generates a report of the food consumed |report f/ 12-02-2020 t/ 30-04-2020"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|review INDEX | Creates a review for the stall|"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|select INDEX| Saves the food in transactions |"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|transactions |Generates the transaction breakdown |transaction w/ 12-02-2020"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "|filter |Show only canteens or stalls with a specified tag |filter asian"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 137,
      "Samanthaseahpl": 245,
      "lsjxavier": 10,
      "shaungoh97": 1,
      "-": 132,
      "ignatiusong": 27
    }
  },
  {
    "path": "docs/UserGuide.html",
    "fileType": "html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmeta http-equiv\u003d\"X-UA-Compatible\" content\u003d\"IE\u003dedge\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmeta name\u003d\"viewport\" content\u003d\"width\u003ddevice-width, initial-scale\u003d1.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmeta name\u003d\"generator\" content\u003d\"Asciidoctor 2.0.10\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctitle\u003eFoodieBot - User Guide\u003c/title\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink rel\u003d\"stylesheet\" href\u003d\"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cstyle\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | https://asciidoctor.org */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/* Uncomment @import statement to use as custom stylesheet */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "audio,video{display:inline-block}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:none}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*,*::before,*::after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".stretch{width:100%}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:0}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite::before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt{background:#f8f8f7}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:\" \";display:table}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix::after,.float-group::after{clear:both}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ":not(pre):not([class^\u003dL])\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ":not(pre)\u003ecode.nobreak{word-wrap:normal}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ":not(pre)\u003ecode.nowrap{white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "pre{color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "pre code,pre pre{color:inherit;font-size:inherit;line-height:inherit}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "pre\u003ecode{display:block}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "pre.nowrap,pre.nowrap pre{white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "em em{font-style:normal}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "strong strong{font-weight:400}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menuref{color:#000}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq b:not(.caret),.menuref{font-weight:inherit}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq{word-spacing:-.02em}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq b.caret{font-size:1.25em;line-height:.8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq i.caret{font-weight:bold;text-align:center;width:.45em}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "b.button::before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "b.button::after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:\" \";display:table}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header::after,#content::after,#footnotes::after,#footer::after{clear:both}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#content::before{content:none}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span::before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author::before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark::before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber::after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-bottom:.625em}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width:768px){#content{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1:last-child{padding-bottom:0}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #e7e7e9}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor::before,h2\u003ea.anchor::before,h3\u003ea.anchor::before,#toctitle\u003ea.anchor::before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor::before,h4\u003ea.anchor::before,h5\u003ea.anchor::before,h6\u003ea.anchor::before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "details,.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "details\u003esummary:first-of-type{cursor:pointer;display:list-item;outline:none;margin-bottom:.75em}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock.fit-content\u003ecaption.title{white-space:nowrap;width:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e[class\u003d\"paragraph\"]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e[class\u003d\"paragraph\"]:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#dbdbd6;margin-bottom:1.25em;padding:1.25em;background:#f3f3f2;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock\u003e.content\u003epre{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;overflow-x:auto;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width:768px){.literalblock pre,.listingblock\u003e.content\u003epre{font-size:.90625em}}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen and (min-width:1280px){.literalblock pre,.listingblock\u003e.content\u003epre{font-size:1em}}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock\u003e.content\u003epre:not(.highlight),.listingblock\u003e.content\u003epre[class\u003d\"highlight\"],.listingblock\u003e.content\u003epre[class^\u003d\"highlight \"]{background:#f7f7f8}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:inherit;opacity:.5}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]::before{display:block}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:inherit;opacity:.5}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt])::before{content:\"$\"}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "pre.prettyprint .linenums{line-height:1.45;margin-left:2em}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "pre.prettyprint li{background:none;list-style-type:inherit;padding-left:0}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "pre.prettyprint li code[data-lang]::before{opacity:1}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "pre.prettyprint li:not(:first-child) code[data-lang]::before{display:none}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "table.linenotable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "table.linenotable td[class]{color:inherit;vertical-align:top;padding:0;line-height:inherit;white-space:normal}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "table.linenotable td.code{padding-left:.75em}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "table.linenotable td.linenos{border-right:1px solid currentColor;opacity:.35;padding-right:.5em}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{border-right:1px solid currentColor;opacity:.35;display:inline-block;margin-right:.75em}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno::before{content:\"\";margin-right:-.125em}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock:not(.excerpt)\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote::before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 1em 1.25em;display:block}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract\u003e.title{margin:0 0 .375em;font-size:1.15em;text-align:center}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.excerpt\u003eblockquote,.quoteblock .quoteblock{padding:0 0 .25em 1em;border-left:.25em solid #dddddf}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.excerpt,.quoteblock .quoteblock{margin-left:0}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;text-align:left;margin-right:0}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "td.tableblock\u003e.content\u003e:last-child{margin-bottom:-1.25em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td.tableblock\u003e.content\u003e:last-child.sidebarblock{margin-bottom:0}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all\u003ethead\u003etr\u003e.tableblock,table.grid-all\u003etbody\u003etr\u003e.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all\u003etfoot\u003etr\u003e.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols\u003e*\u003etr\u003e.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows\u003ethead\u003etr\u003e.tableblock,table.grid-rows\u003etbody\u003etr\u003e.tableblock{border-width:0 0 1px}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows\u003etfoot\u003etr\u003e.tableblock{border-width:1px 0 0}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all\u003e*\u003etr\u003e.tableblock:last-child,table.grid-cols\u003e*\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all\u003etbody\u003etr:last-child\u003e.tableblock,table.grid-all\u003ethead:last-child\u003etr\u003e.tableblock,table.grid-rows\u003etbody\u003etr:last-child\u003e.tableblock,table.grid-rows\u003ethead:last-child\u003etr\u003e.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot,table.frame-ends{border-width:1px 0}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "table.stripes-all tr,table.stripes-odd tr:nth-of-type(odd),table.stripes-even tr:nth-of-type(even),table.stripes-hover tr:hover{background:#f8f8f7}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unstyled{margin-left:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{margin-right:.25em}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{margin-left:1.25em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".colist td:not([class]):first-child img{max-width:none}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".colist td:not([class]):last-child{padding:.25em 0}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background:#00fafa}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background:#000}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background:#0000fa}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background:#fa00fa}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background:#7d7d7d}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background:#007d00}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background:#00fa00}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background:#7d0000}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background:#00007d}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background:#7d7d00}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background:#7d007d}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background:#fa0000}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background:#bcbcbc}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background:#007d7d}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background:#fafafa}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background:#fafa00}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a span.icon\u003e.fa{cursor:inherit}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note::before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip::before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning::before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution::before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important::before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]::after{content:attr(data-value)}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-size:80%}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare)::after,a[href^\u003d\"https:\"]:not(.bare)::after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]::after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span::before{content:none!important}"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]::before{display:block}"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{padding:0 .9375em}"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "@media print,amzn-kf8{#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding:0!important}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0}"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/style\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"article\"\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"header\"\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ch1\u003eFoodieBot - User Guide\u003c/h1\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"preamble\"\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-17\"\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eBy: \u003ccode\u003eFoodieBot Team\u003c/code\u003e      Since: \u003ccode\u003eFeb 2020\u003c/code\u003e    Licence: \u003ccode\u003eMIT\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"toc\" class\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"toctitle\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul class\u003d\"sectlevel1\"\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_introduction\"\u003e1. Introduction\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_about_this_document\"\u003e2. About this Document\u003c/a\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_symbols_and_notations_used\"\u003e2.1. Symbols and Notations Used\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_definition_of_common_words_use\"\u003e2.2. Definition of Common Words Use\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_how_to_use_this_document\"\u003e2.3. How to Use this Document\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_quick_start\"\u003e3. Quick Start\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#Features\"\u003e4. Features\u003c/a\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul class\u003d\"sectlevel2\"\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_list_all_canteens_list\"\u003e4.1. List All Canteens: \u003ccode\u003e\u003cstrong\u003elist\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_go_to_canteen_goto\"\u003e4.2. Go to Canteen: \u003ccode\u003e\u003cstrong\u003egoto\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_view_all_stalls_in_canteen_enter\"\u003e4.3. View All Stalls in Canteen: \u003ccode\u003e\u003cstrong\u003eenter\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_view_all_food_items_in_a_stall_enter\"\u003e4.4. View All Food Items in a Stall: \u003ccode\u003e\u003cstrong\u003eenter\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_select_the_food_select\"\u003e4.5. Select the Food : \u003ccode\u003e\u003cstrong\u003eselect\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_randomize_food_selection_randomize\"\u003e4.6. Randomize Food Selection : \u003ccode\u003e\u003cstrong\u003erandomize\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_set_a_budget_budget_set\"\u003e4.7. Set a Budget : \u003ccode\u003e\u003cstrong\u003ebudget set\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_view_budget_budget_view\"\u003e4.8. View Budget: \u003ccode\u003e\u003cstrong\u003ebudget view\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_view_expense_report_report\"\u003e4.9. View Expense Report: \u003ccode\u003e\u003cstrong\u003ereport\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_view_past_transactions_transactions\"\u003e4.10. View Past Transactions: \u003ccode\u003e\u003cstrong\u003etransactions\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_review_food_items_review\"\u003e4.11. Review Food Items: \u003ccode\u003e\u003cstrong\u003ereview\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_rate_food_items_rate\"\u003e4.12. Rate Food Items: \u003ccode\u003e\u003cstrong\u003erate\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_set_food_items_as_favorites_favorites_set\"\u003e4.13. Set Food Items as Favorites: \u003ccode\u003e\u003cstrong\u003efavorites set\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_view_favorited_food_items_favorites_view\"\u003e4.14. View Favorited Food Items: \u003ccode\u003e\u003cstrong\u003efavorites view\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_remove_favorited_food_items_favorites_remove\"\u003e4.15. Remove Favorited Food Items: \u003ccode\u003e\u003cstrong\u003efavorites remove\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_filter_canteens_or_stalls_filter\"\u003e4.16. Filter Canteens or Stalls: \u003ccode\u003e\u003cstrong\u003efilter\u003c/strong\u003e\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_faq\"\u003e5. FAQ\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli\u003e\u003ca href\u003d\"#_command_summary\"\u003e6. Command Summary\u003c/a\u003e\u003c/li\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/UserGuide.adoc-19\"\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ch2 id\u003d\"_introduction\"\u003e1. Introduction\u003c/h2\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-21\"\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFoodieBot is an all-in-one application created for students, staff and visitors, to help  with everyday\u0026#8217;s campus dining needs. Whether you need a random suggestion of what to eat, directions to get to the canteen, help in planning your budget for the week, or just want to see what each canteen has to offer, FoodieBot is here to provide for your needs.\u003c/p\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/UserGuide.adoc-25\"\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_about_this_document\"\u003e2. About this Document\u003c/h2\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-26\"\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_symbols_and_notations_used\"\u003e2.1. Symbols and Notations Used\u003c/h3\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-27\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eThe following are symbols and formatting used in this document:\u003c/p\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-30\"\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This symbol indicates important information."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip has-source-line data-line-D:/main/docs/UserGuide.adoc-33\"\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This symbol indicates tips for the particular feature."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-35\"\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003elist\u003c/code\u003e - A grey highlight (called a mark-up) indicates that this is a command that can be typed into the command line and executed by the application.\u003c/p\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-37\"\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_definition_of_common_words_use\"\u003e2.2. Definition of Common Words Use\u003c/h3\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-39\"\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003eGUI\u003c/dt\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eGraphic User Interface is a type of interface that allows users to interact with.\u003c/p\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-44\"\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_how_to_use_this_document\"\u003e2.3. How to Use this Document\u003c/h3\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-45\"\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSection 4. Features will introduce you to the commands for the application.\u003c/p\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/UserGuide.adoc-47\"\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_quick_start\"\u003e3. Quick Start\u003c/h2\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"olist arabic has-source-line data-line-D:/main/docs/UserGuide.adoc-50\"\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003col class\u003d\"arabic\"\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-50\"\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eEnsure that you have \u003cstrong\u003eJava 11\u003c/strong\u003e or above installed in your Computer.\u003c/p\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-51\"\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDownload the latest \u003cstrong\u003efoodiebot.jar\u003c/strong\u003e \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/releases\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-52\"\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eCopy the file to the folder you want to use as the home folder for your FoodieBot.\u003c/p\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-53\"\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDouble-click the file to start the app. The Graphical User Interface(GUI) similar to the image shown below should appear in a few seconds.\u003c/p\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock has-source-line data-line-D:/main/docs/UserGuide.adoc-56\"\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/Ui_labeled.png\" alt\u003d\"Ui labeled\" width\u003d\"850\"\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-58\"\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003eType the command in the command box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it.\u003cbr\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing \u003cstrong\u003e\u003ccode\u003ehelp\u003c/code\u003e\u003c/strong\u003e and pressing \u003ckbd\u003eEnter\u003c/kbd\u003e will open the help window.\u003c/p\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-60\"\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003eSome example commands you can try:\u003c/p\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-62\"\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-62\"\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e\u003cstrong\u003elist\u003c/strong\u003e\u003c/code\u003e : Lists all canteens.\u003c/p\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-63\"\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e\u003cstrong\u003eenter\u003c/strong\u003e The Deck\u003c/code\u003e : Display all the stalls location within The Deck.\u003c/p\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-64\"\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e\u003cstrong\u003egoto\u003c/strong\u003e The Deck f/ COM1\u003c/code\u003e : Display direction to go to deck from COM1.\u003c/p\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-65\"\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e\u003cstrong\u003eexit\u003c/strong\u003e\u003c/code\u003e : Go back to the previous view, if the application is at the main screen, the exit command will close the application\u003c/p\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ol\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/UserGuide.adoc-70\"\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"Features\"\u003e4. Features\u003c/h2\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"exampleblock has-source-line data-line-D:/main/docs/UserGuide.adoc-72\"\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-73\"\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong class\u003d\"red\"\u003eCommand Format\u003c/strong\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-76\"\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-76\"\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eWords in \u003ccode\u003eUPPER_CASE\u003c/code\u003e are the parameters to be supplied by the user e.g. in \u003ccode\u003ebudget set w/ AMOUNT\u003c/code\u003e, \u003ccode\u003eAMOUNT\u003c/code\u003e is a parameter which can be used as \u003ccode\u003ebudget set w/ 9.50\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-77\"\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eItems in square brackets are optional entries e.g \u003ccode\u003ereport [w/DATE]\u003c/code\u003e can be entered as \u003ccode\u003ereport [w/ 12-02-2020]\u003c/code\u003e or as \u003ccode\u003ereport\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-80\"\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_list_all_canteens_list\"\u003e4.1. List All Canteens: \u003ccode\u003e\u003cstrong\u003elist\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-82\"\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplays a list of available canteens on campus.\u003c/p\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-84\"\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003elist\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-86\"\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-88\"\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-88\"\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[f/BLOCK_NAME]\u003c/code\u003e - Displays canteens ordered by increasing distance from current location.\u003c/p\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-90\"\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-92\"\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-93\"\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003elist\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eList all canteens.\u003c/p\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003elist f/com1\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eList all canteens starting with the nearest canteen from com1\u003c/p\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock text-left has-source-line data-line-D:/main/docs/UserGuide.adoc-99\"\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/app/list.png\" alt\u003d\"list\" width\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-102\"\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_go_to_canteen_goto\"\u003e4.2. Go to Canteen: \u003ccode\u003e\u003cstrong\u003egoto\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-104\"\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplays a map with the route between the starting location and the destination."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Includes instructions on how to travel there as well as bus services that go to the canteen.\u003c/p\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-107\"\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003egoto CANTEEN_NAME f/ CURRENT_LOCATION\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-111\"\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccode\u003eCANTEEN_NAME\u003c/code\u003e and \u003ccode\u003eCURRENT_LOCATION\u003c/code\u003e field has to be one of the suggestions. Otherwise an error message will be displayed telling the user to provide a valid \u003ccode\u003eCANTEEN_NAME\u003c/code\u003e and \u003ccode\u003eCURRENT_LOCATION\u003c/code\u003e."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock text-left has-source-line data-line-D:/main/docs/UserGuide.adoc-113\"\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cimg src\u003d\"images/wireframe/goto.png\" alt\u003d\"goto\" width\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-115\"\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_view_all_stalls_in_canteen_enter\"\u003e4.3. View All Stalls in Canteen: \u003ccode\u003e\u003cstrong\u003eenter\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-117\"\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplays the stalls available at the specified canteen.\u003c/p\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-119\"\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003eenter\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-121\"\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-124\"\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-124\"\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e: Enter the canteen with the entered index.\u003c/p\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-126\"\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eCANTEEN_NAME\u003c/code\u003e: Enter the canteen with the entered name.\u003c/p\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-128\"\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Information about the cuisine sold at the stall, the rating of the stall and various other things will be implemented in v2.0.\u003cbr\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The stall\u0026#8217;s rating is determined from the user\u0026#8217;s past experiences of the food items which were selected."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-131\"\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_view_all_food_items_in_a_stall_enter\"\u003e4.4. View All Food Items in a Stall: \u003ccode\u003e\u003cstrong\u003eenter\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-133\"\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplays the food items available at the specified stall.\u003c/p\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-135\"\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This method works after entering a canteen."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-137\"\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003eenter\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-139\"\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-141\"\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-141\"\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e: Enter the stall with the entered index.\u003c/p\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-143\"\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eSTALL_NAME\u003c/code\u003e: Enter the stall with the entered name.\u003c/p\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-145\"\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Information about the cuisine sold at the stall, the rating of the food item and various other things will be implemented in v2.0.\u003cbr\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "The stall\u0026#8217;s rating is determined from the user\u0026#8217;s past experiences of the food items which were selected."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-149\"\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_select_the_food_select\"\u003e4.5. Select the Food : \u003ccode\u003e\u003cstrong\u003eselect\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-151\"\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSaves the selected food into transactions to help the user track his history of food consumption.\u003c/p\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-153\"\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003eselect\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-155\"\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-158\"\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-158\"\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e: Select the food with the given index from the list displayed on the GUI\u003c/p\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-159\"\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eFOOD_NAME\u003c/code\u003e: Select the food with the given name from the list displayed on the GUI\u003c/p\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-161\"\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "If a budget has been set up, the budget will be automatically"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "reduced by the price of the selected food."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-164\"\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-166\"\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-167\"\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003eselect 1\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSelects the food item listed at index 1.\u003c/p\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003eselect Combo Set\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSelects the food item Combo Set.\u003c/p\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock text-left has-source-line data-line-D:/main/docs/UserGuide.adoc-173\"\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/wireframe/select.png\" alt\u003d\"select\" width\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-175\"\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_randomize_food_selection_randomize\"\u003e4.6. Randomize Food Selection : \u003ccode\u003e\u003cstrong\u003erandomize\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-177\"\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplays a list of randomized suggestions of food.\u003c/p\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-179\"\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003erandomize\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-181\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-183\"\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-183\"\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[c/ CANTEEN_NAME]\u003c/code\u003e - Produce a randomized list of foods from foods available at the particular canteen .\u003c/p\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-184\"\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[t/ TAG]\u003c/code\u003e - Randomize based on foods which are tagged with the tag provided.\u003c/p\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-186\"\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-188\"\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-189\"\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003erandomize c/ The Deck\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplay five stall that are located in The Deck.\u003c/p\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003erandomize t/ rice\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplay five stall that contain the tag \u003ccode\u003erice\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock text-left has-source-line data-line-D:/main/docs/UserGuide.adoc-195\"\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/wireframe/randomize.png\" alt\u003d\"randomize\" width\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-197\"\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_set_a_budget_budget_set\"\u003e4.7. Set a Budget : \u003ccode\u003e\u003cstrong\u003ebudget set\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-199\"\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSets a daily, weekly or monthly budget. The budget can be changed.\u003c/p\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-201\"\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Changing the budget will reset the budget overview for the current budget cycle.\u003cbr\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "For example, if you have $5 remaining from a weekly budget of $20, setting a new monthly budget of $150"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "will update your current budget settings to the new one, but at the same time resets both the start date"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "of the cycle as well as the amount remaining.\u003cbr\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "(But not to worry, your transactions are still saved!)"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-207\"\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003ebudget set PERIOD AMOUNT\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-209\"\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-211\"\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-211\"\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eAMOUNT\u003c/code\u003e: The maximum amount available to spend for the given time period.\u003c/p\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-212\"\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003ePERIOD\u003c/code\u003e: The length of the cycle that a budget is effective for and when it will refresh.\u003c/p\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-214\"\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eList of values for \u003ccode\u003ePERIOD\u003c/code\u003e are:\u003c/p\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-216\"\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-216\"\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003ed/\u003c/code\u003e - Daily\u003c/p\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-217\"\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003ew/\u003c/code\u003e - Weekly\u003c/p\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-218\"\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003em/\u003c/code\u003e - Monthly\u003c/p\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-220\"\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccode\u003ePERIOD\u003c/code\u003e field has to be one of the above suggestions.\u003cbr\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccode\u003eAMOUNT\u003c/code\u003e field has to be numeric (with or without decimal places).\u003cbr\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise an error message will be displayed requesting a correct type to be provided."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-225\"\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-227\"\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-228\"\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003ebudget set w/ 9.50\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-229\"\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-229\"\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSets weekly budget to $9.50.\u003c/p\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003ebudget set m/ 100\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSets monthly budget to $100.\u003c/p\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-234\"\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_view_budget_budget_view\"\u003e4.8. View Budget: \u003ccode\u003e\u003cstrong\u003ebudget view\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-236\"\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eViews the current budget, spendings made during the current budget cycle,"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "as well as the remaining budget available to spend.\u003c/p\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-239\"\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003ebudget view\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-241\"\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_view_expense_report_report\"\u003e4.9. View Expense Report: \u003ccode\u003e\u003cstrong\u003ereport\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-243\"\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eGenerates a report of the spending and food purchases for the period specified.\u003c/p\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-245\"\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003ereport\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-247\"\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-249\"\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-249\"\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[f/FROM_DATE] [t/TO_DATE]\u003c/code\u003e - Generates report from \u003ccode\u003eFROM_DATE\u003c/code\u003e until \u003ccode\u003eTO_DATE\u003c/code\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-250\"\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-250\"\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: \u003ccode\u003ereport f/ 12-02-2020 t/ 30-04-2020\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-251\"\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[w/DATE]\u003c/code\u003e - Generates report for the week (Monday-Sunday) of the input date.\u003c/p\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-252\"\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-252\"\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: \u003ccode\u003ereport w/ 12-02-2020\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-253\"\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[m/MONTH]\u003c/code\u003e - Generates report of the input month.\u003c/p\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-254\"\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-254\"\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: \u003ccode\u003ereport m/ jan\u003c/code\u003e - Generates a report for the month of January for the current year.\u003c/p\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-255\"\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: \u003ccode\u003ereport m/ jul y/ 2019\u003c/code\u003e - Generates a report for the month of July of the specified year"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "of 2019.\u003c/p\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-257\"\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[y/YEAR]\u003c/code\u003e - Generates report of the input year.\u003c/p\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-258\"\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-258\"\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: \u003ccode\u003ereport y/ 2020\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-260\"\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccode\u003eFROM_DATE\u003c/code\u003e cannot be a future date.\u003cbr\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccode\u003eTO_DATE\u003c/code\u003e cannot be before the \u003ccode\u003eFROM_DATE\u003c/code\u003e, or the earliest possible date if the [f/] field is empty."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-265\"\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_view_past_transactions_transactions\"\u003e4.10. View Past Transactions: \u003ccode\u003e\u003cstrong\u003etransactions\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-267\"\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eDisplays the past transactions of food purchases for any period specified.\u003c/p\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-269\"\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003etransactions\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-271\"\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-273\"\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-273\"\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[f/FROM_DATE] [t/TO_DATE]\u003c/code\u003e - Displays transactions from and till the given dates.\u003c/p\u003e"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-274\"\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-274\"\u003e"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: \u003ccode\u003ereport f/ 12-02-2020 t/ 30-04-2020\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-275\"\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[w/DATE]\u003c/code\u003e - Displays transactions for the week (Monday-Sunday) of the input date.\u003c/p\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-276\"\u003e"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-276\"\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: transactions \u003ccode\u003ew/ 12-02-2020\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-277\"\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[m/MONTH]\u003c/code\u003e - Displays transactions of the input month.\u003c/p\u003e"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-278\"\u003e"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-278\"\u003e"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: transactions \u003ccode\u003em/ jan\u003c/code\u003e - Displays all transactions in the month of the current year.\u003c/p\u003e"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-279\"\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: transactions \u003ccode\u003em/ jul y/ 2019\u003c/code\u003e - Displays all transactions in the month of the specified year.\u003c/p\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-280\"\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003e[y/YEAR]\u003c/code\u003e - Displays transactions of the input year.\u003c/p\u003e"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-281\"\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-281\"\u003e"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExample: transactions \u003ccode\u003ey/ 2020\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock note has-source-line data-line-D:/main/docs/UserGuide.adoc-283\"\u003e"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eNote\u003c/div\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ccode\u003eFROM_DATE\u003c/code\u003e cannot be a future date.\u003cbr\u003e"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccode\u003eTO_DATE\u003c/code\u003e cannot be before the \u003ccode\u003eFROM_DATE\u003c/code\u003e, or the earliest possible date if the f/ field is empty."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"imageblock text-left has-source-line data-line-D:/main/docs/UserGuide.adoc-286\"\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/wireframe/transaction.png\" alt\u003d\"transaction\" width\u003d\"700\"\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-288\"\u003e"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_review_food_items_review\"\u003e4.11. Review Food Items: \u003ccode\u003e\u003cstrong\u003ereview\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-290\"\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eReviews food items from the transactions user interface.\u003c/p\u003e"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-292\"\u003e"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003ereview INDEX REVIEW\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-294\"\u003e"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-296\"\u003e"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-296\"\u003e"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e - This must be the first parameter and an index from the list has to be specified.\u003c/p\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-297\"\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eREVIEW\u003c/code\u003e- This must be the second parameter and the review message cannot be blank.\u003c/p\u003e"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-299\"\u003e"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-301\"\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-302\"\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003erate 5 This was yummy!\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eAdds review \"This was yummy!\" to the 5th item in the transactions list.\u003c/p\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip has-source-line data-line-D:/main/docs/UserGuide.adoc-306\"\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "You can update existing reviews by using the same command."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-310\"\u003e"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_rate_food_items_rate\"\u003e4.12. Rate Food Items: \u003ccode\u003e\u003cstrong\u003erate\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-312\"\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRates food items from the transactions screen."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "This rating is on a scale from 0 to 10.\u003c/p\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-315\"\u003e"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003erate INDEX RATING\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-317\"\u003e"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-319\"\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-319\"\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e - This must be the first parameter and an index from the list has to be specified.\u003c/p\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-320\"\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eRATING\u003c/code\u003e- This must be the second parameter and requires a rating for the food item.\u003c/p\u003e"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-322\"\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-324\"\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-325\"\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003erate 3 8\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eRate the 3rd item in the transactions list as 8.\u003c/p\u003e"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"admonitionblock tip has-source-line data-line-D:/main/docs/UserGuide.adoc-329\"\u003e"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctable\u003e"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"icon\"\u003e"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"title\"\u003eTip\u003c/div\u003e"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ctd class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "You can also update existing ratings by using the rate on the same food item."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/td\u003e"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-331\"\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_set_food_items_as_favorites_favorites_set\"\u003e4.13. Set Food Items as Favorites: \u003ccode\u003e\u003cstrong\u003efavorites set\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-333\"\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eSet food items from the stalls as favorites for easier access.\u003c/p\u003e"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-335\"\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efavorites set INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-337\"\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-339\"\u003e"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-339\"\u003e"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e - This must be the first parameter and an index from the list has to be specified.\u003c/p\u003e"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-342\"\u003e"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_view_favorited_food_items_favorites_view\"\u003e4.14. View Favorited Food Items: \u003ccode\u003e\u003cstrong\u003efavorites view\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-344\"\u003e"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eView the food items that have been set as favorites.\u003c/p\u003e"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-346\"\u003e"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efavorites view\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-348\"\u003e"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_remove_favorited_food_items_favorites_remove\"\u003e4.15. Remove Favorited Food Items: \u003ccode\u003e\u003cstrong\u003efavorites remove\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-350\"\u003e"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eView the food items that have been set as favorites.\u003c/p\u003e"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-352\"\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efavorites remove INDEX\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-354\"\u003e"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-356\"\u003e"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-356\"\u003e"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eINDEX\u003c/code\u003e - This must be the first parameter and an index from the list has to be specified.\u003c/p\u003e"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect2 has-source-line data-line-D:/main/docs/UserGuide.adoc-358\"\u003e"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch3 id\u003d\"_filter_canteens_or_stalls_filter\"\u003e4.16. Filter Canteens or Stalls: \u003ccode\u003e\u003cstrong\u003efilter\u003c/strong\u003e\u003c/code\u003e\u003c/h3\u003e"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-360\"\u003e"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFilter canteens or stalls based on the tag entered.\u003c/p\u003e"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-362\"\u003e"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eFormat: \u003ccode\u003efilter TAG\u003c/code\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-364\"\u003e"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eParameters:\u003c/p\u003e"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"ulist has-source-line data-line-D:/main/docs/UserGuide.adoc-366\"\u003e"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cul\u003e"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cli class\u003d\"has-source-line data-line-D:/main/docs/UserGuide.adoc-366\"\u003e"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003ccode\u003eTAG\u003c/code\u003e - a label tag assiociated with the food item.\u003c/p\u003e"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/li\u003e"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/ul\u003e"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-368\"\u003e"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eExamples:\u003c/p\u003e"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sidebarblock has-source-line data-line-D:/main/docs/UserGuide.adoc-370\"\u003e"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"content\"\u003e"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"dlist has-source-line data-line-D:/main/docs/UserGuide.adoc-371\"\u003e"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdl\u003e"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdt class\u003d\"hdlist1\"\u003e\u003ccode\u003e\u003cstrong\u003efilter asian\u003c/strong\u003e\u003c/code\u003e\u003c/dt\u003e"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdd\u003e"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003eOnly displays canteens with the asian tag.\u003c/p\u003e"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dd\u003e"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/dl\u003e"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/UserGuide.adoc-375\"\u003e"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_faq\"\u003e5. FAQ\u003c/h2\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-377\"\u003e"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: How can I update the list of canteens if there are changes to the canteens on campus?\u003cbr\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cstrong\u003eA\u003c/strong\u003e: You can manually download foodiebot.json file which we have published \u003ca href\u003d\"https://github.com/AY1920S2-CS2103T-F11-3/main/blob/master/foodiebot.json\"\u003ehere\u003c/a\u003e.\u003c/p\u003e"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"paragraph has-source-line data-line-D:/main/docs/UserGuide.adoc-380\"\u003e"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cp\u003e\u003cstrong\u003eQ\u003c/strong\u003e: Can I write my personal review in other languages? \u003cbr\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cstrong\u003eA\u003c/strong\u003e: Yes, FoodieBot accepts input for different types of language, however it does not support in-app localization.\u003c/p\u003e"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sect1 has-source-line data-line-D:/main/docs/UserGuide.adoc-384\"\u003e"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ch2 id\u003d\"_command_summary\"\u003e6. Command Summary\u003c/h2\u003e"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cdiv class\u003d\"sectionbody\"\u003e"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctable class\u003d\"tableblock frame-all grid-all has-source-line data-line-D:/main/docs/UserGuide.adoc-386\" style\u003d\"width: 80%;\"\u003e"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccolgroup\u003e"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 21.5686%;\"\u003e"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 39.2156%;\"\u003e"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ccol style\u003d\"width: 39.2158%;\"\u003e"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/colgroup\u003e"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cthead\u003e"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eCommand\u003c/th\u003e"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eFunction\u003c/th\u003e"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cth class\u003d\"tableblock halign-left valign-top\"\u003eExample\u003c/th\u003e"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/thead\u003e"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctbody\u003e"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ebudget set PERIOD AMOUNT\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eSets a budget for the allocated period\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ebudget set w/ 9.50\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ebudget view\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eViews the current budget\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eenter CANTEEN_NAME\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eDisplays the menu for the selected canteen\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eenter The Deck\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efavorites set\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eSets the food item in the stall as a favorite\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efavorites set 1\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efavorites view\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eDisplays all favorited food\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efavorites view\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efilter\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eShows only canteens or stalls with a specified tag\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efilter asian\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efind nearest BLOCK_NAME\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eFinds the nearest canteen from location\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003efind nearest COM1\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003egoto CANTEEN_NAME f/ CURRENT_LOCATION\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eGets direction to canteen from the current location\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003egoto The Deck f/ COM1\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003elist\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eDisplays the list of canteen\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erate INDEX\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eGives a rating to the stall\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erandomize\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eDisplays a list of randomize options\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003erandomize c/ The Deck\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ereport\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eGenerates a report of the food consumed\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ereport f/ 12-02-2020 t/ 30-04-2020\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003ereview INDEX\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eCreates a review for the stall\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eselect INDEX\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eSaves the food in transactions\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctr\u003e"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etransactions\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003eGenerates the transaction breakdown\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003ctd class\u003d\"tableblock halign-left valign-top\"\u003e\u003cp class\u003d\"tableblock\"\u003etransaction w/ 12-02-2020\u003c/p\u003e\u003c/td\u003e"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tr\u003e"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/tbody\u003e"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/table\u003e"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"footer\"\u003e"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv id\u003d\"footer-text\"\u003e"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Last updated 2020-03-30 00:25:14 +0800"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 710,
      "-": 717
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"favorites set 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"favorites set 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : setFavorite(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveFoodieBot(foodiebot)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "ignatiusong": 4
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBot *-right-\u003e \"1\" UniqueCanteenList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBot *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "UniqueTagList -[hidden]down- UniqueCanteenList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "UniqueTagList -[hidden]down- UniqueCanteenList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "UniqueCanteenList o-right-\u003e Canteen"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e NumberOfStalls"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e Distance"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e BlockName"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e DirectionsText"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e DirectionsImageName"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e CanteenImageName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "ignatiusong": 13
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "if () then ([command commits FoodieBot])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Save FoodieBot to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    foodieBotStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "ignatiusong": 3
    }
  },
  {
    "path": "docs/diagrams/EnterActivityDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "(*) --\u003e if \"\" then"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  --\u003e[ParserContext \u003d MainContext] \"EnterCanteenCommand\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  if \"\" then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    --\u003e [(argument is empty)] \"Throw parse exception\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  else"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\tif \"\" then"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\t  --\u003e [(argument is integer)] \"Find Canteen with Specified Index\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      --\u003e \"List all stalls in canteen\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      --\u003e \"Update ui\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\telse"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\t  --\u003e \"Find canteen with specified name\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\t  --\u003e \"List all stalls in canteen\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\tendif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "else"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  -\u003e[ParserContext \u003d CanteenContext] \"EnterStallCommand\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  if \"\" then"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    --\u003e [(argument is empty)] \"Throw parse exception\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    --\u003e \"Update ui\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  else"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \tif \"\" then"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \t  --\u003e [(argument is integer)]\"Find Stall with Specified Index\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      --\u003e \"List all foods in stall\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      --\u003e \"Update ui\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "      --\u003e (*)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \telse"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \t  --\u003e \"Find stall with specified name\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \t  --\u003e \"List all foods in stall\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  \tendif"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "  endif"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "endif"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 43
    }
  },
  {
    "path": "docs/diagrams/ListActivityDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ":User Executes List Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "if () then ([command specifies f/ prefix])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Update Canteen List"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    with Specified Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Clear Displayed Content;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Set Canteen List to Sort By Distance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Add Canteen List for Display;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Update Canteen List"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    to Show All Canteens;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Clear Displayed Content;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Set Canteen List to Sort By Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Add Canteen List for Display;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "stop"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 22
    }
  },
  {
    "path": "docs/diagrams/ListSequenceDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "participant \":FoodieBotParser\" as FoodieBotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "participant \":ListCommandParser\" as ListCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "participant \"d:ListCommand\" as ListCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[-\u003e LogicManager : execute(\"list f/com1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "LogicManager -\u003e FoodieBotParser : parseCommand(\"list f/com1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate FoodieBotParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "create ListCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBotParser -\u003e ListCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommandParser --\u003e FoodieBotParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBotParser -\u003e ListCommandParser : parse(\"f/com1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate ListCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "create ListCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommandParser -\u003e ListCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommand --\u003e ListCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommandParser --\u003e FoodieBotParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate ListCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommandParser -[hidden]-\u003e FoodieBotParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "destroy ListCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBotParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate FoodieBotParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "LogicManager -\u003e ListCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate ListCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommand -\u003e Model : updateFilteredCanteenList(com1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommand -\u003e Model : setLocationSpecified(true)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Model --\u003e ListCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "CommandResult --\u003e ListCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ListCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate ListCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 75
    }
  },
  {
    "path": "docs/diagrams/LogicActivityDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "if () then ([command saves FoodieBot])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Get Model Name from Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Get File Path for Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    :Save FoodieBot to File Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 15
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class FoodieBotParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "LogicManager --\u003e\"1\" FoodieBotParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBotParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ignatiusong": 3
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Interface ReadOnlyFoodieBot \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class FoodieBot"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class ReadOnlyFoodieBot"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Package Canteen {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class Canteen"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class NumberOfStalls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class Distance"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class BlockName"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class DirectionsText"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class DirectionsImageName"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class CanteenImageName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class UniqueCanteenList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBot .up.|\u003e ReadOnlyFoodieBot"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ModelManager o--\u003e \"1\" FoodieBot"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "FoodieBot *--\u003e \"1\" UniqueCanteenList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "UniqueCanteenList o--\u003e \"*\" Canteen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e Name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e NumberOfStalls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e Distance"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e BlockName"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e DirectionsText"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e DirectionsImageName"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e CanteenImageName"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Canteen *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Name -[hidden]right-\u003e Tag"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "NumberOfStalls -[hidden]right-\u003e Name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Distance -[hidden]right-\u003e NumberOfStalls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "ModelManager --\u003e\"1\" Canteen : filtered list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "ignatiusong": 30
    }
  },
  {
    "path": "docs/diagrams/RandomizeActivityDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ":User Executes Randomize Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ":Update Canteen List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ":Update Stall List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "if () then ([randomize c/ CANTEEN_NAME])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    :Set Canteens;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    :Get an Option from Chosen Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    :Add Option for Display;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    if () then ([randomize t/ TAG])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        :Set Canteens;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        :Get an Option by Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        :Add Option for Display;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        :Get an Option;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        :Add Option for Display;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "endif"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "stop"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 26
    }
  },
  {
    "path": "docs/diagrams/RandomizeSequenceDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \":FoodieBotParser\" as FoodieBotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \":RandomizeCommandParser\" as RandomizeCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \"rc:RandomizeCommand\" as RandomizeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \":Randomize\" as Randomize LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \"cr:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[-\u003e LogicManager : execute(\"randomize\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "LogicManager -\u003e FoodieBotParser : parseCommand(\"randomize\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate FoodieBotParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "create RandomizeCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "FoodieBotParser -\u003e RandomizeCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate RandomizeCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "create Randomize"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommandParser -\u003e Randomize : checkRandomize()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate Randomize"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Randomize --\u003e RandomizeCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate Randomize"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommandParser --\u003e FoodieBotParser"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate RandomizeCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "FoodieBotParser -\u003e RandomizeCommandParser : parse(\"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate RandomizeCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "create RandomizeCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommandParser -\u003e RandomizeCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate RandomizeCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommand --\u003e RandomizeCommandParser :"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate RandomizeCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommandParser --\u003e FoodieBotParser : rc"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate RandomizeCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommandParser -[hidden]-\u003e FoodieBotParser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "destroy RandomizeCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "FoodieBotParser --\u003e LogicManager : rc"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate FoodieBotParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "LogicManager -\u003e RandomizeCommand : execute(model)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate RandomizeCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommand -\u003e Model : listOfCanteen()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Model --\u003e RandomizeCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommand -\u003e Model : listOfStall()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Model --\u003e RandomizeCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommand -\u003e Randomize : getOptions(File)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate Randomize"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Randomize -\u003e Randomize : generateOneOption()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "Randomize --\u003e RandomizeCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate Randomize"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "CommandResult --\u003e RandomizeCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "RandomizeCommand --\u003e LogicManager : cr"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate RandomizeCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 91
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Interface FoodieBotStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class JsonFoodieBotStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "StorageManager o--\u003e FoodieBotStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "JsonFoodieBotStorage .left.|\u003e FoodieBotStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "JsonFoodieBotStorage .down.\u003e JsonSerializableFoodieBotStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "JsonSerializableFoodieBotStorage .right.\u003e JsonSerializableCanteen"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "JsonSerializableCanteen .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "ignatiusong": 7
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "puml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class CanteenListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "Class CanteenCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "MainWindow *-down-\u003e CanteenListPanel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "CanteenListPanel -down-\u003e CanteenCard"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "CanteenListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "CanteenCard --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "CanteenCard ..\u003e Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "CanteenListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "ignatiusong": 8
    }
  },
  {
    "path": "docs/team/leslieharland.adoc",
    "fileType": "adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d Leslie Harland - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d PROJECT: FoodieBot"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Our team were tasked with this software engineering project which we were to morph from the original Address Book Level 3 into FoodieBot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "The user interacts with the application using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "FoodieBot is a campus locator desktop application created for students or tourists in NUS to provide canteen/ food information so they can make informed decisions in getting food on campus."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Our application saves the user time by randomising food items based on their indicated preferences e.g by canteen/ location/ past preference"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "and has a reporting feature as the user\u0027s selection of food items are tracked."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* *Enhancement*: added *the ability to show a list of canteens*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** What it does: display a list of canteens to the user"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Justification: In the event that the user wants to find the canteens which are available, or to identify what canteens are near them and possibly the food that the canteen sells"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Highlights: This command function lays the groundwork so that future commands can rely on information of the canteen, like food selection from the canteen stalls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Credits: -"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* *Code contributed*: [https://github.com/AY1920S2-CS2103T-F11-3/main/commit/c0ebaa77975efb72307ddc6826d2a6cabb40f30b[Functional code]] [https://github.com/AY1920S2-CS2103T-F11-3/main/commit/c0ebaa77975efb72307ddc6826d2a6cabb40f30b[Test code]]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** Created tasks for milestone v1.1 - 1.3"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** Updated file storage to read app data only when requested (Pull requests https://github.com/AY1920S2-CS2103T-F11-3/main/pull/63[#63])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** Did the part on location in user guide: https://github.com/AY1920S2-CS2103T-F11-3/main/pull/44[#44]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-F11-3/main/pull/70[#70]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1920S2/forum/issues/37[1])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** Some parts of the canteen feature I added was adopted by several other class mates (https://github.com/AY1920S2-CS2103T-F11-3/main/pull/70[1], https://github.com/AY1920S2-CS2103T-F11-3/main/pull/74[2])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "*** Integrated continuous integration service to the team repo"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d List All Canteens: `list`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Display a list of all available canteens on campus."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `[f/BLOCK_NAME]` - displays canteens ordered by increasing distance from current location."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "List all canteens."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `list f/com1` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "List all canteens starting with the nearest canteen from com1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "image::app/list.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d Go to Canteen: `goto`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Display a map with the route between start location and destination."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Includes the travel instructions and bus services that go to the canteen."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `goto CANTEEN_NAME f/ CURRENT_LOCATION`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* `CANTEEN_NAME` and `CURRENT_LOCATION` field will be populated with suggestions as the user types."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "NOTE: `CANTEEN_NAME` and `CURRENT_LOCATION` field has to be one of the suggestions. Otherwise an error message will be displayed that requires the correct location to be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "image::wireframe/goto.png[width\u003d\"700\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d\u003d View All Stores in Canteen: `enter`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Display the stores available at the canteen based on user input."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Format: `enter CANTEEN_NAME`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "* The display of the store rating is determined from the user past experience on the food items which were selected."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "Appendixes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 105
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.Config;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.Version;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.FoodieBotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FoodieBot ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            config \u003d new Config();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.info(\"Parameters are empty\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Loads the specified file paths into the main app."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    userPrefs.getStallsFilePath(), userPrefs.getFoodFilePath(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    userPrefs.getBudgetFilePath(), userPrefs.getFavoriteFoodFilePath(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    userPrefs.getTransactionsFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(foodieBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected static Logger getLogger() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return logger;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s canteen data and {@code"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * The data from the sample FoodieBot will be used instead if {@code storage}\u0027s FoodieBot"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * is not found, or an empty FoodieBot will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code storage}\u0027s FoodieBot."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Optional\u003cReadOnlyFoodieBot\u003e foodieBotOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyFoodieBot initialData;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.readFoodieBot(Canteen.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // storage.readFoodieBot(Budget.class.getSimpleName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            storage.readFoodieBot(\"Transactions\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            storage.readFoodieBot(Food.class.getSimpleName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBotOptional \u003d Optional.empty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            initialData \u003d foodieBotOptional.orElseGet(() -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FoodieBot\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return SampleDataUtil.getSampleFoodieBot();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Data file not in the correct format. Will be starting with an empty FoodieBot\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new FoodieBot();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty FoodieBot\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new FoodieBot();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Update storage files in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            storage.saveFoodieBot(initialData, \"Canteen\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            storage.saveFoodieBot(initialData, \"Stall\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            storage.saveFoodieBot(initialData, \"Food\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            logger.warning(\"Failed to save foodiebot\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * configFilePath} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Config file at \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    + configFilePathUsed"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                \"UserPrefs file at \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    + prefsFilePath"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" is not in the correct format. \""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Problem while reading from the file. Will be starting with an empty FoodieBot\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (initializedPrefs.getDateFirstLaunched().equals(Optional.empty())) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            initializedPrefs.setDateFirstLaunched(Optional.of(LocalDate.now()));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting FoodieBot \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FoodieBot ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 20,
      "leslieharland": 21,
      "shaungoh97": 3,
      "-": 195
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String LOG_FILE \u003d \"foodiebot.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates a logger with the given name. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates a Logger for the given class name. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Remove all the handlers from {@code logger}. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 106
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/** Container for user visible messages. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_INVALID_DATA_COMMAND \u003d \"Data is invalid\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \"The item index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ITEMS_LISTED_OVERVIEW \u003d \"%1$d items listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_REPORT_EXPENSE \u003d \"Here are your expenses from %s to %s:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_REPORT_TRANSACTIONS \u003d \"Here are your transactions from %s to %s:\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FOOD_REVIEW \u003d \"Leave a review for the food item\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_BUDGET_SET \u003d \"Your %s budget has been set to $ %.2f.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        + \"You have $%.2f available to spend today.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String MESSAGE_BUDGET_VIEW \u003d \"Your %s budget is $%.2f.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \" Remaining budget: $%.2f.\\nYou have $%.2f left to spend today.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Here are your %s spendings:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOTAVAILABLE \u003d \"No information available\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid date format!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"Invalid prefix!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_RANGE \u003d \"Invalid date range!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_INVALID_FILEREADER \u003d \"Problem loading file!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_INVALID_CANTEEN_NAME \u003d \"Invalid canteen name!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_INVALID_FAVORITE_NAME_SPECIFIED \u003d \"Please specify the number in the menu \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        + \"of the food stall\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_NO_FOOD_WITH_TAG \u003d \"There is no food with the tag : \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_INVALID_STALL_INDEX \u003d \"Invalid stall index!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_INVALID_CANTEEN_INDEX \u003d \"Invalid canteen index!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_CANTEEN_ALREADY_SELECTED \u003d \"You have already selected a canteen!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "lsjxavier": 8,
      "Samanthaseahpl": 6,
      "shaungoh97": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/ConceptualDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Contains an abstraction of a date type. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public enum ConceptualDate {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    START_DATE, END_DATE"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 6
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DateFormatter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Formats an input String into a LocalDate object */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateFormatter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A list of valid date formats. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Stream\u003cDateTimeFormatter\u003e dateFormats() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Stream.of(DateTimeFormatter.ofPattern(\"d.M.uu\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d.M.uuuu\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d-M-uu\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d-M-uuuu\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d/M/uu\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                DateTimeFormatter.ofPattern(\"d/M/uuuu\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A list of valid month formats. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static List\u003cString\u003e monthFormats() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return List.of(\"JAN\", \"FEB\", \"MAR\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"APR\", \"MAY\", \"JUN\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"JUL\", \"AUG\", \"SEP\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"OCT\", \"NOV\", \"DEC\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"JANUARY\", \"FEBRUARY\", \"MARCH\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"APRIL\", \"JUNE\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"JULY\", \"AUGUST\", \"SEPTEMBER\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \"OCTOBER\", \"NOVEMBER\", \"DECEMBER\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Converts a String representation of a date into a LocalDate object using a strict format resolver."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString the input String to format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a LocalDate representation of the input String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if all possible DateTimeFormatter patterns are unable to format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * the String into a LocalDate object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static LocalDate formatDate(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return dateFormats()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .map(formatter -\u003e formatDateHelper(dateString, formatter.withResolverStyle(ResolverStyle.STRICT)))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .reduce((a, b) -\u003e a.equals(Optional.empty()) ? b : a)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .get()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException(MESSAGE_INVALID_DATE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A helper function for formatDate() to parse a string to a LocalDate object with the given formatter."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns a LocalDate object encapsulated in an Optional if successful, otherwise an empty Optional"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * if the parser is unable to parse the date with the given formatter."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param date the input String to format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param formatter the DateTimeFormatter to format the date with the required style."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return an Optional describing the date in a LocalDate object, or an empty Optional if this formatter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * is unable to parse the date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Optional\u003cLocalDate\u003e formatDateHelper(String date, DateTimeFormatter formatter) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate localDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.ofNullable(localDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Formats the given String month into an integer. Throws a ParseException if the supplied input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * is not a valid month."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month the input month in a String format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return an integer representation of the month."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if the month cannot be formatted."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static int formatMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String monthString \u003d month.toUpperCase();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        List\u003cString\u003e monthFormats \u003d monthFormats();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (monthFormats.contains(monthString)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int monthIndex \u003d monthFormats.indexOf(monthString.substring(0, 3));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return monthIndex + 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Formats the given String year into an integer. Throws a ParseException if the supplied year is not"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * a valid year."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year the input year in a String format."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return an integer representation of the year."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if the year cannot be formatted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static int formatYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Integer.parseInt(year);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 103
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DateRange.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_DATE_RANGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_PREFIX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** An abstraction of a date range represented as a tuple. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateRange {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final DateRangeStyle style;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructor of the DateRange object. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange(LocalDate startDate, LocalDate endDate, DateRangeStyle style) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.style \u003d style;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a new DateRange object with the specified style."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the style is LENIENT, this will return a valid date range between the two supplied dates regardless"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of its position when passed into the method."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the style is SMART, this will return a valid date range only if the following conditions are met:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     - The end date must not be before the start date."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * If the style is STRICT, this will return a valid date range only if the following conditions are met:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     - The end date must not be before the start date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     - The start date must not be after the current system date."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * In addition to the STRICT style, if the end date occurs after the current system date, the system"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * date is used as the end date instead."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startDate The start date of the range."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endDate The end date of the range."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The style to set the range to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a DateRange object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(LocalDate startDate, LocalDate endDate, DateRangeStyle style)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(style) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case LENIENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(endDate, startDate, style);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(startDate, endDate, style);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case SMART:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isBefore(startDate)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new DateRange(startDate, endDate, style);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case STRICT:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isBefore(startDate) || startDate.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (endDate.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(startDate, LocalDate.now(), style);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new DateRange(startDate, endDate, style);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startDate The start date of the date range."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endDate The end date of the date range."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(LocalDate startDate, LocalDate endDate) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startString The start date of the date range."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endString The end date of the date range."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String startString, String endString, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d DateFormatter.formatDate(startString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d DateFormatter.formatDate(endString);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param startString The start date of the date range."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param endString The end date of the date range."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String startString, String endString) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startString, endString, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object. This method should be used if only one one date can be supplied,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * with the type whether it is a start or an end date."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString The start/end date of the date range."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param conceptualDate Specifies if the dateString is a start date or end date."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String dateString, ConceptualDate conceptualDate, DateRangeStyle style)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (conceptualDate.equals(ConceptualDate.START_DATE)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate startDate \u003d DateFormatter.formatDate(dateString);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(startDate, LocalDate.now(), style);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (conceptualDate.equals(ConceptualDate.END_DATE)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate endDate \u003d DateFormatter.formatDate(dateString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(DefiniteDate.MIN_DATE, endDate, style);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_PREFIX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new DateRange object. This method should be used if only one one date can be supplied,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * with the type whether it is a start or an end date."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString The start/end date of the date range."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param conceptualDate Specifies if the dateString supplied is a start date or end date."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange of(String dateString, ConceptualDate conceptualDate) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(dateString, conceptualDate, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object based around the given date, with the range from Monday to Sunday inclusive."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString The date to base the DateRange to."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofWeek(String dateString, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate targetDate \u003d DateFormatter.formatDate(dateString);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        int intervalToStartOfWeek \u003d targetDate.getDayOfWeek().getValue() - 1;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d targetDate.minusDays(intervalToStartOfWeek);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d startDate.plusDays(6);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object based around the given date, with the range from Monday to Sunday inclusive."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateString The date to base the DateRange to."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofWeek(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofWeek(dateString, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month and year."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month, int year, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, month, 1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(year, month, Month.of(month).length(startDate.isLeapYear()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month and year."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month, int year) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofMonth(month, year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        int year \u003d LocalDate.now().getYear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofMonth(month, year, style);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied month and year."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofMonth(int month) throws ParseException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofMonth(month, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied year."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param style The date range style to conform to."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofYear(int year, DateRangeStyle style) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate startDate \u003d LocalDate.of(year, 1, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate endDate \u003d LocalDate.of(year, 12, 31);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(startDate, endDate, style);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object with range between the first and last day of the supplied year."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofYear(int year) throws ParseException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.ofYear(year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Generates a new DateRange object with range as a single day."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param date The date."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new DateRange object with the default range style of SMART."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException If the attempt to create a date range does not conform to the requirements"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * of the specified style."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange ofSingle(LocalDate date) throws ParseException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(date, date, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Generates a new DateRange object representing an extended period of time."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a DateRange object."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static DateRange generate() throws ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(DefiniteDate.MIN_DATE, LocalDate.now());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Gets the start date of the DateRange. */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getStartDate() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.startDate;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Gets the end date of the DateRange. */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getEndDate() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.endDate;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Shifts the current start date to a new date. */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void shiftStartDate(LocalDate newStartDate) throws ParseException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // TODO CHECK IF IT VIOLATES DATERANGE STRUCTURE"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(this.style) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case LENIENT:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (newStartDate.isBefore(this.endDate)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.startDate \u003d newStartDate;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.startDate \u003d this.endDate;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.endDate \u003d newStartDate;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case STRICT:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!newStartDate.isAfter(LocalDate.now()) \u0026\u0026 !newStartDate.isAfter(this.endDate)) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.startDate \u003d newStartDate;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!newStartDate.isAfter(this.endDate)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.startDate \u003d newStartDate;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_DATE_RANGE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Returns a boolean value if the supplied date is present in the DateRange object."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param otherDate the other date to compare to."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean contains(LocalDate otherDate) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean isEqual \u003d otherDate.isEqual(this.startDate) || otherDate.isEqual(this.endDate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        boolean isInBetween \u003d otherDate.isAfter(this.startDate) \u0026\u0026 otherDate.isBefore(this.endDate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return isEqual || isInBetween;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof DateRange)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        DateRange otherDateRange \u003d (DateRange) other;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return otherDateRange.getStartDate().equals(startDate)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherDateRange.getEndDate().equals(endDate);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Objects.hash(startDate, endDate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 345
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DateRangeStyle.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Enumeration of different ways to resolve a date range. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public enum DateRangeStyle {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Style to resolve a date range leniently. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    LENIENT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Style to resolve a date range smartly. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    SMART,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Style to resolve a date range strictly. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    STRICT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 14
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/commons/core/date/DefiniteDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Contains static dates with a definite value. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DefiniteDate {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate MIN_DATE \u003d LocalDate.of(1970, 1, 1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate MAX_DATE \u003d LocalDate.of(2199, 12, 31);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 9
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/** API of the Logic component */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.foodiebot.model.Model#getFoodieBot()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyFoodieBot getFoodieBot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of canteens */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of canteens sorted by distance */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Set the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Stalls */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Food */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of favorited food */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of purchased food. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    ObservableList\u003cPurchasedFood\u003e getFilteredTransactionsList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredRandomizeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Report getReport();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 5,
      "lsjxavier": 7,
      "leslieharland": 6,
      "shaungoh97": 6,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.FoodieBotParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.favorites.FavoriteFood;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FoodieBotParser foodieBotParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBotParser \u003d new FoodieBotParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d foodieBotParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (command.needToSaveCommand()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                storage.saveFoodieBot(model.getFoodieBot(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    mapCommandToModelName(commandResult.commandName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Maps the command to the relevant model for storage"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String mapCommandToModelName(String commandName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case GoToCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return Canteen.class.getSimpleName();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case EnterCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Stall.class.getSimpleName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                return Food.class.getSimpleName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return Budget.class.getSimpleName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case RandomizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return Randomize.class.getSimpleName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case FavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return FavoriteFood.class.getSimpleName();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case TransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Transactions\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case RateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Transactions\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Transactions\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            //TODO Not Implemented"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        case SelectItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return \"Transactions\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FoodieBot."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see Model#getFoodieBot()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFoodieBot();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of canteens sorted by distance"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFoodieBotFilePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredStallList(isInitialised);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return model.getFilteredFoodList(isInitialised);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return model.getFilteredFavoriteFoodList(isInitialised);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ObservableList\u003cPurchasedFood\u003e getFilteredTransactionsList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return model.getFilteredTransactionsList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredRandomizeList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return model.getFilteredRandomizeList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Report getReport() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return model.getReport();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 23,
      "leslieharland": 17,
      "Samanthaseahpl": 9,
      "shaungoh97": 11,
      "-": 143,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ActionCommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** This class specifies the action name specific to the command result. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ActionCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public final String action;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * fields set to their default value."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param commandName"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param action"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param feedbackToUser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ActionCommandResult(String commandName, String action, String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(commandName , feedbackToUser);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 18
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/BackCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Returns a backCommand representing the user deciding to return to a previous menu"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String CHANGE_CONTEXT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"Exited from menu : \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_EXIT_FAVORITES \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"Exited from favorites : \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_EXIT_RANDOMIZE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"Exit Randomize. \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String INVALID_CONTEXT_MESSAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"Cannot go back any further\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String MESSAGE_EXIT_DIRECTIONS \u003d \"Exit Directions. \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String context \u003d ParserContext.getCurrentContext();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        switch (context) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.CANTEEN_CONTEXT:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCanteenContext(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, CHANGE_CONTEXT_ACKNOWLEDGEMENT + context,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.STALL_CONTEXT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            if (ParserContext.getPreviousContext().equals(ParserContext.RANDOMIZE_CONTEXT)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                ParserContext.setStallContext(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, CHANGE_CONTEXT_ACKNOWLEDGEMENT + context,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.FAVORITE_CONTEXT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_EXIT_FAVORITES + context,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.RANDOMIZE_CONTEXT:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_EXIT_RANDOMIZE, false, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case ParserContext.DIRECTIONS_CONTEXT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_EXIT_DIRECTIONS, false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case ParserContext.TRANSACTIONS_CONTEXT:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setCanteenContext(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, CHANGE_CONTEXT_ACKNOWLEDGEMENT + context,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    false, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new CommandResult(COMMAND_WORD, INVALID_CONTEXT_MESSAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "ignatiusong": 71
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/BudgetCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_BUDGET_SET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_BUDGET_VIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/** Manages the budget commands, e.g. view, set. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        COMMAND_WORD + \" VIEW : View the budget. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"SET : Set the budget\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"AMOUNT \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \"set \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"100 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SET \u003d MESSAGE_BUDGET_SET;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_VIEW \u003d MESSAGE_BUDGET_VIEW;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No budget stored!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String action;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public BudgetCommand(Budget budget, String action) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public BudgetCommand(String action) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.budget \u003d new Budget();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** A boolean check if the current system date falls inside the date range of the budget."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The budget object to check against."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return true if the system date falls within the date range of the budget, false otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static boolean systemDateIsInCycleRange(Budget budget) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return budget.getCycleRange().contains(LocalDate.now());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to write the budget to the model."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param model The FoodieBot model."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The Budget object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static void saveBudget(Model model, Budget budget) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.setBudget(budget);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to read the budget from the model."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param model The FoodieBot model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The budget stored in the model if it is present, otherwise a new empty budget with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * default values is created."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Budget loadBudget(Model model) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return model.getBudget().isPresent()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? model.getBudget().get()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : new Budget();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to hold a successful return message for \u0027budget set\u0027."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The budget object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The command result."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static CommandResult commandSetSuccess(Budget budget) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_SET,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                budget.getDurationAsString(), budget.getTotalBudget(), budget.getRemainingDailyBudget()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Helper function to hold a successful return message for \u0027budget view\u0027."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param budget The budget object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return The command result."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static CommandResult commandViewSuccess(Budget budget) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_VIEW,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                budget.getDurationAsString(), budget.getTotalBudget(), budget.getRemainingBudget(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                budget.getRemainingDailyBudget(), budget.getDurationAsString()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (action.equals(\"set\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            saveBudget(model, budget);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // Displays an empty list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            model.updateFilteredTransactionsList(Objects::isNull);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return commandSetSuccess(budget);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Budget savedBudget \u003d loadBudget(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            DateRange budgetCycleRange \u003d savedBudget.getCycleRange();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            model.updateFilteredTransactionsList(purchase -\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    budgetCycleRange.contains(purchase.getDateAdded())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u0026\u0026 purchase.getDateAdded().atTime(purchase.getTimeAdded()).isAfter("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            savedBudget.getDateTimeOfCreation()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!savedBudget.equals(new Budget())) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                if (!systemDateIsInCycleRange(savedBudget)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    savedBudget.resetRemainingBudget();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                saveBudget(model, savedBudget);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return commandViewSuccess(savedBudget);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof BudgetCommand)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        BudgetCommand otherBudget \u003d (BudgetCommand) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherBudget.budget.getTotalBudget() \u003d\u003d budget.getTotalBudget()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherBudget.action.equals(action);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 78,
      "leslieharland": 14,
      "shaungoh97": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/** Represents a command with hidden internal logic and the ability to be executed. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 2,
      "-": 16,
      "ignatiusong": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/** Represents the result of a command execution. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String commandName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final boolean isLocationSpecified;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Constructs a {@code CommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String commandName, String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.isLocationSpecified \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code CommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CommandResult(String commandName, String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                         boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.commandName \u003d commandName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.isLocationSpecified \u003d isLocationSpecified;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * fields set to their default value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String commandName, String feedbackToUser) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(commandName, feedbackToUser,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return isLocationSpecified;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandName.equals(otherCommandResult.commandName)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/** Edits the details of an existing person in the address book. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \" 1 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditCanteenDescriptor editCanteenDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editCanteenDescriptor details to edit the person with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditCanteenDescriptor editCanteenDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editCanteenDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editCanteenDescriptor \u003d new EditCanteenDescriptor(editCanteenDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCanteen\u003e lastShownList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen canteenToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen editedCanteen \u003d createEditedPerson(canteenToEdit, editCanteenDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /*if (!canteenToEdit.isSameCanteen(editedCanteen) \u0026\u0026 model.hasCanteen(editedCanteen)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setCanteen(canteenToEdit, editedCanteen);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredCanteenList(PREDICATE_SHOW_ALL_CANTEENS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(COMMAND_WORD, String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCanteen));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit} edited with"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static Canteen createEditedPerson("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Canteen canteenToEdit, EditCanteenDescriptor editCanteenDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert canteenToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editCanteenDescriptor.getName().orElse(canteenToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        int updatedNumberOfStalls \u003d editCanteenDescriptor.getNumberOfStalls();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        int updatedDistance \u003d editCanteenDescriptor.getDistance();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String updatedBlockName \u003d editCanteenDescriptor.getNearestBlockName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCanteenDescriptor.getTags().orElse(canteenToEdit.getTags());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editCanteenDescriptor.equals(e.editCanteenDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditCanteenDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private int numberOfStalls;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private int distance;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private String nearestblockName;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditCanteenDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Copy constructor. A defensive copy of {@code tags} is used internally. */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditCanteenDescriptor(EditCanteenDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setNumberOfStalls(toCopy.numberOfStalls);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setDistance(toCopy.distance);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setNearestBlockName(toCopy.nearestblockName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Returns true if at least one field is edited. */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setNumberOfStalls(int numberOfStalls) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDistance(int distance) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.distance \u003d distance;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setNearestBlockName(String blockName) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.nearestblockName \u003d blockName;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getNumberOfStalls() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return numberOfStalls;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getDistance() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return distance;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public String getNearestBlockName() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return nearestblockName;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditCanteenDescriptor)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            EditCanteenDescriptor e \u003d (EditCanteenDescriptor) other;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getNumberOfStalls() \u003d\u003d (e.getNumberOfStalls())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getDistance() \u003d\u003d (e.getDistance())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getNearestBlockName().equals(e.getNearestBlockName())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 215
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/EnterCanteenCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.Model.PREDICATE_SHOW_ALL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a canteen to view the food stalls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EnterCanteenCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enter\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"CANTEEN_NAME \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    + \"deck \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String INVALID_INDEX_MESSAGE \u003d \"Please provide a valid index\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EnterCanteenCommand.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Optional\u003cString\u003e canteenName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the canteen in the filtered stall list to edit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EnterCanteenCommand(Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d Optional.empty();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param canteenName from the given canteen name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public EnterCanteenCommand(String canteenName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(canteenName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d Optional.of(canteenName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* All the stalls are retrieved as they contain the canteen name field"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "           which we filter the canteen name that specified in enter {canteenName}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            List\u003cCanteen\u003e canteenList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (model.isLocationSpecified()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                canteenList \u003d model.getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                canteenList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            if (index.get().getZeroBased() \u003c\u003d canteenList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.updateFilteredStallList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Canteen canteen \u003d canteenList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                ParserContext.setCanteenContext(canteen);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                logger.info(\"Enter \" + canteen.getName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.updateFilteredStallList(s -\u003e s.getCanteenName().equalsIgnoreCase("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        canteen.getName().toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                return new CommandResult(COMMAND_WORD, INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (canteenName.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            List\u003cCanteen\u003e canteens \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            for (Canteen c : canteens) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (c.getName().toString().equalsIgnoreCase(canteenName.get())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    ParserContext.setCanteenContext(c);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    model.updateFilteredStallList(s -\u003e s.getCanteenName().equalsIgnoreCase(c.getName().toString()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new CommandResult(COMMAND_WORD, Canteen.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, \"Stalls in \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + ParserContext.getCurrentCanteen().get().getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof EnterCanteenCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EnterCanteenCommand otherCanteen \u003d (EnterCanteenCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen.index.orElseGet(() -\u003e Index.fromZeroBased(0))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .equals(index.orElseGet(() -\u003e Index.fromZeroBased(0)))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherCanteen.canteenName.orElseGet(() -\u003e \"\").equals(canteenName.orElseGet(() -\u003e \"\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 43,
      "shaungoh97": 1,
      "-": 53,
      "ignatiusong": 16
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/EnterStallCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Represents a command telling the user to enter a particular stall"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class EnterStallCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"enter\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"STALL_NAME \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Taiwanese \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EnterStallCommand.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final Optional\u003cString\u003e stallName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Randomize randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param index of the canteen in the filtered stall list to edit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public EnterStallCommand(Index index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.stallName \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param stallName from the given canteen name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public EnterStallCommand(String stallName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(stallName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.stallName \u003d Optional.of(stallName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String currContext \u003d ParserContext.getCurrentContext();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String currentCanteenName \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (!currContext.equals(\"RANDOMIZE\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            currentCanteenName \u003d ParserContext.getCurrentCanteen().get().getName().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            Stall stall;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (currContext.equals(\"RANDOMIZE\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                stall \u003d model.getFilteredRandomizeList().get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                currentCanteenName \u003d stall.getCanteenName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                stall \u003d model.getFilteredStallList().get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.setStallContext(stall);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            logger.info(\"Enter \" + stall.getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String finalCurrentCanteenName \u003d currentCanteenName;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            model.updateFilteredFoodList(f -\u003e f.getStallName().equalsIgnoreCase(stall.getName().toString())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u0026\u0026 f.getCanteen().equals(finalCurrentCanteenName));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } else if (stallName.isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            List\u003cStall\u003e stalls;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (currContext.equals(\"RANDOMIZE\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                stalls \u003d model.getFilteredRandomizeList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                stalls \u003d model.getFilteredStallList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            boolean found \u003d false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            for (Stall s : stalls) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (s.getName().toString().equalsIgnoreCase(stallName.get())) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    currentCanteenName \u003d s.getCanteenName();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    ParserContext.setStallContext(s);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    //Might have 2 stalls from 2 canteens with same name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    String finalCurrentCanteenName1 \u003d currentCanteenName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    model.updateFilteredFoodList(f -\u003e f.getStallName().equalsIgnoreCase(s.getName().toString())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                            \u0026\u0026 f.getCanteen().equals(finalCurrentCanteenName1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (!found) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new CommandResult(COMMAND_WORD, Stall.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new CommandResult(COMMAND_WORD, \"Stall menu of  \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + ParserContext.getCurrentStall().get().getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof EnterStallCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EnterStallCommand otherCanteen \u003d (EnterStallCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen.index.orElseGet(() -\u003e Index.fromZeroBased(0))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .equals(index.orElseGet(() -\u003e Index.fromZeroBased(0)))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherCanteen.stallName.orElseGet(() -\u003e \"\").equals(stallName.orElseGet(() -\u003e \"\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 28,
      "leslieharland": 24,
      "shaungoh97": 4,
      "ignatiusong": 68
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/** Terminates the program. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "ignatiusong": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/FavoritesCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_DATA_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_FAVORITE_NAME_SPECIFIED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.ParserContext.FAVORITE_CONTEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.Model.PREDICATE_SHOW_ALL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.DuplicateStallException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Displays the food items favorited by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FavoritesCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favorites\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_VIEW_SUCCESS \u003d \"Listed all favorites\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SET_SUCCESS \u003d \"Favorited %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_SET_DUPLICATE_FOOD \u003d \"Already in your favorites: %s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_REMOVE_SUCCESS \u003d \"Removed %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(FavoritesCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String action;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param index of the canteen in the filtered stall list to edit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoritesCommand(Index index, String action) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoritesCommand(String action) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (index.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                List\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (!foodList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    int indexInteger \u003d index.get().getZeroBased();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    if (indexInteger + 1 \u003e foodList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        return new ActionCommandResult(COMMAND_WORD, action, Food.INVALID_FOOD_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    Food food \u003d foodList.get(indexInteger);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        model.setFavorite(food);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    } catch (DuplicateStallException ex) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            String.format(MESSAGE_SET_DUPLICATE_FOOD, food.getName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        String.format(MESSAGE_SET_SUCCESS, food.getName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                MESSAGE_INVALID_FAVORITE_NAME_SPECIFIED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserContext.setCurrentContext(FAVORITE_CONTEXT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.getFilteredFavoriteFoodList(false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    MESSAGE_INVALID_DATA_COMMAND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredFavoriteList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ActionCommandResult(COMMAND_WORD, action, MESSAGE_VIEW_SUCCESS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (index.isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                List\u003cFood\u003e foodList \u003d model.getFilteredFavoriteFoodList(false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (!foodList.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    int indexInteger \u003d index.get().getZeroBased();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    if (indexInteger + 1 \u003e foodList.size()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        return new ActionCommandResult(COMMAND_WORD, action, Food.INVALID_FOOD_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    Food food \u003d foodList.get(indexInteger);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    model.removeFavorite(food);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        String.format(MESSAGE_REMOVE_SUCCESS, food.getName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new ActionCommandResult(COMMAND_WORD, action, Food.INVALID_FOOD_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                MESSAGE_INVALID_FAVORITE_NAME_SPECIFIED);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ActionCommandResult(COMMAND_WORD, action,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoritesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof FavoritesCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FavoritesCommand otherFavorite \u003d (FavoritesCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherFavorite.index.orElseGet(() -\u003e Index.fromZeroBased(0))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .equals(index.orElseGet(() -\u003e Index.fromZeroBased(0)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 111,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/FilterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static seedu.foodiebot.logic.parser.ParserContext.INVALID_CONTEXT_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Filters a list of canteens or stalls to only display things which have a particular keyword"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"TAG \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    + \"Western\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully filtered canteens\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Filter argument cannot be empty\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private Integer price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean hasTagError;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public FilterCommand(String tag) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            hasTagError \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public FilterCommand(int price) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String context \u003d ParserContext.getCurrentContext();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (hasTagError) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (price !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.STALL_CONTEXT)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                Stall stall \u003d ParserContext.getCurrentStall().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                model.updateFilteredFoodList(f -\u003e f.getStallName().equalsIgnoreCase("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                        stall.getName().toString()) \u0026\u0026 f.getPrice() \u003c\u003d price);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                return new CommandResult(COMMAND_WORD, INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (context.equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            model.updateFilteredCanteenList(s -\u003e s.getTags().contains(this.tag));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } else if (context.equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            Canteen canteen \u003d ParserContext.getCurrentCanteen().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            model.updateFilteredStallList(s -\u003e s.getCanteenName().equalsIgnoreCase("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    canteen.getName().toString()) \u0026\u0026 s.getTags().contains(this.tag));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } else if (context.equals(ParserContext.STALL_CONTEXT)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            Stall stall \u003d ParserContext.getCurrentStall().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            model.updateFilteredFoodList(f -\u003e f.getStallName().equalsIgnoreCase("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    stall.getName().toString()) \u0026\u0026 f.getTags().contains(this.tag));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return new CommandResult(COMMAND_WORD, INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof FilterCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FilterCommand otherFilter \u003d (FilterCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //TODO replace with strong equality"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 23,
      "shaungoh97": 2,
      "ignatiusong": 76
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/GoToCanteenCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Get the directions to the canteen through a given location specified with prefix: /f."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class GoToCanteenCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Get the directions to the canteen. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"CANTEEN_NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"NEAREST_BLOCK_NAME]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"The Deck \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"com1 \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GoToCanteenCommand.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Optional\u003cString\u003e canteenName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String nearestBlockName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the canteen in the filtered canteen list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public GoToCanteenCommand(Index index, String nearestBlockName) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public GoToCanteenCommand(String canteenName, String nearestBlockName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(canteenName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d Optional.of(canteenName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCanteen\u003e lastShownList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cCanteen\u003e result \u003d Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Canteen canteen \u003d lastShownList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            result \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 c.getName().equals(canteen.getName()))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (canteenName.filter(Predicate.not(String::isEmpty)).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            result \u003d lastShownList.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 c.getName().equals(new Name(canteenName.get())))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (result.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOTAVAILABLE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DirectionsCommandResult(result.get(), MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof GoToCanteenCommand)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        GoToCanteenCommand otherCanteen \u003d (GoToCanteenCommand) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherCanteen.nearestBlockName.equalsIgnoreCase(nearestBlockName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Lists all canteens in FoodieBot to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all canteens\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_NEAREST_BLOCK \u003d \"Canteens near you\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        COMMAND_WORD + \" LIST:  List the canteens\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"CURRENT_LOCATION \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"com1 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String nearestBlockName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListCommand(String nearestBlockName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean isLocationSpecified \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (nearestBlockName.isBlank()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredCanteenList(Model.PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.setLocationSpecified(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_SUCCESS, false, false, isLocationSpecified);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.updateFilteredCanteenList(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            isLocationSpecified \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.setLocationSpecified(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new CommandResult(COMMAND_WORD, MESSAGE_NEAREST_BLOCK, false, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    isLocationSpecified);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 40,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/RandomizeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " * Randomize a food item for the user based on index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class RandomizeCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"randomize\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            + \" [c/CANTEEN_NAME]: Generate a random food option by canteen.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            + \"[t/TAG]: Generate a random food option by tag.\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String MESSAGE_IN_CANTEEN \u003d \"\\nYou call randomize on its own or use \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            + \"[t/TAG] to get an option by a tag.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private final Randomize randomize;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String prefix;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String action \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand(String prefix, String action, Randomize randomize) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand(String prefix, Index index, Randomize randomize) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.RANDOMIZE_CONTEXT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        randomize.setPrefix(prefix);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        randomize.setAction(action);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FileReader fileC \u003d model.listOfCanteens();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FileReader fileS \u003d model.listOfStalls();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        randomize.resetInternalList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        Boolean isCanteenContext \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (ParserContext.getPreviousContext().equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            Canteen canteen;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (ParserContext.getCurrentCanteen().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                canteen \u003d ParserContext.getCurrentCanteen().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                String canteenName \u003d canteen.getName().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                randomize.setSpecifiedCanteen(canteen);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                randomize.setCanteenContext();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                isCanteenContext \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (prefix.equals(CliSyntax.PREFIX_CANTEEN.toString()) \u0026\u0026 isCanteenContext) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_CANTEEN_ALREADY_SELECTED"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    + MESSAGE_IN_CANTEEN));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else if (prefix.equals(CliSyntax.PREFIX_CANTEEN.toString()) \u0026\u0026 !isCanteenContext) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            List\u003cCanteen\u003e canteenList \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (index !\u003d null) { //null and isPresent are different, DO NOT change"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    Canteen canteen \u003d canteenList.get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    randomize.setSpecifiedCanteen(canteen);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_CANTEEN_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                for (int i \u003d 0; i \u003c canteenList.size(); i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    Canteen canteen \u003d canteenList.get(i);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    String canteenName \u003d canteen.getName().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    if (canteenName.equals(action)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        randomize.setSpecifiedCanteen(canteen);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (!randomize.ifCanteenNamePresent()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_CANTEEN_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            randomize.getOptionsByCanteen(fileS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else if (prefix.equals(CliSyntax.PREFIX_TAG.toString())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (!isCanteenContext) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                randomize.setCanteens(fileC);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            randomize.getOptionsByTags(fileS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            randomize.getOptions(fileS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new CommandResult(COMMAND_WORD, randomize.output());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof RandomizeCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        RandomizeCommand otherRandomize \u003d (RandomizeCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return action.equals(otherRandomize.action) \u0026 randomize \u003d\u003d otherRandomize.randomize;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 94,
      "leslieharland": 14,
      "shaungoh97": 1,
      "-": 17,
      "ignatiusong": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/RateCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Set a rating to a purchased food */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class RateCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rate\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"FOOD_INDEX, RATING \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"1 7\";;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have rated %s as %s\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Invalid parameters!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String INDEX_OUT_OF_BOUNDS \u003d \"Index does not exist!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(RateCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Optional\u003cRating\u003e rating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public RateCommand(Index index, Rating rating) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.rating \u003d Optional.of(rating);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (index.isPresent() \u0026\u0026 rating.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PurchasedFood food \u003d model.getFoodieBot()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .getTransactionsList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                food.setRating(rating.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new CommandResult(COMMAND_WORD, String.format("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        MESSAGE_SUCCESS, food.getName(), food.getRating().toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IndexOutOfBoundsException oobe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new CommandException(MESSAGE_FAILURE + INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 72
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ReportCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_REPORT_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DefiniteDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/** Get the latest expenses within a date range and output in report format */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"report\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" FROM_DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_TO"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" TO_DATE\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" MONTH\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"14/2/2020 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_TO + \"24/2/2020\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"jan\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d MESSAGE_REPORT_EXPENSE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final DateRange dateRange;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ReportCommand(DateRange dateRange) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (dateRange.getStartDate().equals(DefiniteDate.MIN_DATE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                dateRange.shiftStartDate(model.getUserPrefs().getDateFirstLaunched().get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new CommandException(pe.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.getReport().create("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                model.getFilteredTransactionsList(), purchase -\u003e dateRange.contains(purchase.getDateAdded()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        dateRange.getStartDate().toString(), dateRange.getEndDate().toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 50,
      "leslieharland": 7,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/ReviewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Set a review to a purchased food*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"review\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"FOOD_INDEX, REVIEW \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"1 This is a review.\";;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have reviewed %s: \\n%s \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Invalid parameters!\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String INDEX_OUT_OF_BOUNDS \u003d \"Invalid index!\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReviewCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Optional\u003cReview\u003e review;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ReviewCommand(Index index, Review review) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(review);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d Optional.of(review);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (index.isPresent() \u0026\u0026 review.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PurchasedFood food \u003d model.getFoodieBot()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .getTransactionsList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .get(index.get().getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                food.setReview(review.get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new CommandResult(COMMAND_WORD, String.format("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        MESSAGE_SUCCESS, food.getName(), food.getReview().toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IndexOutOfBoundsException oobe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new CommandException(MESSAGE_FAILURE + INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof ReviewCommand)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ReviewCommand otherReview \u003d (ReviewCommand) other;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherReview.index.orElseGet(() -\u003e Index.fromZeroBased(0))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .equals(index.orElseGet(() -\u003e Index.fromZeroBased(0)))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherReview.review.orElseGet(() -\u003e new Review(\"\"))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .equals(review.orElseGet(() -\u003e new Review(\"\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 72,
      "leslieharland": 17
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/SelectItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.storage.JsonAdaptedBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/** Select the current list view item. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectItemCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \"FOOD_INDEX \\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \"1 \";;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have selected: %s, this costs: $%.2f\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String MESSAGE_SUCCESS_BUDGET \u003d \"You have selected: %s, this costs: $%.2f\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            + \"Your remaining budget is $%.2f\\nYou still have $%.2f to spend today:)\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Food not found!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String INVALID_INDEX_MESSAGE \u003d \"Please provide a valid index!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String EXCEEDED_BUDGET \u003d \"You will exceed your budget with this purchase!\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Try increasing your budget.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(SelectItemCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final Optional\u003cString\u003e foodName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param index of the food in the filtered food list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public SelectItemCommand(Index index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.index \u003d Optional.of(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodName \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param foodName from the given food name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public SelectItemCommand(String foodName) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.index \u003d Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodName \u003d Optional.of(foodName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Save the purchased food into transactions */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void saveTransaction(Model model, PurchasedFood purchase) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.addPurchasedFood(purchase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ReadOnlyFoodieBot foodieBot \u003d model.getFoodieBot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Path budgetFilePath \u003d new UserPrefs().getBudgetFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedBudget(foodieBot), budgetFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        String nameOfFood \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        float priceOfFood \u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Optional\u003cFood\u003e food \u003d Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (index.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            List\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                food \u003d Optional.of(foodList.get(index.get().getZeroBased()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                nameOfFood \u003d food.get().getName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                priceOfFood \u003d food.get().getPrice();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                logger.info(\"Enter \" + food.get().getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                return new CommandResult(COMMAND_WORD, INVALID_INDEX_MESSAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        } else if (foodName.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            List\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            for (Food f : foodList) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                if (f.getName().equalsIgnoreCase(foodName.get())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    food \u003d Optional.of(f);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    nameOfFood \u003d foodName.get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    priceOfFood \u003d f.getPrice();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (food.isEmpty()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalDate dateAdded \u003d LocalDate.now();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        LocalTime timeAdded \u003d LocalTime.now().withNano(0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Rating rating \u003d new Rating();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Review review \u003d new Review();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        PurchasedFood purchase \u003d new PurchasedFood(food.get(), dateAdded, timeAdded, rating, review);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (!model.getBudget().get().equals(new Budget())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            Budget savedBudget \u003d model.getFoodieBot().getBudget();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (savedBudget.getRemainingBudget() \u003c priceOfFood) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new CommandException(EXCEEDED_BUDGET);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            savedBudget.subtractFromRemainingBudget(priceOfFood);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            model.setBudget(savedBudget);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            Budget newBudget \u003d model.getFoodieBot().getBudget();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            saveTransaction(model, purchase);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return new CommandResult(COMMAND_WORD, String.format("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    MESSAGE_SUCCESS_BUDGET, nameOfFood,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    priceOfFood,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    newBudget.getRemainingBudget(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    newBudget.getRemainingDailyBudget()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            saveTransaction(model, purchase);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return new CommandResult(COMMAND_WORD, String.format("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    MESSAGE_SUCCESS, nameOfFood, priceOfFood));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof SelectItemCommand)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SelectItemCommand otherItem \u003d (SelectItemCommand) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherItem.index.orElseGet(() -\u003e Index.fromZeroBased(0))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .equals(index.orElseGet(() -\u003e Index.fromZeroBased(0)))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u0026\u0026 otherItem.foodName.orElseGet(() -\u003e \"\").equals(foodName.orElseGet(() -\u003e \"\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 47,
      "leslieharland": 18,
      "shaungoh97": 81,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/commands/TransactionsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_REPORT_TRANSACTIONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DefiniteDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/** Gets the latest food transactions where reviews and single-user ratings can be added. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class TransactionsCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"transactions\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" FROM_DATE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_TO"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" TO_DATE\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" MONTH\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_FROM"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"14/2/2020 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + PREFIX_TO + \"24/2/2020\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + COMMAND_WORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + PREFIX_DATE_BY_MONTH"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            + \"jan\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d MESSAGE_REPORT_TRANSACTIONS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TransactionsCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final DateRange dateRange;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public TransactionsCommand(DateRange dateRange) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateRange \u003d dateRange;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        logger.info(\"Enter transactions\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (dateRange.getStartDate().equals(DefiniteDate.MIN_DATE)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                dateRange.shiftStartDate(model.getUserPrefs().getDateFirstLaunched().get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new CommandException(pe.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        model.updateFilteredTransactionsList(purchase -\u003e dateRange.contains(purchase.getDateAdded()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new CommandResult(COMMAND_WORD,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        dateRange.getStartDate().toString(), dateRange.getEndDate().toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean needToSaveCommand() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 55,
      "leslieharland": 9,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments* */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the last value of {@code prefix}. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * will return an empty list. Modifying the returned list will not affect the underlying data"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns a set view of all present {@code prefix} in the ArgumentMultimap."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Set\u003cPrefix\u003e prefixSet() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Set\u003cPrefix\u003e keySet \u003d argMultimap.keySet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        keySet.remove(new Prefix(\"\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return keySet;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the size of the ArgumentMultimap, including the preamble (text before the first valid prefix)."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the size of the ArgumentMultimap, including or excluding the preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * (text before the first valid prefix)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int size(boolean includePreamble) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return includePreamble ? argMultimap.size() : argMultimap.size() - 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if the set of supplied prefixes is a subset of the ArgumentMultimap key set"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * excluding the preamble."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean containsAll(Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return prefixSet().containsAll(Set.of(prefixes));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if the set of supplied prefixes is an exact copy of the ArgumentMultimap key set"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * excluding the preamble."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean containsExact(Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return prefixSet().equals(Set.of(prefixes));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if any member in the set of supplied prefixes exists in the ArgumentMultimap key set,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * excluding the preamble."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean containsAny(Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .anyMatch(p -\u003e prefixSet().contains(p));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 51,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/BudgetCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_WEEK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/** Parses input arguments and creates a new BudgetCommand object */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand and returns a"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * BudgetCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DATE_BY_DAY,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_WEEK, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String action \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        switch(action) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                Budget budget \u003d setBudget(argMultimap);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new BudgetCommand(budget, action);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IndexOutOfBoundsException oobe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return new BudgetCommand(action);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Sets the budget to the specified values given by the user."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param argMultimap the map storing all arguments by the user."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a new Budget object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if any input by the user is unable to be parsed into the Budget object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget setBudget(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (argMultimap.size(false) \u003d\u003d 1 \u0026\u0026 argMultimap.containsAny("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_DAY, PREFIX_DATE_BY_WEEK, PREFIX_DATE_BY_MONTH)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                Prefix firstPrefix \u003d argMultimap.prefixSet()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .findFirst()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String argValue \u003d getArgString(argMultimap, firstPrefix);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                float value \u003d Float.parseFloat(argValue);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new Budget(value, firstPrefix.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (NullPointerException | NumberFormatException ne) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Extracts the argument tagged to the given prefix. Throws {@code ParseException}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * if no value is present."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 42,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/** Contains Command Line Interface (CLI) syntax definitions common to multiple commands */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_DAY \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_MONTH \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_YEAR \u003d new Prefix(\"y/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE_BY_WEEK \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NOOFSTALLS \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final Prefix PREFIX_CANTEEN \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "Samanthaseahpl": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/EnterCanteenCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EnterCanteenCommandParser implements Parser\u003cEnterCanteenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterCanteenCommand and returns a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * EnterCanteenCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public EnterCanteenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + ParserContext.MAIN_CONTEXT + \", \" + ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            index \u003d ParserUtil.parseCanteenIndex(enteredText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EnterCanteenCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (ex instanceof IndexOutOfBoundsException) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new EnterCanteenCommand(enteredText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "shaungoh97": 3,
      "-": 28,
      "ignatiusong": 4
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/EnterStallCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_STALL_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterStallCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Parses a enter stall command to tell if it is valid"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class EnterStallCommandParser implements Parser\u003cEnterStallCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterStallCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * EnterStallCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public EnterStallCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (ParserContext.getCurrentContext().equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                index \u003d ParserUtil.parseStallIndex(enteredText,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    ParserContext.getCurrentCanteen().orElseGet(() -\u003e null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                return new EnterStallCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (ex instanceof IndexOutOfBoundsException) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new EnterStallCommand(enteredText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else if (ParserContext.getCurrentContext().equals(ParserContext.RANDOMIZE_CONTEXT)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (index.getOneBased() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    return new EnterStallCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    throw new IndexOutOfBoundsException(Canteen.INVALID_STALL_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } catch (Exception ex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (ex instanceof IndexOutOfBoundsException) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_STALL_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                return new EnterStallCommand(enteredText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            //if (!ParserContext.getCurrentContext().equals(ParserContext.CANTEEN_CONTEXT)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                + ParserContext.MAIN_CONTEXT + \", \" + ParserContext.CANTEEN_CONTEXT + \", \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                + ParserContext.RANDOMIZE_CONTEXT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11,
      "Samanthaseahpl": 25,
      "shaungoh97": 3,
      "ignatiusong": 24
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FavoritesCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * ."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FavoritesCommandParser implements Parser\u003cFavoritesCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavoritesCommand and returns a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * FavoritesCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoritesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String[] enteredText \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String action \u003d enteredText[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        switch (action) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"set\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (!ParserContext.getCurrentContext().equals(ParserContext.STALL_CONTEXT)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        + ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new FavoritesCommand(ParserUtil.parseIndex(enteredText[1]), \"set\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (IndexOutOfBoundsException oobe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FavoritesCommand(ParserUtil.parseIndex(enteredText[1]), \"remove\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FavoritesCommand(\"view\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavoritesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 44,
      "shaungoh97": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FilterCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Parses a filter command to tell if it is valid"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EnterStallCommand and returns a"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * FilterCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            int price \u003d ParserUtil.parseIndex(args).getOneBased();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new FilterCommand(price);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            String tag \u003d ParserUtil.parseFilterTag(enteredText);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new FilterCommand(tag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ignatiusong": 28
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/FoodieBotParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/** Parses user input. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodieBotParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Used for initial separation of command word and args. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case GoToCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GoToCanteenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case EnterCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return new EnterCanteenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                return new EnterStallCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return new SelectItemCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ReportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case RandomizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return new RandomizeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new FavoritesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case TransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new TransactionsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case RateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.TRANSACTIONS_CONTEXT)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new RateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        + ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (ParserContext.getCurrentContext().equals(ParserContext.TRANSACTIONS_CONTEXT)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return new ReviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        + ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 13,
      "leslieharland": 4,
      "Samanthaseahpl": 1,
      "shaungoh97": 7,
      "-": 80,
      "ignatiusong": 10
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/GoToCanteenCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new GoToCanteenCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GoToCanteenCommandParser implements Parser\u003cGoToCanteenCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoToCanteenCommand and returns a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * GoToCanteenCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GoToCanteenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                + ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FROM)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoToCanteenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String nearestBlockName \u003d ParserUtil.parseBlockName(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GoToCanteenCommand(index, nearestBlockName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            String canteenName \u003d ParserUtil.parseCanteenName(enteredText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new GoToCanteenCommand(canteenName, nearestBlockName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ListCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Parses input arguments and creates a new ListCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand and returns a"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ListCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (argMultimap.containsExact(PREFIX_FROM)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String nearestBlockName \u003d ParserUtil.parseBlockName(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ListCommand(nearestBlockName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (enteredText.equals(\"\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new ListCommand(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 45
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ParserContext.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * Shows the context that the Parser is currently parsing in"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class ParserContext {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String MAIN_CONTEXT \u003d \"MAIN\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String CANTEEN_CONTEXT \u003d \"CANTEEN\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String STALL_CONTEXT \u003d \"STALL\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String DIRECTIONS_CONTEXT \u003d \"GOTO\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String TRANSACTIONS_CONTEXT \u003d \"TRANSACTIONS\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String INVALID_CONTEXT_MESSAGE \u003d \"Wrong context to use this command. Current Context: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String SUGGESTED_CONTEXT_MESSAGE \u003d \"Context to use this command in: \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String FAVORITE_CONTEXT \u003d \"FAVORITE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static final String RANDOMIZE_CONTEXT \u003d \"RANDOMIZE\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static String currentContext \u003d ParserContext.MAIN_CONTEXT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static String previousContext \u003d ParserContext.MAIN_CONTEXT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static Optional\u003cCanteen\u003e currentCanteen \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private static Optional\u003cStall\u003e currentStall \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static String getCurrentContext() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return currentContext;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static String getPreviousContext() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return previousContext;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static void setCurrentContext(String context) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        previousContext \u003d currentContext;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        currentContext \u003d context;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static Optional\u003cCanteen\u003e getCurrentCanteen() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return currentCanteen;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static Optional\u003cStall\u003e getCurrentStall() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return currentStall;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static void setCanteenContext(Canteen canteen) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        /**I comment this out because in EnterCanteenCommand, if you"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         * enter the canteen with text eg. enter The Deck, you change canteen context"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         * inside the command. However, you cannot change the currentContext as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         * there is a check in MainWindow for EnterCanteenCommand, whether it is MAIN or"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         * CANTEEN, so should only change currentContext after it passes through check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        currentCanteen \u003d Optional.ofNullable(canteen);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static void setStallContext(Stall stall) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        currentStall \u003d Optional.ofNullable(stall);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10,
      "lsjxavier": 1,
      "Samanthaseahpl": 1,
      "shaungoh97": 13,
      "ignatiusong": 41
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Block;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/** Contains utility methods used for parsing strings in the various *Parser classes. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * whitespaces will be trimmed. If the index is more than the number of canteens throws"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer or"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * if the index is more than number of canteens."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static Index parseCanteenIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        int index \u003d Integer.parseInt(trimmedIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e Canteen.getNumCanteens()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IndexOutOfBoundsException(Canteen.INVALID_CANTEEN_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * whitespaces will be trimmed. If the index is more than the number of canteens throws"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer or"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * if the index is more than number of canteens."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static Index parseStallIndex(String oneBasedIndex, Canteen canteen)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        int index \u003d Integer.parseInt(trimmedIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (index \u003c\u003d 0 || index \u003e canteen.getNumberOfStalls()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new IndexOutOfBoundsException(Canteen.INVALID_STALL_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String blockName} into an {@code blockName}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code blockName} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String parseBlockName(String blockName) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(blockName);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedBlockName \u003d blockName.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Block.isValidBlock(trimmedBlockName)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Block.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return trimmedBlockName;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String canteenName} into an {@code canteenName}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code canteenName} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String parseCanteenName(String canteenName) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(canteenName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedCanteenName \u003d canteenName.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Canteen.isValidCanteen(trimmedCanteenName)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Canteen.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return trimmedCanteenName;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Parses a {@code String foodName} into a {@code foodName}. Leading and trailing whitespaces will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * be trimmed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @throws ParseException if the given {@code foodName} is invalid"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static String parseFilterTag(String filterTag) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(filterTag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String trimmedFilterTag \u003d filterTag.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (trimmedFilterTag.isBlank()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new ParseException(FilterCommand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return trimmedFilterTag;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}. */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 113,
      "ignatiusong": 35
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/RandomizeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_CANTEEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/** Process the arguments for Randomize */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "public class RandomizeCommandParser implements Parser\u003cRandomizeCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Randomize randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method process the input for the correct execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param args This is the given input from the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return RandomizeCommand for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws ParseException when the input provided is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CANTEEN, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String pc \u003d ParserContext.getCurrentContext();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (!pc.equals(ParserContext.MAIN_CONTEXT) \u0026\u0026 !pc.equals(ParserContext.RANDOMIZE_CONTEXT)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u0026\u0026 !pc.equals((ParserContext.CANTEEN_CONTEXT))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    + ParserContext.MAIN_CONTEXT + \", \" + ParserContext.RANDOMIZE_CONTEXT + \", enter 1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    + ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return new RandomizeCommand(\"\", \"all\", randomize);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else if (!arePrefixesPresent(argMultimap, PREFIX_CANTEEN)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, RandomizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return separatePrefix(argMultimap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method separate the argument from the prefix."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param argMultimap given argMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return RandomizeCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws ParseException when the input is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCommand separatePrefix(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            Prefix firstPrefix \u003d argMultimap.prefixSet().stream().findFirst().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String argValue \u003d getArgString(argMultimap, firstPrefix);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(argValue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                return new RandomizeCommand(firstPrefix.toString(), index, randomize);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                return new RandomizeCommand(firstPrefix.toString(), argValue, randomize);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method checks if there are Prefixes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param argumentMultimap arguments for testing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return Boolean true is there are prefix, false otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method extract the argument attached to the prefix."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param argMultimap The arguments provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param prefix the prefix available for this method."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return String of the arguement attach to the prefix."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws ParseException If no value is present."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 92,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/RateCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.commands.RateCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.commands.RateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * Sets a rating for a purchased food."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class RateCommandParser implements Parser\u003cRateCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RatingCommandParser and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * SelectItemCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public RateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.TRANSACTIONS_CONTEXT)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Rating rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String[] enteredText \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            index \u003d Index.fromOneBased(Integer.parseInt(enteredText[0]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            rating \u003d new Rating(Integer.parseInt(enteredText[1]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new ParseException(MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new RateCommand(index, rating);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 35,
      "leslieharland": 2,
      "shaungoh97": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ReportCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.ConceptualDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRangeStyle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/** Parses input arguments and creates a new ReportCommand object */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReportCommandParser implements Parser\u003cReportCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ReportCommand and returns a"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * ReportCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM, PREFIX_TO,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_WEEK, PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (argMultimap.getValue(new Prefix(\"\")).get().equals(\"\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // The multimap only contains the preamble. No prefixes are present."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.generate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM, PREFIX_TO)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.of(start, end, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.of(start, ConceptualDate.START_DATE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_TO)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.of(end, ConceptualDate.END_DATE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_WEEK)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String date \u003d getArgString(argMultimap, PREFIX_DATE_BY_WEEK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofWeek(date, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofMonth(month, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofYear(year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReportCommand(DateRange.ofMonth(month, year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Extracts the argument tagged to the given prefix. Throws {@code ParseException}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * if no value is present."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReportCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 54,
      "leslieharland": 11,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/ReviewCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.commands.ReviewCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.commands.ReviewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Set a review to a purchased food*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class ReviewCommandParser implements Parser\u003cReviewCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RatingCommandParser and returns a"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * SelectItemCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ReviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.TRANSACTIONS_CONTEXT)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String[] enteredText \u003d argMultimap.getPreamble().split(\" \", 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Index index \u003d Index.fromOneBased(Integer.parseInt(enteredText[0]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Review review \u003d new Review(enteredText[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new ReviewCommand(index, review);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new ParseException(MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 32,
      "leslieharland": 1,
      "shaungoh97": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/SelectItemCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": " * Parses a enter stall command to tell if it is valid"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "public class SelectItemCommandParser implements Parser\u003cSelectItemCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectItemCommand and returns a"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * SelectItemCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public SelectItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        String enteredText \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index index \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.STALL_CONTEXT)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new ParseException(ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    + ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(enteredText);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return new SelectItemCommand(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new SelectItemCommand(enteredText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "shaungoh97": 27,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/logic/parser/TransactionsCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_YEAR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.ConceptualDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRangeStyle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/** Parses input arguments and creates a new TransactionsCommand object */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TransactionsCommandParser implements Parser\u003cTransactionsCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TransactionsCommand and returns a"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * TransactionsCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TransactionsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FROM, PREFIX_TO,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                PREFIX_DATE_BY_WEEK, PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (argMultimap.getValue(new Prefix(\"\")).get().equals(\"\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // The multimap only contains the preamble. No prefixes are present."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.generate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM, PREFIX_TO)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.of(start, end, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_FROM)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String start \u003d getArgString(argMultimap, PREFIX_FROM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.of(start, ConceptualDate.START_DATE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_TO)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String end \u003d getArgString(argMultimap, PREFIX_TO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.of(end, ConceptualDate.END_DATE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_WEEK)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String date \u003d getArgString(argMultimap, PREFIX_DATE_BY_WEEK);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofWeek(date, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofMonth(month, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofYear(year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (argMultimap.containsExact(PREFIX_DATE_BY_MONTH, PREFIX_DATE_BY_YEAR)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String monthString \u003d getArgString(argMultimap, PREFIX_DATE_BY_MONTH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            String yearString \u003d getArgString(argMultimap, PREFIX_DATE_BY_YEAR);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int month \u003d DateFormatter.formatMonth(monthString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int year \u003d DateFormatter.formatYear(yearString);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new TransactionsCommand(DateRange.ofMonth(month, year, DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TransactionsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Extracts the argument tagged to the given prefix. Throws {@code} ParseException if no value is present.*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static String getArgString(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return argMultimap.getValue(prefix)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .orElseThrow(() -\u003e new ParseException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TransactionsCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 48,
      "leslieharland": 11,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/FoodieBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.UniqueCanteenList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.stall.UniqueStallList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFoodList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the application level Duplicates are not allowed (by .isSame_____ comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodieBot implements ReadOnlyFoodieBot {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueCanteenList canteens;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueStallList stalls;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueFoodList favoritedFoods;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final PurchasedFoodList transactions;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean isLocationSpecified;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Randomize randomize;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Report report;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        canteens \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        stalls \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        transactions \u003d new PurchasedFoodList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        budget \u003d new Budget();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isLocationSpecified \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        report \u003d new Report();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodieBot() {}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates an FoodieBot using the Canteens in the {@code toBeCopied} */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public FoodieBot(ReadOnlyFoodieBot toBeCopied) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the canteen list with {@code canteens}. {@code canteens} must not"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * contain duplicate canteens."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteens(List\u003cCanteen\u003e canteens) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteens.setCanteens(canteens);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStalls(List\u003cStall\u003e stalls) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stalls.setStalls(stalls);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public void setFood(List\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foods.setFood(food);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavoritedFoods(List\u003cFood\u003e stalls) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favoritedFoods.setFood(stalls);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setLocationSpecified(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.isLocationSpecified \u003d isLocationSpecified;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resets the existing data of this {@code FoodieBot} with {@code newData}. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyFoodieBot newData) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        setCanteens(newData.getCanteenList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        setStalls(newData.getStallList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        setFood(newData.getFoodList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// canteen-level operations"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a canteen with the same identity as {@code canteen} exists in the address"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(canteen);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteens.contains(canteen);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a canteen to the foodiebot. The canteen must not already exist in the foodiebot."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCanteen(Canteen p) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        canteens.add(p);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code FoodieBot}. {@code key} must exist in the address"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeCanteen(Canteen key) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        canteens.remove(key);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteens.asUnmodifiableObservableList().size() + \" canteens\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getCanteenList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteens.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return isLocationSpecified;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public Randomize getRandomize() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return randomize;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //// stall-level operations"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns true if a canteen with the same identity as {@code Stall} exists in the address"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasStall(Stall stall) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(stall);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return stalls.contains(stall);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the address"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return foods.contains(food);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cStall\u003e getStallList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return stalls.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a stall to the foodiebot. The stall must not already exist in the foodiebot."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addStall(Stall s) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        stalls.add(s);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return foods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cPurchasedFood\u003e getPurchasedFoodList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return transactions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFavoriteList() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoritedFoods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Adds a food to the foodiebot. The food must not already exist in the foodiebot"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param f"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void addFood(Food f) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        foods.add(f);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FoodieBot // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 canteens.equals(((FoodieBot) other).canteens) \u0026\u0026 stalls.equals(((FoodieBot) other).stalls));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteens.hashCode();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavorite(Food food) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods.add(food);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFavoriteFoodList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoritedFoods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void addFavoriteFood(Food f) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods.add(f);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addPurchasedFood(PurchasedFood pf) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        transactions.addReverse(pf);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ObservableList\u003cPurchasedFood\u003e getTransactionsList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return transactions.getList();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void removeFavorite(Food food) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoritedFoods.remove(food);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setTransactionsList(ObservableList\u003cPurchasedFood\u003e newList) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        transactions.removeAll();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        transactions.setFoods(newList);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Report getReport() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.report;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 9,
      "lsjxavier": 26,
      "leslieharland": 43,
      "shaungoh97": 15,
      "-": 148,
      "ignatiusong": 16
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/** The API of the Model component. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Predicate PREDICATE_SHOW_ALL \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Replaces user prefs data with the data in {@code userPrefs}. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the user prefs. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Sets the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Sets the user prefs\u0027 address book file path. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setFoodieBotFilePath(Path foodieBotFilePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Replaces address book data with the data in {@code foodieBot}. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setFoodieBot(ReadOnlyFoodieBot foodieBot);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns the FoodieBot */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyFoodieBot getFoodieBot();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a canteen with the same identity as {@code canteen} exists in the address"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasCanteen(Canteen canteen);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given canteen. The canteen must exist in the address book. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteCanteen(Canteen target);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given canteen. {@code canteen} must not already exist in the address book. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void addCanteen(Canteen canteen);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setBudget(Budget budget);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cBudget\u003e getBudget();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return a FileReader of the list of canteen in json file */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    FileReader listOfCanteens() throws FileNotFoundException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return a FileReader of the list of Stalls in json file */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    FileReader listOfStalls() throws FileNotFoundException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered canteen list */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Returns an unmodifiable view of the filtered canteen list sorted by distance */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setLocationSpecified(boolean isLocationSpecified);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered canteen list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredCanteenList(Predicate\u003cCanteen\u003e predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered stall list */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredStallList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered stall list */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered stall list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredStallList(Predicate\u003cStall\u003e predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Returns an unmodifiable view of the filtered food list */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    boolean isLocationSpecified();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setFavorite(Food food);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateFilteredFavoriteList(Predicate\u003cFood\u003e predicateShowAll);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    ObservableList\u003cPurchasedFood\u003e getFilteredTransactionsList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    void loadFilteredTransactionsList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    void updateFilteredTransactionsList(Predicate\u003cPurchasedFood\u003e predicate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    void addPurchasedFood(PurchasedFood food);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    ObservableList\u003cStall\u003e getFilteredRandomizeList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void removeFavorite(Food food);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setFavoriteList(ObservableList\u003cFood\u003e filteredFavoriteFoodList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Report getReport();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 11,
      "lsjxavier": 12,
      "leslieharland": 19,
      "shaungoh97": 12,
      "-": 72,
      "ignatiusong": 7
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.FoodieBotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FoodieBot foodieBot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cCanteen\u003e filteredCanteens;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cStall\u003e filteredStalls;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private final Randomize randomize;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FilteredList\u003cFood\u003e filteredFavoriteFoodList;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private FilteredList\u003cPurchasedFood\u003e filteredTransactionsList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Report report;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyFoodieBot foodieBot, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(foodieBot, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with food data: \" + foodieBot + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.foodieBot \u003d new FoodieBot(foodieBot);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredCanteens \u003d new FilteredList\u003c\u003e(this.foodieBot.getCanteenList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredStalls \u003d new FilteredList\u003c\u003e(this.foodieBot.getStallList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.foodieBot.getFoodList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredFavoriteFoodList \u003d new FilteredList\u003c\u003e(this.foodieBot.getFavoriteFoodList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        filteredTransactionsList \u003d new FilteredList\u003c\u003e(this.foodieBot.getTransactionsList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        budget \u003d this.foodieBot.getBudget();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        randomize \u003d this.foodieBot.getRandomize();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        report \u003d this.foodieBot.getReport();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new FoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getFoodieBotFilePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoodieBotFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setFoodieBotFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFoodieBot(ReadOnlyFoodieBot foodieBot) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        this.foodieBot.resetData(foodieBot);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(canteen);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBot.hasCanteen(canteen);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteCanteen(Canteen target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBot.removeCanteen(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBot.addCanteen(canteen);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        updateFilteredCanteenList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads the stored budget in the Json file."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The budget object stored in the Json file. If the file is not present,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * returns an empty Optional value."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(), userPrefs.getStallsFilePath(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            userPrefs.getBudgetFilePath(), userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            userPrefs.getFavoriteFoodFilePath(), userPrefs.getTransactionsFilePath());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(Budget.class.getSimpleName());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            if (newBot.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Budget budget \u003d newBot.get().getBudget();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return Optional.of(budget);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(budget);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setBudget(budget);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This function return a FileReader of the jsonfile (foodiebot.json)."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return FileReader of the jsonfile"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public FileReader listOfCanteens() throws FileNotFoundException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new FileReader(String.valueOf(foodieBotStorage.getCanteensFilePath()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * This function return a FileReader of the jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return FileReader of the jsonfile"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @throws FileNotFoundException"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public FileReader listOfStalls() throws FileNotFoundException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(), userPrefs.getStallsFilePath(),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        userPrefs.getBudgetFilePath(), userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        userPrefs.getFavoriteFoodFilePath(), userPrefs.getTransactionsFilePath());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new FileReader(String.valueOf(foodieBotStorage.getStallsFilePath()));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Canteen List Accessors"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Canteen}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        SortedList\u003cCanteen\u003e sortedCanteenList \u003d new SortedList\u003c\u003e(filteredCanteens);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        sortedCanteenList.setComparator(Comparator.comparing((Canteen c) -\u003e c.getName().fullName));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return sortedCanteenList;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Get filtered canteen list sorted by distance"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SortedList\u003cCanteen\u003e sortedCanteenList \u003d new SortedList\u003c\u003e(filteredCanteens);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        sortedCanteenList.setComparator(Comparator.comparingInt(Canteen::getDistance));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sortedCanteenList;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredCanteenList(Predicate\u003cCanteen\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredCanteens.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Stall} backed by the internal list of"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isInitialised) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            updateModelManagerStalls();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredStalls;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Stall} backed by the internal list of"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredStallList() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredStalls;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code FavoriteFood} backed by the internal list of"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!isInitialised) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            updateModelManagerFavoriteList();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return filteredFavoriteFoodList;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (!isInitialised) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            updateModelManagerFood();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return filteredFoods;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        //List\u003cFood\u003e filterCopy \u003d new ArrayList\u003c\u003e(filteredFoods);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        //filteredFoods.removeAll(filterCopy);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        //filteredFoods.addAll(foods);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered stall list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredStallList(Predicate\u003cStall\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredStalls.setPredicate(predicate);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot.isLocationSpecified();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setLocationSpecified(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setLocationSpecified(isLocationSpecified);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavorite(Food food) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(food);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setFavorite(food);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void updateFilteredFavoriteList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        filteredFavoriteFoodList.setPredicate(predicate);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ObservableList\u003cPurchasedFood\u003e getFilteredTransactionsList() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return filteredTransactionsList;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void updateFilteredTransactionsList(Predicate\u003cPurchasedFood\u003e predicate) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        filteredTransactionsList.setPredicate(predicate);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addPurchasedFood(PurchasedFood food) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        foodieBot.addPurchasedFood(food);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void loadFilteredTransactionsList() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(), userPrefs.getStallsFilePath(),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            userPrefs.getBudgetFilePath(), userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            userPrefs.getFavoriteFoodFilePath(), userPrefs.getTransactionsFilePath());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(\"Transactions\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!newBot.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                this.foodieBot.setTransactionsList(newBot.get().getTransactionsList());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                filteredTransactionsList \u003d new FilteredList\u003cPurchasedFood\u003e(newBot.get().getTransactionsList());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // return Optional.empty();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public ObservableList\u003cStall\u003e getFilteredRandomizeList() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return randomize.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void removeFavorite(Food food) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireAllNonNull(food);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.removeFavorite(food);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFavoriteList(ObservableList\u003cFood\u003e filteredFavoriteFoodList) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodieBot.setFavoritedFoods(filteredFavoriteFoodList);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Report getReport() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return foodieBot.getReport();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateModelManagerStalls() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    new JsonFoodieBotStorage(userPrefs.getStallsFilePath());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(Stall.class.getSimpleName());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            foodieBot.setStalls(newBot.get().getStallList());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void updateModelManagerFavoriteList() {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new JsonFoodieBotStorage(userPrefs.getFoodieBotFilePath(), userPrefs.getStallsFilePath(),"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    userPrefs.getBudgetFilePath(), userPrefs.getFoodieBotFilePath(),"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    userPrefs.getFavoriteFoodFilePath(), userPrefs.getTransactionsFilePath());"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(\"FavoriteFood\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (!newBot.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                this.foodieBot.setFavoritedFoods(newBot.get().getFavoriteList());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                filteredFavoriteFoodList \u003d new FilteredList\u003cFood\u003e(newBot.get().getFavoriteList());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            // return Optional.empty();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public void updateModelManagerFood() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    new JsonFoodieBotStorage("
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            userPrefs.getStallsFilePath(), userPrefs.getBudgetFilePath(), userPrefs.getFoodFilePath());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            Storage storage \u003d new StorageManager(foodieBotStorage);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            Optional\u003cReadOnlyFoodieBot\u003e newBot \u003d storage.readFoodieBot(Food.class.getSimpleName());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            foodieBot.setFood(newBot.get().getFoodList());"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (DataConversionException | IOException e) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getAppDateFirstLaunched() {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return userPrefs.getDateFirstLaunched().get();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean equal1 \u003d foodieBot.equals(other.foodieBot);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean equal2 \u003d userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean equal3 \u003d filteredFavoriteFoodList.equals(other.filteredFavoriteFoodList);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean equal4 \u003d filteredTransactionsList.equals(other.filteredTransactionsList);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean equal5 \u003d filteredCanteens.equals(other.filteredCanteens);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return equal1 \u0026 equal2 \u0026 equal3 \u0026 equal4 \u0026 equal5;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 32,
      "lsjxavier": 64,
      "leslieharland": 107,
      "shaungoh97": 46,
      "-": 209,
      "ignatiusong": 17
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/ReadOnlyFoodieBot.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Unmodifiable view of an foodiebot"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyFoodieBot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the canteens list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * canteens."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cCanteen\u003e getCanteenList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cStall\u003e getStallList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ObservableList\u003cFood\u003e getFavoriteList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Budget getBudget();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    Randomize getRandomize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    boolean isLocationSpecified();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    ObservableList\u003cPurchasedFood\u003e getTransactionsList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void removeFavorite(Food food);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Report getReport();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 3,
      "lsjxavier": 6,
      "leslieharland": 13,
      "-": 17,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/** Unmodifiable view of user prefs. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Optional\u003cLocalDate\u003e getDateFirstLaunched();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 4,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/** Represents User\u0027s preferences. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path foodieBotFilePath \u003d Paths.get(\"foodiebot.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path stallsFilePath \u003d Paths.get(\"foodiebot-stalls.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path budgetFilePath \u003d Paths.get(\"foodiebot-budget.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Path foodFilePath \u003d Paths.get(\"foodiebot-food.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path favoriteFoodFilePath \u003d Paths.get(\"foodiebot-favorites.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Path transactionsFilePath \u003d Paths.get(\"foodiebot-transactions.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Optional\u003cLocalDate\u003e dateFirstLaunched \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates a {@code UserPrefs} with default values. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates a {@code UserPrefs} with the prefs in {@code userPrefs}. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setFoodieBotFilePath(newUserPrefs.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        setDateFirstLaunched(newUserPrefs.getDateFirstLaunched());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBotFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStallsFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return stallsFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public Path getFoodFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return foodFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getBudgetFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return budgetFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFavoriteFoodFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoriteFoodFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getTransactionsFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return transactionsFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Optional\u003cLocalDate\u003e getDateFirstLaunched() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return dateFirstLaunched;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setDateFirstLaunched(Optional\u003cLocalDate\u003e newDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateFirstLaunched \u003d newDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFoodieBotFilePath(Path foodieBotFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(foodieBotFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.foodieBotFilePath \u003d foodieBotFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 foodieBotFilePath.equals(o.foodieBotFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, foodieBotFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + foodieBotFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 17,
      "leslieharland": 5,
      "shaungoh97": 5,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/budget/Budget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_DAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a person\u0027s budget."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String DAILY \u003d PREFIX_DATE_BY_DAY.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String WEEKLY \u003d PREFIX_DATE_BY_WEEK.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String MONTHLY \u003d PREFIX_DATE_BY_MONTH.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final float totalBudget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private float remainingBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDateTime dateTimeOfCreation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange cycleRange;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a Budget object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param totalBudget The value of the budget."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param remainingBudget The value of the remaining budget."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration The duration cycle of the budget."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateTimeOfCreation The date and time this object was created."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param cycleRange The date range of the budget cycle."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, float remainingBudget, String duration,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  LocalDateTime dateTimeOfCreation, DateRange cycleRange) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateTimeOfCreation \u003d dateTimeOfCreation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d cycleRange;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a Budget object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param totalBudget The value of the budget."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param remainingBudget The value of the remaining budget."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param duration The duration cycle of the budget."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param dateTimeOfCreation The date and time this object was created."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param cycleStartDate The start date of the budget cycle."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param cycleEndDate The end date of the budget cycle."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, float remainingBudget, String duration,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  LocalDateTime dateTimeOfCreation,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  LocalDate cycleStartDate, LocalDate cycleEndDate) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateTimeOfCreation \u003d dateTimeOfCreation;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        DateRange range;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            range \u003d DateRange.of(cycleStartDate, cycleEndDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            range \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d range;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, float remainingBudget, String duration,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                  LocalDateTime dateTimeOfCreation) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateTimeOfCreation \u003d dateTimeOfCreation;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d setCycleRange(duration, dateTimeOfCreation.toLocalDate());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs a {@code Budget} object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param totalBudget The value of the budget."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration The duration cycle of the budget."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget(float totalBudget, String duration) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateTimeOfCreation \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d setCycleRange(duration);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Constructs an empty default budget."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this(Float.MAX_VALUE, DAILY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Sets a DateRange based on the duration of the budget cycle and the system date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param duration The duration of the budget cycle."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param date the start date of the budget cycle."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return a DateRange representing the range of dates in the budget cycle."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange setCycleRange(String duration, LocalDate date) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (duration.equals(DAILY)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return DateRange.ofSingle(date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else if (duration.equals(WEEKLY)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return DateRange.of(date, date.plusWeeks(1).minusDays(1));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else if (duration.equals(MONTHLY)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return DateRange.of(date, date.plusMonths(1).minusDays(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Sets a DateRange based on the duration of the budget cycle and the system date. */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private DateRange setCycleRange(String duration) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return setCycleRange(duration, LocalDate.now());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Resets the remaining budget to  */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void resetRemainingBudget() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget \u003d this.totalBudget;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRange \u003d setCycleRange(this.duration);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Divides the remaining budget by 5 if set to weekly or 20 if set to monthly,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * to get an average daily budget for weekdays."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @return An average daily budget."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public float getRemainingDailyBudget() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (duration.equals(WEEKLY)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return this.remainingBudget / 5;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else if (duration.equals(MONTHLY)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return this.remainingBudget / 20;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return this.remainingBudget;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public float getTotalBudget() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.totalBudget;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public float getRemainingBudget() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.remainingBudget;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDuration() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String getDurationAsString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.duration.equals(DAILY)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? \"daily\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : this.duration.equals(WEEKLY)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    ? \"weekly\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    : \"monthly\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDateTime getDateTimeOfCreation() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.dateTimeOfCreation;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Return the cycle for which this budget is for. */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public DateRange getCycleRange() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.cycleRange;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** . */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void subtractFromRemainingBudget(float expenses) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remainingBudget -\u003d expenses;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** . */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addToRemainingBudget(float expenses) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.remainingBudget +\u003d expenses;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /** Check if this is a default value */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDefaultBudget() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.totalBudget \u003d\u003d Float.MAX_VALUE;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return otherBudget.getTotalBudget() \u003d\u003d totalBudget"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherBudget.getRemainingBudget() \u003d\u003d remainingBudget"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherBudget.getDuration().equals(duration);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Objects.hash(totalBudget, remainingBudget, duration, dateTimeOfCreation, cycleRange);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 137,
      "Samanthaseahpl": 2,
      "leslieharland": 2,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Canteen.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Canteen in FoodieBot. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Canteen {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String[] CANTEENS \u003d new String[]{\"The Deck\", \"NUS Flavors\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String IMAGE_FOLDER \u003d \"/images/canteen/\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Canteen not found\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String INVALID_CANTEEN_INDEX \u003d \"The canteen index must be between 1 and \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            + CANTEENS.length;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static final String INVALID_STALL_INDEX \u003d \"Please provide a valid stall index\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Canteen.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int numberOfStalls;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int distance;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String blockName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String canteenImageName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String directionImageName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String directionText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final List\u003cStall\u003e stallsList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e cuisines \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Canteen("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name, int numberOfStalls, int distance, String blockName, String directionImageName,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String directionText, Set\u003cTag\u003e tags, String canteenImageName, List\u003cStall\u003e stallList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(name, numberOfStalls, tags, stallList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.distance \u003d distance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.blockName \u003d blockName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.directionImageName \u003d directionImageName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenImageName \u003d canteenImageName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.directionText \u003d directionText;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.stallsList \u003d stallList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisines.addAll(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /** checks if the canteen matches one of the listed names */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidCanteen(String trimmedCanteenName) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(CANTEENS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(trimmedCanteenName::equalsIgnoreCase);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public static int getNumCanteens() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return CANTEENS.length;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfStalls() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return numberOfStalls;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDistance() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return distance;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getBlockName() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return blockName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDirectionImageName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return directionImageName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Image getDirectionImage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + directionImageName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Image image \u003d new Image(Canteen.class.getResourceAsStream((mImageUrl)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDirectionsText() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return directionText;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Image getCanteenImage() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + canteenImageName;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Image image \u003d new Image(Canteen.class.getResourceAsStream((mImageUrl)));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCanteenImageName() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteenImageName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(cuisines);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameCanteen(Canteen otherCanteen) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherCanteen \u003d\u003d this) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCanteen !\u003d null"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherCanteen.getDistance() \u003d\u003d (getDistance())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                        || otherCanteen.getNumberOfStalls() \u003d\u003d (getNumberOfStalls()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both canteens have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * notion of equality between two canteens."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Canteen)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen otherCanteen \u003d (Canteen) other;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherCanteen.getDistance() \u003d\u003d (getDistance())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherCanteen.getNumberOfStalls() \u003d\u003d (getNumberOfStalls())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherCanteen.getBlockName().equals(getBlockName())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherCanteen.getTags().equals(getTags());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, distance, numberOfStalls, blockName, cuisines);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" NumberOfStalls: \")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getNumberOfStalls())"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Distance: \")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDistance())"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" NearestBlockName: \")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getBlockName())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" DirectionsImageUrl: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDirectionImageName())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" CanteenImageUrl: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getCanteenImageName())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" DirectionsText: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDirectionsText())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 170,
      "ignatiusong": 15
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 fullName.equalsIgnoreCase(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/canteen/Stall.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Stall in FoodieBot. Guarantees: details are present and not null, field"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Stall {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String IMAGE_FOLDER \u003d \"/images/canteen/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Stall not found\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(Stall.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String canteenName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int stallNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String stallImageName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String cuisine;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String overallPriceRating;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int favorite;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final List\u003cFood\u003e foodMenu;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stall("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name, String canteenName, int stallNumber, String stallImageName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        String cuisine, String overallPriceRating, int favorite, Set\u003cTag\u003e tags, List\u003cFood\u003e foodMenu) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, canteenName, stallNumber, stallImageName, cuisine, overallPriceRating, favorite);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d canteenName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallNumber \u003d stallNumber;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallImageName \u003d stallImageName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.overallPriceRating \u003d overallPriceRating;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.favorite \u003d favorite;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        this.foodMenu \u003d foodMenu;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCanteenName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteenName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getStallNumber() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return stallNumber;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStallImageName() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return stallImageName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCuisine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return cuisine;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getOverallPriceRating() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return overallPriceRating;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Retrieves the images within the folder with the canteen name."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * e.g. Stall in The Deck with appear in The Deck folder"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Image getStallImage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + canteenName + \"/\" + stallImageName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Image image \u003d new Image(Stall.class.getResourceAsStream((mImageUrl)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getFavorite() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return favorite;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * the same. This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameStall(Stall otherStall) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherStall \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherStall !\u003d null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherStall.getName().equals(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 (otherStall.getCanteenName().equals(getCanteenName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            || otherStall.getStallNumber() \u003d\u003d (getStallNumber()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both stalls have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * notion of equality between two stalls."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Stall)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Stall otherStall \u003d (Stall) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherStall.getName().equals(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherStall.getCanteenName().equals(getCanteenName())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherStall.getStallNumber() \u003d\u003d (getStallNumber())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherStall.getCuisine().equals(getCuisine())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 otherStall.getOverallPriceRating().equals(getOverallPriceRating());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, canteenName, stallNumber, cuisine);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getName())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" CanteenName: \")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getCanteenName())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" StallNumber: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getStallNumber())"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" StallImageName: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getStallImageName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Cuisine: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getCuisine())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" OverallPriceRating: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getOverallPriceRating())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\" Favorite: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(getFavorite());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "shaungoh97": 12,
      "-": 140,
      "ignatiusong": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/favorites/FavoriteFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.favorites;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** .*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class FavoriteFood extends Food {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param price"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param foodImageName"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param stallNo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param canteen"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param stallName"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FavoriteFood(String name, int price, String description, String foodImageName,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            int stallNo, String canteen, String stallName, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(name, price, description, foodImageName, stallNo, canteen, stallName, tags); }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 25
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/food/Food.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Food in the address book. Guarantees: details are present and not null, field values"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String[] FOOD \u003d new String[]{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \"Roasted Chicken Rice\", \"Fish Bee Hoon\", \"Roti Prata Set,\", \"Beef Rice Set\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \"Mala\", \"Fried Meatball Noodle\", \"Cai Fan Set\", \"Popcorn Chicken with Veg Set\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \"Combo Set\", \"Fried Rice\", \"Xiao Long Bao\", \"Assorted Claypot Chicken with Rice\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \"Cai Fan\", \"Roti Prata\", \"Katsudon Rice Set\", \"Beef Rendang\", \"Mini Hot Pot Noodle\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \"Chicken Rice Set\", \"Fried Kway Teow\", \"Laksa Yong Tau Foo\", \"Vegetarian Set\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \"Fried Fish\", \"Carbonara\", \"Assorted Salads\", \"Ayam Penyet\"};"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String IMAGE_FOLDER \u003d \"/images/canteen/\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Food not found\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String INVALID_FOOD_INDEX \u003d \"Please provide a valid food index\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String foodImageName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String canteen;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String stallName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int stallNo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Food("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            String name,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            int price,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            String foodImageName,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            int stallNo,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            String canteen,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            String stallName,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, price, description, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallNo \u003d stallNo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //this.foodImageName \u003d foodImageName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodImageName \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //Current foodImageName will get back image object, cannot use"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallName \u003d stallName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPrice() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getCanteen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteen;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public String getStallName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return stallName;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public Image getFoodImage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        String mImageUrl \u003d IMAGE_FOLDER + canteen + \"/\" + stallName + \"/\" + foodImageName + \".png\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        System.out.println(mImageUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        Image image \u003d new Image(Food.class.getResourceAsStream(mImageUrl));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getStallNo() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return stallNo;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both food of the same name have at least one other identity field that is the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * same. This defines a weaker notion of equality between two food."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameFood(Food otherCanteen) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherCanteen \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCanteen !\u003d null"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 (otherCanteen.getPrice() \u003d\u003d (getPrice()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both food have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * notion of equality between two food."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Food otherCanteen \u003d (Food) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherCanteen.getName().equals(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherCanteen.getPrice() \u003d\u003d (getPrice());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, price, description, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "shaungoh97": 28,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/food/UniqueFoodList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.DuplicateStallException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " * List of Food Available while ensuring no duplicates"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Adds a food to the list. The food must not already exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Replaces the canteen {@code target} in the list with {@code editedFood}. {@code target}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * must exist in the list. The canteen identity of {@code editedFood} must not be the same as"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * another existing canteen in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateStallException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedPerson}. {@code target}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * must exist in the list. The food identity of {@code editedPerson} must not be the same as"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * another existing food in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFood(List\u003cFood\u003e food) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireAllNonNull(food);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!foodsAreUnique(food)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new DuplicateCanteenException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.setAll(food);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Removes the equivalent food from the list. The food must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns true if {@code food} contains only unique foods."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 2,
      "shaungoh97": 5,
      "ignatiusong": 125
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/randomize/Randomize.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "package seedu.foodiebot.model.randomize;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " * Randomize a canteen, stall and food choice for the user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "public class Randomize {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private static Randomize singleRandomize \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String selectedCanteen \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String selectedStall \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private List\u003cString[]\u003e listOutput \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private List\u003cStall\u003e optionsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private StringBuilder output \u003d new StringBuilder(\"Here is the choice:\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private JSONArray jsonArrayStall;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Map\u003cString, Integer\u003e mapStalls \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Boolean isLessThanFiveOption \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Random rand \u003d new Random();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String prefix;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Boolean isCanteenContext \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private List\u003cStall\u003e matchingCanteen \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Randomize() {}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method ensure that there is only 1 randomize object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return Randomize"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public static Randomize checkRandomize() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (singleRandomize \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            singleRandomize \u003d new Randomize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return singleRandomize;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method clears all the list items."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void resetInternalList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.optionsList.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.listOutput.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void setPrefix(String prefix) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void setAction(String action) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void setCanteenContext() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.isCanteenContext \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method creates an UnmodifiableObservableList for the BaseScene."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return ObservableList with stall object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public ObservableList\u003cStall\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        ObservableList\u003cStall\u003e internalList \u003d FXCollections.observableArrayList(optionsList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        ObservableList\u003cStall\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method returns a List of stall objects."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return List of Stall object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public List\u003cStall\u003e getOptionsList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return optionsList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method return the output list option."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return String of options."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public String output() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (listOutput.isEmpty() \u0026\u0026 prefix.contains(\"t\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            output.append(\"There are no stall with this tag: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    .append(action);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        //else if (isLessThanFiveOption) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        //    output.append(\"There are less than 5 stores in this canteen. This is all the result.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This function save canteen name and number of stalls from the jsonfile (foodiebot.json)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void setCanteens(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        resetInternalList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONArray canteenList \u003d (JSONArray) obj.get(\"canteens\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            String canteenName;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            int numOfStalls;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            for (Object o : canteenList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                JSONObject canteen \u003d (JSONObject) o;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                canteenName \u003d (String) canteen.get(\"name\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                numOfStalls \u003d (int) (long) canteen.get(\"numberOfStalls\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                mapStalls.put(canteenName, numOfStalls);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This function save canteen name and number of stalls from the canteen selected by index."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteen which is provided from the RandomizeCommand"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void setSpecifiedCanteen(Canteen canteen) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        selectedCanteen \u003d canteen.getName().toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        action \u003d selectedCanteen;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        int numOfStalls \u003d canteen.getNumberOfStalls();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        mapStalls.put(selectedCanteen, numOfStalls);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method check if the canteen name provided by user is valid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return true if canteen name is valid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public boolean ifCanteenNamePresent() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return mapStalls.containsKey(action);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method produce a list of options by Canteen from jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void getOptions(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            jsonArrayStall \u003d (JSONArray) obj.get(\"stalls\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            List\u003cStall\u003e listStall;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (isCanteenContext) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                listStall \u003d generateListByCriteria(\"canteen\", selectedCanteen);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                listStall \u003d generateListByCriteria(\"\", \"\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            //generateFiveOptions(listStall);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            generateOneOption(listStall);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method produce a list of options from the jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void getOptionsByCanteen(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            jsonArrayStall \u003d (JSONArray) obj.get(\"stalls\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            //generateOptionsByCanteen(action);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            selectedCanteen \u003d action;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            matchingCanteen \u003d generateListByCriteria(\"canteen\", selectedCanteen);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            generateOneOption(matchingCanteen);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method produce a list of options from the jsonfile (foodiebot-stalls.json)."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param file which is provided from the RandomizeCommand."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void getOptionsByTags(FileReader file) throws CommandException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            JSONObject obj \u003d (JSONObject) parser.parse(file);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            jsonArrayStall \u003d (JSONArray) obj.get(\"stalls\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            //generateListByTag(action);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            List\u003cStall\u003e matchingTag \u003d generateListByCriteria(\"tags\", action);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (matchingTag.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_NO_FOOD_WITH_TAG + action);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                generateOneOption(matchingTag);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (IOException | ParseException e) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FILEREADER);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This methods generate 1 random option."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param stalls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private void generateOneOption(List\u003cStall\u003e stalls) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        int index \u003d rand.nextInt(stalls.size());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        Stall stall \u003d stalls.get(index);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        selectedCanteen \u003d stall.getCanteenName();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        selectedStall \u003d stall.getName().toString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        stalls.remove(index);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        optionsList.add(stall);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method generate the list od options by the selected canteen."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteenName The user input on the selected canteen."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private void generateOptionsByCanteen(String canteenName) throws CommandException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        selectedCanteen \u003d canteenName;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        List\u003cStall\u003e matchingCanteen \u003d generateListByCriteria(\"canteen\", canteenName);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            int canteenSize \u003d mapStalls.get(canteenName);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (canteenSize \u003e\u003d 5) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                isLessThanFiveOption \u003d false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                //generateFiveOptions(matchingCanteen);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                isLessThanFiveOption \u003d true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                for (int i \u003d 0; i \u003c canteenSize; i++) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    Stall stall \u003d matchingCanteen.get(i);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    selectedStall \u003d stall.getName().toString();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    optionsList.add(stall);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CANTEEN_NAME);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method add the option to the list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param listOfStalls List of Stall object with the matching canteen."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private void generateFiveOptions(List\u003cStall\u003e listOfStalls) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        while (listOutput.size() \u003c 5) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            int index \u003d rand.nextInt(listOfStalls.size());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            Stall stall \u003d listOfStalls.get(index);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            selectedCanteen \u003d stall.getCanteenName();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            selectedStall \u003d stall.getName().toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            listOfStalls.remove(index);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            optionsList.add(stall);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method check if the current option already exist in the list."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param canteen This is the selected canteen"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param stall   This is the selected stall"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return Boolean true if option is not on the list, false otherwise"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Boolean isNotInList(String canteen, String stall) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        boolean state \u003d true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        for (String[] text : listOutput) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (canteen.equals(text[0]) \u0026\u0026 stall.equals(text[1])) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                state \u003d false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return state;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method generate the list of options by the selected canteen."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param tag The user input on the selected tag."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private void generateListByTag(String tag) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        List\u003cStall\u003e matchingTag \u003d generateListByCriteria(\"tags\", tag);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (matchingTag.size() \u003e\u003d 5) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            isLessThanFiveOption \u003d false;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            //generateFiveOptions(matchingTag);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            isLessThanFiveOption \u003d true;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            for (int i \u003d 0; i \u003c matchingTag.size(); i++) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                Stall stall \u003d matchingTag.get(i);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                selectedStall \u003d stall.getName().toString();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                selectedCanteen \u003d stall.getCanteenName();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                listOutput.add(new String[]{selectedCanteen, selectedStall});"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                optionsList.add(stall);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method return a list of stalls object that satisfy the criteria."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param type     define by which to filter by canteen or tags."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param criteria more information on on type in details."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return List of stalls that satisfy the type and criteria."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private List\u003cStall\u003e generateListByCriteria(String type, String criteria) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        List\u003cStall\u003e listOfStallMatchingCriteria \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (isCanteenContext \u0026\u0026 type.equals(\"tags\")) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            matchingCanteen \u003d generateListByCriteria(\"canteen\", selectedCanteen);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            for (int i \u003d 0; i \u003c matchingCanteen.size(); i++) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                Stall stall \u003d matchingCanteen.get(i);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                Set\u003cTag\u003e tags \u003d stall.getTags();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (tags.contains(criteria)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    listOfStallMatchingCriteria.add(stall);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            for (Object o : jsonArrayStall) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                JSONObject jsonStall \u003d (JSONObject) o;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                if (type.equals(\"tags\")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    JSONArray tagList \u003d (JSONArray) jsonStall.get(\"tags\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    if (tagList.contains(criteria)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        listOfStallMatchingCriteria.add(createNewStall(jsonStall));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                } else if (type.equals(\"canteen\")) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    String canteenName \u003d (String) jsonStall.get(\"canteenName\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    if (canteenName.equals(criteria)) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        listOfStallMatchingCriteria.add(createNewStall(jsonStall));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    listOfStallMatchingCriteria.add(createNewStall(jsonStall));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return listOfStallMatchingCriteria;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * This method create a new Stall Object."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @param jsonStall JSONObject with the detail for a stall."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @return Stall object."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Stall createNewStall(JSONObject jsonStall) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String name \u003d (String) jsonStall.get(\"name\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String canteenName \u003d (String) jsonStall.get(\"canteenName\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        int stallNumber \u003d ((Number) jsonStall.get(\"stallNumber\")).intValue();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String stallImageName \u003d (String) jsonStall.get(\"stallImageName\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String cuisine \u003d (String) jsonStall.get(\"cuisine\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        String overallPriceRating \u003d (String) jsonStall.get(\"overallPriceRating\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        int favorite \u003d ((Number) jsonStall.get(\"favorite\")).intValue();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        JSONArray tagsArr \u003d (JSONArray) jsonStall.get(\"tags\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(tagsArr);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return new Stall(new Name(name), canteenName, stallNumber, stallImageName,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                cuisine, overallPriceRating, favorite,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                tags, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 373
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/rating/Rating.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.model.rating;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Stores the rating for a food */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String NO_RATING \u003d \"No rating\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Optional\u003cInteger\u003e rating;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Rating(int rating) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (rating \u003e\u003d 0 \u0026\u0026 rating \u003c\u003d 10) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.rating \u003d Optional.of(rating);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Rating() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.rating \u003d Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Optional\u003cInteger\u003e getRating() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.rating;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return rating.isPresent() ? Integer.toString(this.rating.get()) : NO_RATING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 this.rating \u003d\u003d ((Rating) other).getRating());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Objects.hash(rating);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 44
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/rating/Review.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.model.rating;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Stores the review for a food */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Review {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String NO_REVIEW \u003d \"No review\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Optional\u003cString\u003e review;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Review(String review) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d Optional.of(review);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Review() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d Optional.empty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Optional\u003cString\u003e getReview() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.review;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return review.isPresent() ? getReview().get() : NO_REVIEW;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                || (other instanceof Review // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 this.review.get().equals(((Review) other).getReview().get()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return review.hashCode();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 39,
      "leslieharland": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/report/Report.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Generates a report of transactions */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class Report {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String TOTAL_SPENT \u003d \"Total amount spent: $%.2f\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private float totalSpent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final TreeMap\u003cPurchasedFood, Integer\u003e report;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a new Report object. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Report() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.totalSpent \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.report \u003d new TreeMap\u003cPurchasedFood, Integer\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Creates a new report filtered by the given predicate."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param transactions The full list of transactions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param predicate The predicate to filter the date range of the report."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void create(ObservableList\u003cPurchasedFood\u003e transactions, Predicate\u003cPurchasedFood\u003e predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (PurchasedFood food : transactions) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (predicate.test(food)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                addFood(food);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a purchased food into the report map."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param food The purchased food."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addFood(PurchasedFood food) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (report.containsKey(food)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int counter \u003d report.get(food);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            report.replace(food, counter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            report.put(food, 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        totalSpent \u003d totalSpent + food.getPrice();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Resets the report to an empty report."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        totalSpent \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        report.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private float getTotalSpent() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return totalSpent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns true if both canteens have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * notion of equality between two canteens."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!(other instanceof Report)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Report otherReport \u003d (Report) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return otherReport.getTotalSpent() \u003d\u003d getTotalSpent();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return Objects.hash(totalSpent, report);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String header \u003d String.format(TOTAL_SPENT, totalSpent) + \"\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                + \"-----------------------------\" + \"\\n\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String currentCanteen \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String currentStall \u003d \"\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (PurchasedFood food : report.keySet()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!currentCanteen.equals(food.getCanteen())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                currentCanteen \u003d food.getCanteen();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"\\nCanteen: \" + currentCanteen + \"\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (!currentStall.equals(food.getStallName())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                currentStall \u003d food.getStallName();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                output \u003d output + \"\\n    Stall: \" + currentStall + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            // print food"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            output \u003d output + \"\\n        Food: \" + food.getName() + \"\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"            - Price: \" + String.format(\"$%.2f\", (float) food.getPrice()) + \"\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"            - No. of times you\u0027ve been here: \" + report.get(food) + \" time(s)\" + \"\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    + \"            - Total spent here: \" + String.format(\"$%.2f\", ("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            (float) food.getPrice() * report.get(food))) + \"\\n\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return header + output;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 93,
      "leslieharland": 29
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/transaction/PurchasedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Represents a purchased food. This class extends the {@link Food} class with the added fields of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * date purchased, rating as well as a review. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class PurchasedFood extends Food implements Comparable\u003cPurchasedFood\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate dateAdded;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalTime timeAdded;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Review review;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public PurchasedFood(String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         int price,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         String description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         String foodImageName,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         int stallNo,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         String canteen,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         String stallName,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         LocalDate dateAdded,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         LocalTime timeAdded,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         Rating rating,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                         Review review) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(name, price, description, foodImageName, stallNo, canteen, stallName, tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateAdded \u003d dateAdded;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.timeAdded \u003d timeAdded;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public PurchasedFood(Food food, LocalDate dateAdded, LocalTime timeAdded, Rating rating, Review review) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this(food.getName(), food.getPrice(), food.getDescription(), food.getName(), food.getStallNo(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                food.getCanteen(), food.getStallName(), food.getTags(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                dateAdded, timeAdded, rating, review);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setRating(Rating newRating) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.rating \u003d newRating;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setReview(Review newReview) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d newReview;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalDate getDateAdded() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.dateAdded;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public LocalTime getTimeAdded() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.timeAdded;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.rating;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Review getReview() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return this.review;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int compareTo(PurchasedFood otherFood) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        int canteenCompare \u003d getCanteen().compareTo(otherFood.getCanteen());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (canteenCompare \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            int stallCompare \u003d getStallName().compareTo(otherFood.getStallName());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (stallCompare \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return getName().compareTo(otherFood.getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return stallCompare;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return canteenCompare;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof PurchasedFood)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        PurchasedFood otherFood \u003d (PurchasedFood) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u0026\u0026 otherFood.getReview() \u003d\u003d getReview()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherFood.getPrice() \u003d\u003d (getPrice())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Objects.hash(getName(), getPrice(), getDescription(), getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 113,
      "leslieharland": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/transaction/PurchasedFoodList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * List of Food Available"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class PurchasedFoodList implements Iterable\u003cPurchasedFood\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final ObservableList\u003cPurchasedFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final ObservableList\u003cPurchasedFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean contains(PurchasedFood toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void add(PurchasedFood toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Adds a food to the list in reverse order."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void addReverse(PurchasedFood toAdd) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.sort((a, b) -\u003e b.getDateAdded().atTime(b.getTimeAdded())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .compareTo(a.getDateAdded().atTime(a.getTimeAdded())));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Removes the equivalent food from the list. The food must exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void remove(PurchasedFood toRemove) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Removes all food in this list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Replaces the canteen {@code target} in the list with {@code editedFood}. {@code target}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setFood(PurchasedFood target, PurchasedFood editedFood) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new StallNotFoundException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setFoods(PurchasedFoodList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Replaces the contents of this list with {@code food}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void setFoods(List\u003cPurchasedFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ObservableList\u003cPurchasedFood\u003e getList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        internalList.sort((a, b) -\u003e b.getDateAdded().atTime(b.getTimeAdded())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                .compareTo(a.getDateAdded().atTime(a.getTimeAdded())));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ObservableList\u003cPurchasedFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Iterator\u003cPurchasedFood\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                || (other instanceof PurchasedFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u0026\u0026 internalList.equals(((PurchasedFoodList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 126,
      "leslieharland": 9
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //Possible Tags: spicy, non-spicy, rice, noodle, expensive, cheap, asian, western, halal, non-halal"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COM1_TO_DECK_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \"1. From Com1 entrance main entrance (facing car park), turn right\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. Walk up the steps \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COM1_TO_NUSFLAVORS_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \"1. From Com1, take shuttle D2 to Utown\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"2. Follow the path to Stephen Riady Centre\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"3. Walk straight and the canteen appears to your right\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Canteen[] getSampleCanteens() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        ArrayList\u003cStall\u003e deckStalls \u003d new ArrayList\u003cStall\u003e("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Chinese Cooked Food\"), \"The Deck\", 1, \"ChineseCookedFood.png\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"rice\", \"noodle\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Claypot Seafood Soup\"), \"The Deck\", 2, \"ClaypotSeafoodSoup.png\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"rice\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Indian\"), \"The Deck\", 3, \"Indian.png\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"spicy\", \"halal\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Japanese\"), \"The Deck\", 4, \"Jap.png\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Muslim\"), \"The Deck\", 5, \"Muslim.png\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"rice\", \"spicy\", \"halal\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Noodle\"), \"The Deck\", 6, \"Noodle.png\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"noodle\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Roasted Delights\"), \"The Deck\", 7, \"RoastedDelights.png\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"rice\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Snacks and Fried Kway Teow\"), \"The Deck\", 8, \"Snacks\u0026FKT.png\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"noodle\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Yong Tau Foo and Laksa\"), \"The Deck\", 9, \"YTF\u0026Laksa.png\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"noodle\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Vegetarian\"), \"The Deck\", 10, \"Vegetarian.png\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"rice\", \"cheap\", \"halal\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Western\"), \"The Deck\", 11, \"Western.png\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"western\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"expensive\", \"western\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Pasta Express\"), \"The Deck\", 12, \"PastaExpress.png\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"western\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$$\", 0, getTagSet(\"western\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Salad Express\"), \"The Deck\", 13, \"SaladExpress.png\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"asian\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Uncle Penyet\"), \"The Deck\", 14, \"UnclePenyet.png\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"fusion\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"$\", 0, getTagSet(\"asian\", \"western\", \"rice\", \"spicy\", \"expensive\"), new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        ArrayList\u003cStall\u003e flavourStalls \u003d new ArrayList\u003cStall\u003e("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                Arrays.asList ("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Duck and Chicken Rice\"), \"Nus Flavors\", 1, \"DuckandChickenRice.png\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"rice\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Five Grains Bee Hoon\"), \"Nus Flavors\", 2, \"FiveGrainsBeeHoon.png\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"noodle\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Indian Cuisine\"), \"Nus Flavors\", 3, \"Indian Cuisine.png\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"Indian\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"asian\", \"spicy\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        new Stall(new Name(\"Japanese and Korean\"), \"Nus Flavors\", 4, \"JapKor.png\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"Fusion\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"asian\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Mala Hot Pot\"), \"Nus Flavors\", 5, \"MalaHotPot.png\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"asian\", \"spicy\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Minced Meat Noodle\"), \"Nus Flavors\", 6, \"MincedMeatNoodle.png\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"noodle\", \"asian\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Mixed Veg Rice\"), \"Nus Flavors\", 7, \"MixedVegRice.png\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"rice\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Taiwan Cuisine\"), \"Nus Flavors\", 8, \"TaiwanCuisine.png\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"asian\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Western\"), \"Nus Flavors\", 9, \"Western.png\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"Western\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"western\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Wok Fried\"), \"Nus Flavors\", 10, \"WokFried.png\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        new Stall(new Name(\"Xiao Long Bao\"), \"Nus Flavors\", 11, \"XiaoLongBao.png\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"asian\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                                \"$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Canteen[]{"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            new Canteen("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                new Name(\"Nus Flavors\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                11,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                3200,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \"COM1\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \"utown_flavors.png\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                COM1_TO_NUSFLAVORS_DIRECTIONS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                getTagSet(\"asian\", \"western\", \"muslim\"), \"utown.jpg\", new ArrayList\u003c\u003e(flavourStalls)),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Canteen("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                new Name(\"The Deck\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                14,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                1000,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"COM1\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"com1_deck.png\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                COM1_TO_DECK_DIRECTIONS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                getTagSet(\"asian\"), \"deck.jpg\", new ArrayList\u003c\u003e(deckStalls)),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Stall[] getSampleStalls() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Stall[]{"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Chinese Cooked Food\"), \"The Deck\", 1, \"ChineseCookedFood.png\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"noodle\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Claypot Seafood Soup\"), \"The Deck\", 2, \"ClaypotSeafoodSoup.png\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Indian\"), \"The Deck\", 3, \"Indian.png\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"spicy\", \"halal\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Japanese\"), \"The Deck\", 4, \"Jap.png\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Muslim\"), \"The Deck\", 5, \"Muslim.png\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"spicy\", \"halal\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Noodle\"), \"The Deck\", 6, \"Noodle.png\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"noodle\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Roasted Delights\"), \"The Deck\", 7, \"RoastedDelights.png\","
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Snacks and Fried Kway Teow\"), \"The Deck\", 8, \"Snacks\u0026FKT.png\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"noodle\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Yong Tau Foo and Laksa\"), \"The Deck\", 9, \"YTF\u0026Laksa.png\","
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"noodle\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Vegetarian\"), \"The Deck\", 10, \"Vegetarian.png\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"cheap\", \"halal\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Western\"), \"The Deck\", 11, \"Western.png\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"western\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"expensive\", \"western\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Pasta Express\"), \"The Deck\", 12, \"PastaExpress.png\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"western\","
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$$\", 0, getTagSet(\"western\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Salad Express\"), \"The Deck\", 13, \"SaladExpress.png\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Uncle Penyet\"), \"The Deck\", 14, \"UnclePenyet.png\","
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"fusion\","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"asian\", \"western\", \"rice\", \"spicy\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Duck and Chicken Rice\"), \"Nus Flavors\", 1, \"DuckandChickenRice.png\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Five Grains Bee Hoon\"), \"Nus Flavors\", 2, \"FiveGrainsBeeHoon.png\","
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"noodle\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Indian Cuisine\"), \"Nus Flavors\", 3, \"Indian Cuisine.png\","
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"Indian\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"asian\", \"spicy\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            new Stall(new Name(\"Japanese and Korean\"), \"Nus Flavors\", 4, \"JapKor.png\","
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"Fusion\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"asian\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Mala Hot Pot\"), \"Nus Flavors\", 5, \"MalaHotPot.png\","
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"asian\", \"spicy\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Minced Meat Noodle\"), \"Nus Flavors\", 6, \"MincedMeatNoodle.png\","
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"noodle\", \"asian\", \"cheap\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Mixed Veg Rice\"), \"Nus Flavors\", 7, \"MixedVegRice.png\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"rice\", \"cheap\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Taiwan Cuisine\"), \"Nus Flavors\", 8, \"TaiwanCuisine.png\","
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"asian\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Western\"), \"Nus Flavors\", 9, \"Western.png\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"Western\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"western\", \"expensive\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Wok Fried\"), \"Nus Flavors\", 10, \"WokFried.png\","
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            new Stall(new Name(\"Xiao Long Bao\"), \"Nus Flavors\", 11, \"XiaoLongBao.png\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"asian\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static Food[] getSampleFoods() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return new Food[] { new Food(\"Roasted Chicken Rice\", 4, \"Roasted Meat and Chicken Rice\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Roasted Chicken Rice.png\", 1, \"Nus Flavors\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Duck and Chicken Rice\", getTagSet(\"asian\", \"cheap\", \"rice\")),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Fish Bee Hoon\", 4, \"Been Hoon with Fish\", \"Fish Bee Hoon.png\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        2, \"Nus Flavors\", \"Five Grains Bee Hoon\", getTagSet(\"asian\", \"cheap\", \"noodle\")),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Roti Prata Set\", 3, \"2 Pieces and Curry\", \"Roti Prata Set.png\","
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        3, \"Nus Flavors\", \"Indian Cuisine\", getTagSet(\"cheap\", \"indian\")),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Beef Rice Set\", 5, \"Fried Korean Beef with Rice\", \"Beef Rice Set.png\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        4, \"Nus Flavors\", \"Japanese and Korean\", getTagSet(\"korean\", \"expensive\")),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Mala\", 10, \"Assorted Meat and Veg with Mala Sauce\", \"Mala.png\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        5, \"Nus Flavors\", \"Mala Hot Pot\", getTagSet(\"asian\", \"expensive\", \"spicy\")),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Fried Meatball Noodle\", 5, \"Fried Meatball with Minced Meat Noodles\","
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Fried Meatball Noodle.png\", 6, \"Nus Flavors\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Minced Meat Noodle\", getTagSet(\"asian\", \"noodle\")),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Cai Fan Set\", 3, \"2 Meat 1 Veg\", \"Cai Fan Set.png\","
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        7, \"Nus Flavors\", \"Mixed Veg Rice\", getTagSet(\"asian\", \"cheap\", \"rice\")),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Popcorn Chicken with Veg Set\", 6, \"Popcorn Chicken, vegetable and rice\","
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Popcorn Chicken with Veg Set.png\", 8, \"Nus Flavors\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Taiwan Cuisine\", getTagSet(\"asian\", \"expensive\")),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Combo Set\", 6, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        9, \"Nus Flavors\", \"Western\", getTagSet(\"western\", \"expensive\")),"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Fried Rice\", 4, \"Local Fried Rice\", \"Fried Rice.png\","
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        10, \"Nus Flavors\", \"Wok Fried\", getTagSet(\"asian\", \"expensive\", \"rice\")),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Xiao Long Bao\", 5, \"7 pieces\", \"Xiao Long Bao.png\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        11, \"Nus Flavors\", \"Xiao Long Bao\", getTagSet(\"asian\", \"expensive\")),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Cai Fan\", 3, \"1 Meat, 2 Veg\", \"Cai Fan Set.png\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        1, \"The Deck\", \"Chinese Cooked Food\", getTagSet(\"expensive\")),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Assorted Claypot Chicken with Rice\", 4, \"Black sauce chicken wtih rice\","
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Assorted Claypot Chicken with Rice.png\", 2, \"The Deck\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Claypot Seafood Soup\", getTagSet(\"asian\", \"cheap\", \"rice\")),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Roti Prata\", 3, \"2 pieces and curry\", \"Roti Prata.png\","
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        3, \"The Deck\", \"Indian\", getTagSet(\"indian\", \"spicy\", \"cheap\")),"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Katsudon Rice Set\", 5, \"Chicken Cutlet with rice\", \"Katsudon Rice Set.png\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        4, \"The Deck\", \"Japanese\", getTagSet(\"japanese\", \"expensive\", \"rice\")),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Beef Rendang\", 5, \"Nasi Goodness\", \"Beef Rendang.png\","
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        5, \"The Deck\", \"Muslim\", getTagSet(\"asian\", \"expensive\", \"spicy\")),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Mini Hot Pot Noodle\", 4, \"Minced Meat Noodle with Soup\","
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Mini Hot Pot Noodle.png\", 6, \"The Deck\","
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \"Noodle\", getTagSet(\"asian\", \"cheap\", \"noodles\")),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Chicken Rice Set\", 4, \"Rice, Chicken, Vegetable and Soup\", \"Chicken Rice Set.png\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        7, \"The Deck\", \"Roasted Delights\", getTagSet(\"asian\", \"cheap\")),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Fried Kway Teow\", 4, \"Fried Kway Teow with fried delights\", \"Fried Kway Teow.png\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        8, \"The Deck\", \"Snacks and Fried Kway Teow\", getTagSet(\"asian\", \"cheap\")),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Laksa Yong Tau Foo\", 4, \"Spicy and Delicious\", \"Laksa Yong Tau Foo.png\","
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        9, \"The Deck\", \"Yong Tau Foo and Laksa\", getTagSet(\"asian\", \"expensive\", \"spicy\")),"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Vegetarian Set\", 4, \"Vegetable with rice\", \"Vegetarian Set.png\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        10, \"The Deck\", \"Vegetarian\", getTagSet(\"asian\", \"cheap\", \"vegetarian\")),"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Fried Fish\", 5, \"Fried Fish and chips\", \"Fried Fish.png\","
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        11, \"The Deck\", \"Western\", getTagSet(\"western\", \"expensive\")),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Carbonara\", 6, \"Pasta with Cream Sauce\", \"Carbonara.png\","
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        12, \"The Deck\", \"Pasta Express\", getTagSet(\"western\", \"expensive\")),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Assorted Salads\", 6, \"Variety of salads\", \"Assorted Salads.png\","
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        13, \"The Deck\", \"Salad Express\", getTagSet(\"vegetarian\", \"expensive\")),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                            new Food(\"Ayam Penyet\", 5, \"Ayam Penyet\", \"Ayam Penyet.png\","
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        14, \"The Deck\", \"Uncle Penyet\", getTagSet(\"asian\", \"western\", \"expensive\")),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyFoodieBot getSampleFoodieBot() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot sampleFb \u003d new FoodieBot();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Canteen sampleCanteen : getSampleCanteens()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addCanteen(sampleCanteen);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Stall sampleStall : getSampleStalls()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addStall(sampleStall);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        for (Food sampleFood : getSampleFoods()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            sampleFb.addFood(sampleFood);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return sampleFb;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12,
      "Samanthaseahpl": 19,
      "shaungoh97": 201,
      "-": 56,
      "ignatiusong": 3
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/FoodieBotStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/** Represents a storage for {@link FoodieBot}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface FoodieBotStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getCanteensFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getStallsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    Path getFavoritesFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    Path getFoodFilePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Path getTransactionsFilePath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    Path getBudgetFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyFoodieBot}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(String modelType) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #getCanteensFilePath() */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(Path filePath, String modelType)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getModelFilePath(String modelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodieBot} to the storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param foodieBot cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot, String modelType) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ///** @see #saveFoodieBot(ReadOnlyFoodieBot) */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot, Path filePath, String modelType)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "lsjxavier": 4,
      "shaungoh97": 2,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedBudget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/** Jackson-friendly version of {@link Budget}. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final float totalBudget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final float remainingBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDateTime dateTimeOfCreation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate cycleRangeStart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate cycleRangeEnd;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Constructs a {@code JsonAdaptedBudget} with the given person details. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedBudget("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"totalBudget\") String totalBudget,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"remainingBudget\") String remainingBudget,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"budgetDuration\") String duration,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"dateTimeOfCreation\") String dateTimeOfCreation,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"cycleRangeStart\") String cycleRangeStart,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"cycleRangeEnd\") String cycleRangeEnd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        float remainingBudget1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        float totalBudget1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            totalBudget1 \u003d Float.parseFloat(totalBudget);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            remainingBudget1 \u003d Float.parseFloat(remainingBudget);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (NumberFormatException | NullPointerException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new IllegalValueException(ex.getLocalizedMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                totalBudget1 \u003d (float) 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                remainingBudget1 \u003d (float) 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.remainingBudget \u003d remainingBudget1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.totalBudget \u003d totalBudget1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateTimeOfCreation \u003d LocalDateTime.parse(dateTimeOfCreation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRangeStart \u003d LocalDate.parse(cycleRangeStart);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.cycleRangeEnd \u003d LocalDate.parse(cycleRangeEnd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Converts a given {@code Budget} into this class for Jackson use. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        totalBudget \u003d source.getTotalBudget();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        remainingBudget \u003d source.getRemainingBudget();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        duration \u003d source.getDuration();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        dateTimeOfCreation \u003d source.getDateTimeOfCreation();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        cycleRangeStart \u003d source.getCycleRange().getStartDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        cycleRangeEnd \u003d source.getCycleRange().getEndDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Converts a given {@code Budget} into this class for Jackson use. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedBudget(ReadOnlyFoodieBot foodieBot) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this(foodieBot.getBudget());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Converts this Jackson-friendly adapted person object into the model\u0027s {@code Budget} object. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public FoodieBot toModelType() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Budget budget \u003d new Budget(totalBudget, remainingBudget, duration, dateTimeOfCreation,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                cycleRangeStart, cycleRangeEnd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBot.setBudget(budget);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 18,
      "leslieharland": 16,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedCanteen.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/** Jackson-friendly version of {@link Canteen}. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedCanteen {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Canteen\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int numberOfStalls;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String nearestBlockName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int distance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String directionsImageName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String canteenImageName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String directionsText;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Constructs a {@code JsonAdaptedCanteen} with the given person details. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedCanteen("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"distance\") String distance,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"numberOfStalls\") String numberOfStalls,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"nearestBlockName\") String nearestBlockName,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"directionsImageName\") String directionsImageName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"canteenImageName\") String canteenImageName,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"directionsText\") String directionsText,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfStalls \u003d Integer.parseInt(numberOfStalls);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nearestBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.distance \u003d Integer.parseInt(distance);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.directionsImageName \u003d directionsImageName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenImageName \u003d canteenImageName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.directionsText \u003d directionsText;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Converts a given {@code Canteen} into this class for Jackson use. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedCanteen(Canteen source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        numberOfStalls \u003d source.getNumberOfStalls();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        nearestBlockName \u003d source.getBlockName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        distance \u003d source.getDistance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        directionsImageName \u003d source.getDirectionImageName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        canteenImageName \u003d source.getCanteenImageName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        directionsText \u003d source.getDirectionsText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Canteen} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Canteen toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e canteenTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            canteenTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final int modelNumberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final String modelBlockName \u003d nearestBlockName;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (modelBlockName \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Block\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(canteenTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Canteen(modelName, modelNumberOfStalls, distance, modelBlockName, directionsImageName,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            directionsText, modelTags, canteenImageName, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "/** Jackson-friendly version of {@link Food}. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final int price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String foodImageName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String canteen;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final String stallName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final int stallNo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Constructs a {@code JsonAdaptedFood} with the given person details. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public JsonAdaptedFood("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"foodImageName\") String foodImageName,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"stallNo\") String stallNo,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"canteen\") String canteen,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"stallName\") String stallName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.price \u003d Integer.parseInt(price);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodImageName \u003d foodImageName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallNo \u003d Integer.parseInt(stallNo);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallName \u003d stallName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /** Converts a given {@code Food} into this class for Jackson use. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.price \u003d source.getPrice();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodImageName \u003d source.getFoodImage().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallNo \u003d source.getStallNo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.canteen \u003d source.getCanteen();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallName \u003d source.getStallName();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        final String modelName \u003d name;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        final String modelStallName \u003d stallName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return new Food(modelName, price, description, foodImageName, stallNo,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "               canteen, modelStallName, getTagSet(\"1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 93
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedPurchasedFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Jackson-friendly version of {@link PurchasedFood}. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class JsonAdaptedPurchasedFood {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final int price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String foodImageName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String canteen;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String stallName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final int stallNo;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    // Transaction fields"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalDate dateAdded;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final LocalTime timeAdded;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final String review;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a {@code JsonAdaptedPurchasedFood} with the given person details. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonAdaptedPurchasedFood("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"foodImageName\") String foodImageName,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"stallNo\") String stallNo,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"canteen\") String canteen,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"stallName\") String stallName,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"dateAdded\") String dateAdded,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"timeAdded\") String timeAdded,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            @JsonProperty(\"review\") String review) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.price \u003d Integer.parseInt(price);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.foodImageName \u003d foodImageName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.stallNo \u003d Integer.parseInt(stallNo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.stallName \u003d stallName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateAdded \u003d LocalDate.parse(dateAdded);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.timeAdded \u003d LocalTime.parse(timeAdded).withNano(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d review;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Converts a given {@code PurchasedFood} into this class for Jackson use. */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonAdaptedPurchasedFood(PurchasedFood source) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.price \u003d source.getPrice();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.description \u003d source.getDescription();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.foodImageName \u003d source.getFoodImage().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.stallNo \u003d source.getStallNo();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.canteen \u003d source.getCanteen();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.stallName \u003d source.getStallName();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.dateAdded \u003d source.getDateAdded();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.timeAdded \u003d source.getTimeAdded();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.rating \u003d source.getRating().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.review \u003d source.getReview().toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code PurchasedFood} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public PurchasedFood toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        final String modelName \u003d name;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        final String modelStallName \u003d stallName;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Rating pfRating \u003d rating.equals(Rating.NO_RATING)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? new Rating()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : new Rating(Integer.parseInt(rating));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        Review pfReview \u003d review.equals(Rating.NO_RATING)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                ? new Review()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                : new Review(review);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return new PurchasedFood(modelName, price, description, foodImageName, stallNo,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                canteen, modelStallName, getTagSet(\"1\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                dateAdded, timeAdded, pfRating, pfReview);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 124
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonAdaptedStall.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/** Jackson-friendly version of {@link Stall}. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedStall {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Stall\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String canteenName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int stallNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String stallImageName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String cuisine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String overallPriceRating;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int favorite;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final Set\u003cJsonAdaptedTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Constructs a {@code JsonAdaptedStall} with the given person details. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedStall("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"canteenName\") String canteenName,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"stallNumber\") String stallNumber,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"stallImageName\") String stallImageName,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"cuisine\") String cuisine,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"overallPriceRating\") String overallPriceRating,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"favorite\") String favorite,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            @JsonProperty(\"tagged\") Set\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallNumber \u003d Integer.parseInt(stallNumber);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d canteenName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallImageName \u003d stallImageName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.overallPriceRating \u003d overallPriceRating;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.favorite \u003d Integer.parseInt(favorite);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Converts a given {@code Stall} into this class for Jackson use. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedStall(Stall source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        stallNumber \u003d source.getStallNumber();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d source.getCanteenName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallImageName \u003d source.getStallImageName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisine \u003d source.getCuisine();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.overallPriceRating \u003d source.getOverallPriceRating();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.favorite \u003d source.getFavorite();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        tags.addAll("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Stall} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     person."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stall toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //    throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final String modelCanteenName \u003d canteenName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Stall(modelName, modelCanteenName, stallNumber, stallImageName, cuisine,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                overallPriceRating, favorite, tags, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 19,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonFoodieBotStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonFoodieBotStorage implements FoodieBotStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFoodieBotStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path canteensFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path stallsFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Path favoritesFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path budgetFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Path foodFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Path transactionsFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonFoodieBotStorage(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteensFilePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public JsonFoodieBotStorage(Path stallsFilePath, Path budgetFilePath, Path foodFilePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallsFilePath \u003d stallsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.budgetFilePath \u003d budgetFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodFilePath \u003d foodFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonFoodieBotStorage(Path canteensFilePath, Path stallsFilePath, Path budgetFilePath,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Path foodFilePath, Path favoritesFilePath, Path transactionsFilePath) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.canteensFilePath \u003d canteensFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.stallsFilePath \u003d stallsFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.budgetFilePath \u003d budgetFilePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foodFilePath \u003d foodFilePath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favoritesFilePath \u003d favoritesFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.transactionsFilePath \u003d transactionsFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getCanteensFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return canteensFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStallsFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return stallsFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public Path getFoodFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return foodFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFavoritesFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return favoritesFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getTransactionsFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return transactionsFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getBudgetFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return budgetFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(String modelType) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return readFoodieBot(getModelFilePath(modelType), modelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readFoodieBot(String modelType)}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(Path filePath, String modelType) throws DataConversionException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Canteen\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cJsonSerializableFoodieBot\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableFoodieBot.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (jsonAddressBook.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"FavoriteFood\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Optional\u003cJsonSerializableFavorites\u003e json1 \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    JsonSerializableFavorites.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (json1.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                return Optional.of(json1.get().toModelType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Stall\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cJsonSerializableStall\u003e json2 \u003d JsonUtil.readJsonFile(filePath, JsonSerializableStall.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (json2.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.of(json2.get().toModelType());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Budget\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cJsonAdaptedBudget\u003ejsonAdaptedBudget \u003d JsonUtil.readJsonFile(filePath, JsonAdaptedBudget.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (jsonAdaptedBudget.isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAdaptedBudget.get().toModelType());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        case \"Food\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            Optional\u003cJsonSerializableFood\u003e json3 \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    JsonSerializableFood.class);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (json3.isEmpty()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                return Optional.of(json3.get().toModelType());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"Transactions\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            Optional\u003cJsonSerializableTransactions\u003e jsonTransactions \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    JsonSerializableTransactions.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (jsonTransactions.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                return Optional.of(jsonTransactions.get().toModelType());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getModelFilePath(String modelType) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Canteen\":"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UserPrefs().getFoodieBotFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Stall\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UserPrefs().getStallsFilePath();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Budget\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UserPrefs().getBudgetFilePath();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        case \"Food\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return new UserPrefs().getFoodFilePath();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"FavoriteFood\":"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return new UserPrefs().getFavoriteFoodFilePath();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"Transactions\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return new UserPrefs().getTransactionsFilePath();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyFoodieBot} to the storage."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param foodieBot cannot be null."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFoodieBot(foodieBot, \"Canteen\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Save foodiebot according to the model supplied."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot, String modelType) throws IOException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        saveFoodieBot(foodieBot, getModelFilePath(modelType), modelType);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveFoodieBot(ReadOnlyFoodieBot)}."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * TIP: When adding a new entity, a new {@code JsonSerialiablexxx} needs to be created"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * and filePath has to be specified in {@link JsonFoodieBotStorage}."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFoodieBot("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyFoodieBot foodieBot, Path filePath,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String modelType) throws IOException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (modelType) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Canteen\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFoodieBot(foodieBot), filePath);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Stall\":"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableStall(foodieBot), filePath);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        case \"Budget\":"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonAdaptedBudget(foodieBot), filePath);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        case \"Food\":"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFood(foodieBot), filePath);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        case \"FavoriteFood\":"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFavorites(foodieBot), filePath);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        case \"Transactions\":"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableTransactions(foodieBot), filePath);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(foodieBot);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            JsonUtil.saveJsonFile(new JsonSerializableFoodieBot(foodieBot), filePath);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 33,
      "lsjxavier": 38,
      "shaungoh97": 30,
      "-": 172
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableFavorites.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An Immutable AddressBook that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@JsonRootName(value \u003d \"favoriteList\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableFavorites {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FAVORITE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Food list contains duplicate favorites(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e favoriteList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonSerializableAddressBook} with the given stalls. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableFavorites(@JsonProperty(\"favoriteList\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.favoriteList.addAll(foods);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public JsonSerializableFavorites(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        favoriteList.addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                source.getFavoriteList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : favoriteList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (foodieBot.hasFood(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FAVORITE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            foodieBot.addFavoriteFood(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 61
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableFood.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** An Immutable FoodieBot that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "@JsonRootName(value \u003d \"foods\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "class JsonSerializableFood {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \"Food list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Constructs a {@code JsonSerializableFoodieBot} with the given stalls. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public JsonSerializableFood(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodieBot} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *     JsonSerializableFoodieBot}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public JsonSerializableFood(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        foods.addAll("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                source.getFoodList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Converts this address book into the model\u0027s {@code FoodieBot} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            if (foodieBot.hasFood(food)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            foodieBot.addFood(food);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "shaungoh97": 56
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/JsonSerializableTransactions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** An Immutable FoodieBot that is serializable to JSON format. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "@JsonRootName(value \u003d \"transactions\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class JsonSerializableTransactions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final List\u003cJsonAdaptedPurchasedFood\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Constructs a {@code JsonSerializableTransactions} with the given stalls. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonSerializableTransactions(@JsonProperty(\"transactions\") List\u003cJsonAdaptedPurchasedFood\u003e transactions) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.transactions.addAll(transactions);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Converts a given {@code ReadOnlyFoodieBot} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *     JsonSerializableFoodieBot}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public JsonSerializableTransactions(ReadOnlyFoodieBot source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        transactions.addAll("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                source.getTransactionsList().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .map(JsonAdaptedPurchasedFood::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Converts this address book into the model\u0027s {@code FoodieBot} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public FoodieBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        for (JsonAdaptedPurchasedFood jsonAdaptedPurchasedFood : transactions) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            PurchasedFood purchasedFood \u003d jsonAdaptedPurchasedFood.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            foodieBot.addPurchasedFood(purchasedFood);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return foodieBot;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 54
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/** API of the Storage component */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends FoodieBotStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //Path getFoodieBotFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "shaungoh97": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/** Manages storage of AddressBook data in local storage. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private FoodieBotStorage foodieBotStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(FoodieBotStorage foodieBotStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.foodieBotStorage \u003d foodieBotStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(FoodieBotStorage foodieBotStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.foodieBotStorage \u003d foodieBotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    //    TODO Not Implemented"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //    return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getCanteensFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBotStorage.getCanteensFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStallsFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBotStorage.getStallsFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path getFavoritesFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return foodieBotStorage.getFavoritesFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public Path getFoodFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return foodieBotStorage.getFoodFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getTransactionsFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return foodieBotStorage.getTransactionsFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public Path getBudgetFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return foodieBotStorage.getBudgetFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(String modelType) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return readFoodieBot(foodieBotStorage.getModelFilePath(modelType), modelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyFoodieBot\u003e readFoodieBot(Path filePath, String modelType)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBotStorage.readFoodieBot(modelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getModelFilePath(String modelType) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return foodieBotStorage.getModelFilePath(modelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBotStorage.saveFoodieBot(foodieBot, foodieBotStorage.getCanteensFilePath(), \"Canteen\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot, String modelType) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBotStorage.saveFoodieBot(foodieBot, modelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveFoodieBot(ReadOnlyFoodieBot foodieBot, Path filePath, String modelType) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBotStorage.saveFoodieBot(foodieBot, filePath, modelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "lsjxavier": 10,
      "shaungoh97": 10,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/BaseScene.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ActionCommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.logic.commands.BackCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.DirectionsCommandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Base class for creating a javafx scene."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class BaseScene {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected Stage primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private VBox vbox;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private VBox stallList;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private Label topLabel;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    private Label bottomLabel;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private ProgressBar budgetTracker;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public BaseScene(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPinnedItem(false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void addToListPanel(UiPart\u003cRegion\u003e regionUiPart) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#listPanelPlaceholder\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(regionUiPart.getRoot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * Clears the extraListPanel and adds the regionUiPart"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     * @param regionUiPart"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    void addToExtraListPanel(UiPart\u003cRegion\u003e regionUiPart) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane extraListPanelPlaceholder \u003d (StackPane) primaryStage.getScene().lookup("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \"#extraListPanelPlaceholder\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        extraListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        extraListPanelPlaceholder.getChildren().add(regionUiPart.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandBoxPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#commandBoxPlaceholder\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        statusbarPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#statusbarPlaceholder\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandBox.getCommandTextField().requestFocus();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        vbox \u003d (VBox) primaryStage.getScene().lookup(\"#vbox\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stallList \u003d (VBox) primaryStage.getScene().lookup(\"#stallList\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateStatusFooter(String message) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        statusbarPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#statusbarPlaceholder\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        statusbarPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        statusbarPlaceholder.getChildren().add(new Label(message));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    StackPane getResultDisplayPlaceholder() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        resultDisplayPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#resultDisplayPlaceholder\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ResultDisplay getResultDisplay() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateResultDisplay(String result) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        resultDisplayPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#resultDisplayPlaceholder\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!result.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            getResultDisplay().setFeedbackToUser(result);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param budget"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    void updateResultDisplayBudget(String result, Budget budget) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        resultDisplayPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#resultDisplayPlaceholder\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (!result.isEmpty()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            getResultDisplay().setFeedbackToUser(result, budget);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * /"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @param result"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void updateResultDisplayContextAware(String result) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!ParserContext.getCurrentContext().equals(ParserContext.DIRECTIONS_CONTEXT)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            updateResultDisplay(result);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Fills the stallListPanelRegion */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListStalls() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        Canteen cureentCanteen \u003d ParserContext.getCurrentCanteen().get();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPinnedItem(false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        VBox stallList \u003d (VBox) loadFxmlFile(\"PinnedItem.fxml\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel \u003d (Label) primaryStage.getScene().lookup(\"#topLabel\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel.setText(\"List of Stalls in \" + cureentCanteen.getName());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        vbox.getChildren().add(vbox.getChildren().size() - 1, stallList);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new StallsListPanel(logic.getFilteredStallList(true)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        addToExtraListPanel(new CanteenListPanel(FXCollections.observableArrayList("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.getCurrentCanteen().get()), false));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        bottomLabel \u003d (Label) primaryStage.getScene().lookup(\"#bottomLabel\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListFood() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        Stall currentStall \u003d ParserContext.getCurrentStall().get();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel.setText(\"List of Foods in \" + currentStall.getName());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (!ParserContext.getPreviousContext().equals(\"RANDOMIZE\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            bottomLabel \u003d (Label) primaryStage.getScene().lookup(\"#bottomLabel\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            bottomLabel.setText(\"Current Stall\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new FoodListPanel(logic.getFilteredFoodList(true)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        addToExtraListPanel(new StallsListPanel(FXCollections.observableArrayList("
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            ParserContext.getCurrentStall().get())));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListFavorites() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        changeScene(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new BaseScene(primaryStage, logic);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane extraListPanelPlaceholder \u003d (StackPane) primaryStage.getScene().lookup("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"#extraListPanelPlaceholder\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (extraListPanelPlaceholder !\u003d null) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            extraListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel \u003d (Label) primaryStage.getScene().lookup(\"#topLabel\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel.setText(\"List of Favorites\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new FoodListPanel(logic.getFilteredFavoriteFoodList(false)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListCanteens(CommandResult commandResult) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        changeScene(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new MainScene(primaryStage, logic);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel \u003d (Label) primaryStage.getScene().lookup(\"#topLabel\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel.setText(\"List of Canteens in NUS\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new CanteenListPanel("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            commandResult.isLocationSpecified()"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                ? logic.getFilteredCanteenListSortedByDistance()"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                : logic.getFilteredCanteenList(), commandResult.isLocationSpecified()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPinnedItem(false);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** .*/"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void showPinnedItem(boolean value) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!value) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (vbox !\u003d null) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                vbox.getChildren().remove(stallList);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void handleListTransactions() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // changeScene(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // new MainScene(primaryStage, logic);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel.setText(\"List of Transactions\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        addToListPanel(new TransactionsPanel(logic.getFilteredTransactionsList()));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Fills the randomize panel. */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public void handleListRandomize() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        changeScene(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new BaseScene(primaryStage, logic);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel \u003d (Label) primaryStage.getScene().lookup(\"#topLabel\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        topLabel.setText(\"Randomize Option: \");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        addToListPanel(new RandomizeListPanel(logic.getFilteredRandomizeList()));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * The method passed from logic to UI."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        topLabel \u003d (Label) primaryStage.getScene().lookup(\"#topLabel\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            switch (commandResult.commandName) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                handleListCanteens(commandResult);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case GoToCanteenCommand"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    .COMMAND_WORD:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (commandResult instanceof DirectionsCommandResult \u0026\u0026 ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    .equals(ParserContext.MAIN_CONTEXT)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    //new DirectionsWindowScene(getPrimaryStage(), logic, (DirectionsCommandResult) commandResult)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    // .show();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    VBox pane \u003d (VBox) loadFxmlFile(\"NoResultDisplayScene.fxml\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    /* This is a negative example to load ui"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    Scene scene \u003d new Scene(pane); // optionally specify dimensions too"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    getPrimaryStage().setScene(scene);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    ParserContext.setCurrentContext(ParserContext.DIRECTIONS_CONTEXT);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    primaryStage.getScene().setRoot(pane);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    new DirectionsScene(primaryStage, logic, (DirectionsCommandResult) commandResult);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case EnterCanteenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (ParserContext.getCurrentContext().equals(ParserContext.MAIN_CONTEXT)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 ParserContext.getCurrentCanteen().isPresent()) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListStalls();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                } else if (ParserContext.getCurrentContext().equals(ParserContext.CANTEEN_CONTEXT)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u0026\u0026 ParserContext.getCurrentStall().isPresent()) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListFood();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                } else if (ParserContext.getCurrentContext().equals(ParserContext.RANDOMIZE_CONTEXT)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        \u0026\u0026 ParserContext.getCurrentStall().isPresent()) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    handleListFood();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            case FavoritesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                assert commandResult instanceof ActionCommandResult;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                switch (((ActionCommandResult) commandResult).action) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case \"view\":"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListFavorites();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case \"set\":"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case \"remove\":"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListFavorites();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case TransactionsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                handleListTransactions();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case ReportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                changeScene(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                // VBox pane \u003d (VBox) loadFxmlFile(\"NoResultDisplayScene.fxml\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                // primaryStage.getScene().setRoot(pane);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                new ReportScene(primaryStage, logic);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                handleListTransactions();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                updateResultDisplayBudget(commandResult.getFeedbackToUser(), logic.getFoodieBot().getBudget());"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case RateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                handleListTransactions();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            case ReviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                handleListTransactions();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            case RandomizeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                handleListRandomize();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            case SelectItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                updateResultDisplayBudget(commandResult.getFeedbackToUser(), logic.getFoodieBot().getBudget());"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                topLabel.setText(\"\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                switch (ParserContext.getCurrentContext()) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case ParserContext.MAIN_CONTEXT:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListCanteens(commandResult);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case ParserContext.CANTEEN_CONTEXT:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListStalls();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                case ParserContext.RANDOMIZE_CONTEXT:"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    handleListRandomize();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case ParserContext.DIRECTIONS_CONTEXT:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListCanteens(commandResult);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case ParserContext.FAVORITE_CONTEXT:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    switch (ParserContext.getPreviousContext()) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    case ParserContext.STALL_CONTEXT:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        handleListStalls();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        handleListCanteens(commandResult);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                case ParserContext.STALL_CONTEXT:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    handleListFood();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplayContextAware(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                updateResultDisplay(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            updateResultDisplayContextAware(e.getMessage());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Switches the scene of the stage by setting the root."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void changeScene(String layoutName) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.getScene().setRoot(loadFxmlFile(layoutName));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void handleHelp() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected Parent loadFxmlFile(String fxmlFileName) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FXMLLoader newLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        newLoader.setLocation(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        newLoader.setController(this);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return newLoader.load();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 358,
      "lsjxavier": 29,
      "Samanthaseahpl": 19,
      "shaungoh97": 30,
      "ignatiusong": 50
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/CanteenCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/** An UI component that displays information of a {@code Canteen}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CanteenCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CanteenListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *     AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Canteen canteen;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private ImageView iv;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label numberOfStalls;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label distance;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML private Label distanceText;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label nearestBlockName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenCard(Canteen canteen, int displayedIndex, boolean showDistanceField) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        iv.setImage(canteen.getCanteenImage());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(canteen.getName().fullName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        nearestBlockName.setText(canteen.getBlockName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        numberOfStalls.setText(String.valueOf(canteen.getNumberOfStalls()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        distance.setText(String.valueOf(canteen.getDistance()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distance.setVisible(showDistanceField);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        distanceText.setVisible(showDistanceField);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        nearestBlockName.setVisible(showDistanceField);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        canteen.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CanteenCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        CanteenCard card \u003d (CanteenCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 canteen.equals(card.canteen);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/CanteenListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/** Panel containing the list of canteens. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CanteenListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CanteenListPanel.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private ListView\u003cCanteen\u003e simpleListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public CanteenListPanel(ObservableList\u003cCanteen\u003e canteenList, boolean showDistanceField) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleListView.setItems(canteenList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new CanteenListViewCell(showDistanceField));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListView\u003cCanteen\u003e getSimpleListView() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return simpleListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Canteen} using a {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * CanteenCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    class CanteenListViewCell extends ListCell\u003cCanteen\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final boolean showDistanceField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        protected CanteenListViewCell(boolean showDistanceField) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            this.showDistanceField \u003d showDistanceField;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Canteen canteen, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(canteen, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || canteen \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setGraphic(new CanteenCard(canteen, getIndex() + 1, showDistanceField).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static java.util.logging.Level.INFO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.fxmisc.richtext.InlineCssTextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Block;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected boolean match \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected boolean suggested \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected String lastMatch \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private InlineCssTextField commandTextField;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String pattern \u003d \"goto [a-zA-Z0-9\\\\s}]+ f\\\\/[a-zA-Z0-9]+\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (suggested \u0026 commandTextField.getText().matches(pattern)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String text \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        text \u003d commandTextField.getText().substring(commandTextField.getText().indexOf(\u0027/\u0027) + 1,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            commandTextField.getText().indexOf(\u0027/\u0027) + 2 + lastMatch.length());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    } catch (IndexOutOfBoundsException ex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        logger.fine(ex.getLocalizedMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    String userEntered \u003d commandTextField.getText().substring(0,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        commandTextField.getText().indexOf(\u0027/\u0027) + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    logger.log(INFO, \"text \" + text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    this.match \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    suggested \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    for (String s : Block.BLOCKS) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        if (s.toLowerCase().startsWith(text.stripLeading().toLowerCase())) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            logger.log(INFO, \"new \" + newValue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            lastMatch \u003d text;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            logger.log(INFO, \"lastMatch \" + lastMatch);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            if (lastMatch.length() \u003e s.length()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                continue;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            String temp \u003d userEntered.concat(lastMatch.toLowerCase())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                .concat(s.substring(lastMatch.length()).toLowerCase());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            commandTextField.setText(temp);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            commandTextField.setStyle(0, commandTextField.getText()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                    .indexOf(\u0027/\u0027) + 1 + lastMatch.length(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                \"-fx-fill: #fff;\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            commandTextField.setStyle(commandTextField.getText().indexOf(\u0027/\u0027) + 1 + lastMatch.length(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                commandTextField.getText().length(), \"-fx-fill: #696969;\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                if (event.getCode() \u003d\u003d KeyCode.BACK_SPACE) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                    String current \u003d commandTextField.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                    if (commandTextField.getText().indexOf(\"/\") \u003e 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        suggested \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        lastMatch \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        commandTextField.setText(current.substring(0, current.indexOf(\"/\") + 1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                    } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        this.match \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        if (!lastMatch.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                            lastMatch \u003d lastMatch.substring(0, lastMatch.length() - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            this.match \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    if (!suggested) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        suggested \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    if (!match) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        text \u003d commandTextField.getText().substring(commandTextField.getText().indexOf(\u0027/\u0027) + 1,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                            commandTextField.getText().indexOf(\u0027/\u0027) + 2 + lastMatch.length());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        String temp \u003d userEntered.concat(text);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        commandTextField.setText(temp);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        suggested \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public InlineCssTextField getCommandTextField() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return commandTextField;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandTextField.setStyle(0, commandTextField.getText().length(), \"-fx-fill: #fff\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandTextField.setStyle(0, commandTextField.getText().length(), \"-fx-fill: #d06651\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.BACK_SPACE) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                setStyleToDefault();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        });"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.foodiebot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 108,
      "Samanthaseahpl": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/DirectionsScene.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.DirectionsCommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** DirectionsScene class for creating a javafx scene. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class DirectionsScene extends BaseScene {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public DirectionsScene(Stage primaryStage, Logic logic, DirectionsCommandResult commandResult) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(primaryStage, logic);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        handleGoToCanteen(commandResult);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the directionsToCanteen region."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleGoToCanteen(DirectionsCommandResult commandResult) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DirectionsToCanteenPanel directionsToCanteenPanel \u003d new DirectionsToCanteenPanel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(directionsToCanteenPanel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        directionsToCanteenPanel.fillView(commandResult.canteen);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 32
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/DirectionsToCanteenPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/** An UI component that displays information of a {@code Canteen}. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DirectionsToCanteenPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DirectionsToCanteenPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"DirectionsToCanteenCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *     AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Canteen canteen;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private HBox id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private ImageView iv;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label textArea;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public DirectionsToCanteenPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void fillView(Canteen canteen) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteen \u003d canteen;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        iv.setImage(canteen.getDirectionImage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        textArea.setText(canteen.getDirectionsText());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof DirectionsToCanteenPanel)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DirectionsToCanteenPanel card \u003d (DirectionsToCanteenPanel) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return canteen.equals(card.canteen);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/FoodCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private ImageView iv;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Label stallName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //private Label cuisine;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        iv.setImage(food.getFoodImage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        name.setText(food.getName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        price.setText(\"$\" + food.getPrice());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        stallName.setText(food.getStallName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        description.setText(food.getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 71
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/FoodListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": " * Panel containing the list of foods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    private ListView\u003cFood\u003e simpleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        simpleListView.setItems(foodList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListView\u003cFood\u003e getSimpleListView() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return simpleListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * FoodCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "shaungoh97": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/** Controller for a help page */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-F11-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Button copyButton;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private Label helpMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates a new HelpWindow. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003cli\u003eif this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003cli\u003eif this method is called during animation or layout processing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003cli\u003eif this method is called on the primary stage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/ul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns true if the help window is currently being shown. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Hides the help window. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Focuses on the help window. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Copies the URL to the user guide to the clipboard. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void copyUrl() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/MainScene.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Main Scene without calling a new window. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class MainScene extends BaseScene {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CanteenListPanel canteenListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public MainScene(Stage primaryStage, Logic logic, MenuItem helpMenuItem) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(primaryStage, logic);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.helpMenuItem \u003d helpMenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public MainScene(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(primaryStage, logic);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** . */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super.fillInnerParts();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        canteenListPanel \u003d new CanteenListPanel(logic.getFilteredCanteenList(), false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(canteenListPanel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getResultDisplayPlaceholder().getChildren().add(getResultDisplay().getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        showPinnedItem(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void handleHelp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super.handleHelp();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super.handleExit();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 41
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class MainWindow extends NoResultDisplayWindow {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CanteenListPanel canteenListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(primaryStage, logic, FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.getScene().setRoot(loadFxmlFile(\"MainScene.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new MainScene(primaryStage, logic, helpMenuItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 5,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/NoResultDisplayWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class NoResultDisplayWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String FXML \u003d \"NoResultDisplayScene.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean isStallInitialised;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private boolean isFoodInitialised;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public NoResultDisplayWindow(Stage primaryStage, Logic logic, String layoutName) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(layoutName, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        init(primaryStage, logic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public NoResultDisplayWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        init(primaryStage, logic);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Runs the initialisation method. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void init(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isStallInitialised \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getRoot()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .addEventFilter("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                KeyEvent.KEY_PRESSED,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    if (event.getTarget() instanceof TextInputControl"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        getCommandBoxPlaceholder().getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StackPane getCommandBoxPlaceholder() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return commandBoxPlaceholder;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StackPane getListPanelPlaceholder() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return listPanelPlaceholder;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void addToListPanel(UiPart\u003cRegion\u003e regionUiPart) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder \u003d (StackPane) primaryStage.getScene().lookup(\"#listPanelPlaceholder\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listPanelPlaceholder.getChildren().add(regionUiPart.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the stallListPanel region."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListStalls() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new StallsListPanel(logic.getFilteredStallList(isStallInitialised)));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isStallInitialised \u003d true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListFood() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new FoodListPanel(logic.getFilteredFoodList(isFoodInitialised)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        isFoodInitialised \u003d true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Fills the foodListPanel region."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void handleListFavorites() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        addToListPanel(new FoodListPanel(logic.getFilteredFavoriteFoodList(false)));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected void handleExit() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        GuiSettings guiSettings \u003d"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new GuiSettings("
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                primaryStage.getWidth(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                primaryStage.getHeight(),"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                (int) primaryStage.getY());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * @see seedu.foodiebot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Parent pane \u003d loadFxmlFile(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            primaryStage.setScene(new Scene(pane));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (CommandException | ParseException | IOException e) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Parent pane \u003d loadFxmlFile(\"MainScene.fxml\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            primaryStage.setScene(new Scene(pane));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 246
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/RandomizeCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " * An UI component that displays information of a {@code Stall}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "public class RandomizeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private static final String FXML \u003d \"RandomizeCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public final Stall stall;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private ImageView iv;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Label canteenName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Label stallNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Label cuisine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private Label overallPriceRating;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeCard(Stall stall, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        this.stall \u003d stall;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        iv.setImage(stall.getStallImage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        canteenName.setText(stall.getCanteenName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        name.setText(stall.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        stallNumber.setText(String.valueOf(stall.getStallNumber()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        cuisine.setText(stall.getCuisine());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        overallPriceRating.setText(stall.getOverallPriceRating());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            stall.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        if (!(other instanceof RandomizeCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        RandomizeCard card \u003d (RandomizeCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 stall.equals(card.stall);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 85
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/RandomizeListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "/** Panel containing the list of Stall. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "public class RandomizeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RandomizeListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    private ListView\u003cStall\u003e simpleListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public RandomizeListPanel(ObservableList\u003cStall\u003e stallList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        simpleListView.setItems(stallList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new RandomizeListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    public ListView\u003cStall\u003e getSimpleListView() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        return simpleListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Stall} using a {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     * StallCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    class RandomizeListViewCell extends ListCell\u003cStall\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        protected void updateItem(Stall stall, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            super.updateItem(stall, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            if (empty || stall \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                setGraphic(new RandomizeCard(stall, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/ReportPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** A UI component that displays information of a {@code Report}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class ReportPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReportPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String FXML \u003d \"ReportCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Report report;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML private HBox id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML private Label textArea;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ReportPanel() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Fills the view with the report. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void fillView(Report report) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.report \u003d report;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        textArea.setText(report.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof ReportPanel)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ReportPanel card \u003d (ReportPanel) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return report.equals(card.report);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 48,
      "leslieharland": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/ReportScene.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** ReportScene class for creating a javafx scene. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class ReportScene extends BaseScene {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public ReportScene(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(primaryStage, logic);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        handleReport(logic.getReport());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Fills the handleReport region."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void handleReport(Report report) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ReportPanel reportPanel \u003d new ReportPanel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        addToListPanel(reportPanel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        reportPanel.fillView(report);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 33
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/** A ui for the status bar that is displayed at the header of the application. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML private Label budgetLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML private ProgressBar budgetTrackerHigh;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    @FXML private ProgressBar budgetTrackerLow;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetLabel.setVisible(false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetTrackerHigh.setVisible(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetTrackerLow.setVisible(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetLabel.setVisible(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetTrackerHigh.setVisible(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetTrackerLow.setVisible(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser, Budget budget) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        budgetLabel.setVisible(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        float progress \u003d budget.getRemainingBudget() / budget.getTotalBudget();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        if (progress \u003c 0.25) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerLow.setProgress(progress);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerHigh.setProgress(progress);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerHigh.setVisible(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerLow.setVisible(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerLow.setProgress(progress);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerHigh.setProgress(progress);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerHigh.setVisible(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            budgetTrackerLow.setVisible(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 33,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/StallCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Stall}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StallCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StallListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Stall stall;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ImageView iv;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label stallNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label cuisine;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label overallPriceRating;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallCard(Stall stall, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stall \u003d stall;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        iv.setImage(stall.getStallImage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(stall.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        stallNumber.setText(String.valueOf(stall.getStallNumber()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        cuisine.setText(stall.getCuisine());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        overallPriceRating.setText(stall.getOverallPriceRating());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            stall.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof StallCard)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StallCard card \u003d (StallCard) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 stall.equals(card.stall);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "ignatiusong": 11
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/StallsListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of stalls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StallsListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StallsListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cStall\u003e simpleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallsListPanel(ObservableList\u003cStall\u003e stallList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleListView.setItems(stallList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new StallListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListView\u003cStall\u003e getSimpleListView() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return simpleListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Stall} using a {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * CanteenCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    class StallListViewCell extends ListCell\u003cStall\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Stall stall, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(stall, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || stall \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new StallCard(stall, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/TransactionsCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * A UI component that displays information of a {@code PurchasedFood}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TransactionsCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String FXML \u003d \"TransactionsCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public final PurchasedFood food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ImageView iv;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label stallName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label datePurchased;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label rating;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Label review;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public TransactionsCard(PurchasedFood food, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        iv.setImage(food.getFoodImage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        name.setText(food.getName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        price.setText(\"$\" + food.getPrice());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        stallName.setText(food.getStallName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        description.setText(food.getDescription());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        datePurchased.setText(\"Purchased: \" + food.getDateAdded() + \" at \" + food.getTimeAdded());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        rating.setText(\"Rating: \" + food.getRating().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        review.setText(\"Review: \" + food.getReview().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        if (!(other instanceof TransactionsCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        TransactionsCard card \u003d (TransactionsCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 78
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/TransactionsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " * Panel containing the list of purchased foods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TransactionsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static final String FXML \u003d \"SimpleListViewPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransactionsPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private ListView\u003cPurchasedFood\u003e simpleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public TransactionsPanel(ObservableList\u003cPurchasedFood\u003e foodList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        simpleListView.setItems(foodList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        simpleListView.setCellFactory(listView -\u003e new TransactionsPanel.TransactionListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ListView\u003cPurchasedFood\u003e getSimpleListView() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return simpleListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PurchasedFood} using a {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     * TransactionsCard}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    class TransactionListViewCell extends ListCell\u003cPurchasedFood\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        protected void updateItem(PurchasedFood food, boolean empty) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                setGraphic(new TransactionsCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 47,
      "leslieharland": 5
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/** The manager of the UI component. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Stage owner, AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 82,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/main/java/seedu/foodiebot/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the root object of the scene graph of this UiPart. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Creates a new instance of FXMLLoader without regard to the class using it. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected Parent loadFxmlFile(String fxmlFileName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FXMLLoader newLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        newLoader.setLocation(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        newLoader.setController(this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return newLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/CanteenListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cLabel fx:id\u003d\"distance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$distance\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "          \u003cLabel fx:id\u003d\"distanceText\" styleClass\u003d\"cell_small_label\" text\u003d\"m from\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cLabel fx:id\u003d\"nearestBlockName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nearestBlockName\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel text\u003d\"Food Stalls: \" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"numberOfStalls\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numberOfStalls\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 7,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import org.fxmisc.richtext.InlineCssTextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "  \u003cInlineCssTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" minHeight\u003d\"40\" prefHeight\u003d\"40\" styleClass\u003d\"styled-text-area\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "#bottomLabel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "#budgetLabel {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "#budgetTrackerHigh \u003e .track {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-text-box-border: forestgreen;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-control-inner-background: white;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "#budgetTrackerHigh \u003e .bar {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-background-color: palegreen;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "#budgetTrackerLow \u003e .track {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-text-box-border: forestgreen;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-control-inner-background: white;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "#budgetTrackerLow \u003e .bar {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    -fx-background-color: #ff3b31;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " background-color: #353535;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ".styled-text-area .text{"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    -fx-fill:#ffffff;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ".styled-text-area .caret{"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      -fx-stroke: white;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12,
      "shaungoh97": 24,
      "-": 353
    }
  },
  {
    "path": "src/main/resources/view/DirectionsToCanteenCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cHBox id\u003d\"id\" fx:id\u003d\"id\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cVBox nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cImageView fx:id\u003d\"iv\" fitWidth\u003d\"500.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c!--  prefHeight here is the height of the scrollbar--\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cScrollPane prefHeight\u003d\"100.0\" styleClass\u003d\"stack-pane\" stylesheets\u003d\"@DarkTheme.css\" prefWidth\u003d\"600\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                  \u003cVBox nodeOrientation\u003d\"LEFT_TO_RIGHT\" prefHeight\u003d\"150.0\" styleClass\u003d\"stack-pane\" \u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u003c!--  alternatively use spacing property in vbox --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u003cLabel fx:id\u003d\"viewBlock\" prefHeight\u003d\"30\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u003cLabel fx:id\u003d\"textArea\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 17,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cLabel fx:id\u003d\"stallName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stallName\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    \u003cLabel text\u003d\"Description: \" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 48
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainScene.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.stage.Screen?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cVBox fx:id\u003d\"vbox\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cMenuItem mnemonicParsing\u003d\"false\"  onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cLabel fx:id\u003d\"topLabel\" text\u003d\"List of Canteens in NUS\" textAlignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cVBox fx:id\u003d\"stallList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" minHeight\u003d\"150\" prefHeight\u003d\"150\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "          \u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cStackPane fx:id\u003d\"extraListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cVBox fx:id\u003d\"canteenList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 50,
      "ignatiusong": 19
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         title\u003d\"FoodieBot\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"canteenList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/Menu.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c/MenuBar\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16
    }
  },
  {
    "path": "src/main/resources/view/NoResultDisplayScene.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cVBox   styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u003cMenuItem mnemonicParsing\u003d\"false\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cVBox fx:id\u003d\"canteenList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 44
    }
  },
  {
    "path": "src/main/resources/view/PinnedItem.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003cVBox fx:id\u003d\"stallList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" minHeight\u003d\"150\" prefHeight\u003d\"150\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      alignment\u003d\"BOTTOM_CENTER\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \u003cLabel fx:id\u003d\"bottomLabel\" text\u003d\"Current Canteen\" textFill\u003d\"white\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    \u003cStackPane fx:id\u003d\"extraListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "ignatiusong": 6
    }
  },
  {
    "path": "src/main/resources/view/RandomizeCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"140.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"140.0\" fitWidth\u003d\"155.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"138.0\" prefWidth\u003d\"478.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"19.0\" prefWidth\u003d\"425.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "               \u003cLabel fx:id\u003d\"canteenName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$canteenName\" textFill\u003d\"#2e2d2d\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                   \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                       \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                       \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                   \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                   \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                     \u003cFont name\u003d\"Arial Rounded MT Bold\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"26.0\" prefWidth\u003d\"422.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" maxHeight\u003d\"40.0\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                  \u003cFont name\u003d\"Arial Black\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cHBox maxWidth\u003d\"393.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"393.0\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                   \u003cLabel text\u003d\"Stall Number :\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                   \u003cLabel fx:id\u003d\"stallNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stallNumber\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "               \u003cLabel maxWidth\u003d\"40.0\" minWidth\u003d\"40.0\" prefWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u003cLabel alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"RIGHT\" text\u003d\"Price Rating: \" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u003cLabel fx:id\u003d\"overallPriceRating\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$overallPriceRating\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003cHBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                        \u003cLabel fx:id\u003d\"cuisine\" prefWidth\u003d\"89.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numberOfStalls\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 74
    }
  },
  {
    "path": "src/main/resources/view/ReportCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003cHBox id\u003d\"id\" fx:id\u003d\"id\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \u003cVBox HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003c!--  prefHeight here is the height of the scrollbar--\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \u003cScrollPane fitToWidth\u003d\"true\" styleClass\u003d\"stack-pane\" vbarPolicy\u003d\"AS_NEEDED\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                        \u003cVBox styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                                \u003c!--  alternatively use spacing property in vbox --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                                \u003cLabel fx:id\u003d\"textArea\" styleClass\u003d\"label-bright\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 23,
      "leslieharland": 3,
      "shaungoh97": 3
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    \u003cProgressBar fx:id\u003d\"budgetTrackerHigh\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" progress\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "      \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         \u003cInsets left\u003d\"485.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "      \u003c/StackPane.margin\u003e\u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    \u003cProgressBar fx:id\u003d\"budgetTrackerLow\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" progress\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \u003cInsets left\u003d\"485.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        \u003c/StackPane.margin\u003e\u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    \u003cLabel fx:id\u003d\"budgetLabel\" text\u003d\"Budget\" textFill\u003d\"white\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "      \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "         \u003cInsets bottom\u003d\"50.0\" left\u003d\"485.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "      \u003c/StackPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 16,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StallListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003cHBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel text\u003d\"Stall Number :\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \u003cLabel fx:id\u003d\"stallNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stallNumber\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel text\u003d\"Price Rating: \" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"overallPriceRating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$overallPriceRating\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"cuisine\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$numberOfStalls\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 4,
      "-": 46,
      "ignatiusong": 9
    }
  },
  {
    "path": "src/main/resources/view/TransactionsCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003cImageView fx:id\u003d\"iv\" fitHeight\u003d\"150.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cLabel fx:id\u003d\"stallName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$stallName\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u003cLabel text\u003d\"Description: \" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                    \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cLabel fx:id\u003d\"datePurchased\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$datePurchased\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cLabel fx:id\u003d\"rating\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$rating\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cLabel fx:id\u003d\"review\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$review\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 51
    }
  },
  {
    "path": "src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person With Invalid Phone Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/test/data/JsonFoodieBotStorageTest/invalidPersonAddressBook.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \"email\": \"hans@example.com\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableFoodieBotTest/duplicatePersonAddressBook.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"alice@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \"email\": \"pauline@example.com\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableFoodieBotTest/invalidPersonAddressBook.json",
    "fileType": "json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    \"email\": \"invalid@email!3e\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ignatiusong": 1
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/MainAppTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.FoodieBotStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.ui.UiManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class MainAppTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new JsonFoodieBotStorage(Paths.get(\"foodiebot.json\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Paths.get(\"foodiebot-stalls\"), Paths.get(\"foodiebot-budget\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Paths.get(\"foodiebot-food\"), Paths.get(\"foodiebot-favorites\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Paths.get(\"foodiebot-transactions\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Storage storage \u003d new StorageManager(foodieBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private MainApp app \u003d new MainApp();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* @BeforeAll */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*public static void setUpClass() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //ApplicationTest.launch(MainApp.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        app.init();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert MainApp.getLogger() !\u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        app.model \u003d createSampleModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        app.storage \u003d storage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        app.logic \u003d new LogicManager(app.model, app.storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        app.ui \u003d new UiManager(app.logic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert app.model !\u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert app.storage !\u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(SampleDataUtil.getSampleFoodieBot(), createSamplePrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StorageManager createSampleStorage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new StorageManager(foodieBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public UserPrefs createSamplePrefs() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert app.ui !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void stop() throws TimeoutException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        release(new KeyCode[]{});"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        release(new MouseButton[]{});"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 78
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/MainTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class MainTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** No error is thrown on launch. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Exception exception \u003d null;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Main.main(args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            exception \u003d e;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotNull(Main.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNull(exception);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 18
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/MessagesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.lang.reflect.Field;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class MessagesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void messages_notBlank() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        boolean value \u003d true;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Field field : this.getClass().getDeclaredFields()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                field.setAccessible(true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                if (field.get(this) !\u003d null) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                    value \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                System.out.println(\"Exception occurred in processing\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 25
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/date/ConceptualDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ConceptualDateTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void enums_validNames() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(\"START_DATE\", ConceptualDate.START_DATE.name());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(\"END_DATE\", ConceptualDate.END_DATE.name());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 13
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/date/DateFormatterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateFormatterTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void formatDates() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid pattern \u0027-\u0027 -\u003e equals"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2019, 6, 15), formatValidDate(\"15-6-2019\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid pattern \u0027.\u0027 -\u003e equals"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2008, 1, 23), formatValidDate(\"23.1.2008\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid pattern \u0027/\u0027 -\u003e equals"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(1884, 2, 6), formatValidDate(\"6/2/1884\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with invalid pattern -\u003e throw"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"13,5,2000\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with valid 2-digit date (representing 2020), compare with 4-digit version -\u003e equals"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2020, 5, 19), formatValidDate(\"19/5/20\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format date with 4-digit date (in m/d/y), compare with 4-digit version (d/m/y) -\u003e not equals"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertNotEquals(LocalDate.of(2020, 3, 4), formatValidDate(\"3/4/2020\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (31/6/2020) -\u003e throws"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"31/6/2020\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (29/2/2019) -\u003e throws"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"29/2/2019\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (44/22/2020) -\u003e throws"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"44/22/2020\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format invalid date (some string) -\u003e throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidDate(\"string\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void formatMonths() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"jan\" -\u003e equals"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(Month.JANUARY.getValue(), formatValidMonth(\"jan\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"may\" -\u003e equals"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(Month.MAY.getValue(), formatValidMonth(\"May\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"september\" -\u003e equals"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(Month.SEPTEMBER.getValue(), formatValidMonth(\"september\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"test\" -\u003e throws"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidMonth(\"test\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"maybe\" -\u003e throws"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidMonth(\"maybe\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // format month \"junit\" -\u003e throws"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e formatInvalidMonth(\"junit\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Format a valid date. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static LocalDate formatValidDate(String string) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateFormatter.formatDate(string);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to format an invalid date. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static LocalDate formatInvalidDate(String string) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateFormatter.formatDate(string);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Format a valid month. */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static int formatValidMonth(String string) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateFormatter.formatMonth(string);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to format an invalid month. */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static int formatInvalidMonth(String string) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateFormatter.formatMonth(string);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 101
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/commons/core/date/DateRangeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.commons.core.date;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_END_TODAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_LONG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_MONTH_MAY_2020;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_SHORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_START_IN_DISTANT_FUTURE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalDateRanges.DATE_RANGE_YEAR_2020;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class DateRangeTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void testDateRange() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check simple creation of DateRange"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_SHORT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRange(LocalDate.of(2020, 5, 3),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2020, 7, 9)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // invalid DateRange with default DateRangeStyle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e createInvalidDateRange("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2020, 12, 31),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2019, 1, 1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check conversion of invalid DateRange to valid DateRange"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_SHORT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeWithStyle(LocalDate.of(2020, 7, 9),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(2020, 5, 3), DateRangeStyle.LENIENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check simple creation of DateRange"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_START_IN_DISTANT_FUTURE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRange(LocalDate.of(2150, 1, 1),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(2150, 3, 3)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // invalid DateRange with strict DateRangeStyle, if start date is after system date"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e createInvalidDateRangeWithStyle("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2150, 1, 1),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                LocalDate.of(2150, 3, 3), DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check strict DateRangeStyle truncating range to current system date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_END_TODAY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeWithStyle("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(1999, 12, 31),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        LocalDate.of(2150, 12, 31),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                        DateRangeStyle.STRICT));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of year"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_YEAR_2020, createValidDateRangeYear(2020));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of month"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(DATE_RANGE_MONTH_MAY_2020, createValidDateRangeMonthYear(5, 2020));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of month"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2020, 2, 29),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeMonthYear(2, 2020).getEndDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // check creation of month"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(LocalDate.of(2019, 2, 28),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "                createValidDateRangeMonthYear(2, 2019).getEndDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void rangeContainsDate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // system date falls within DateRange -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(DATE_RANGE_LONG.contains(LocalDate.now()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // system date falls within DateRange starting from distant future -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(DATE_RANGE_START_IN_DISTANT_FUTURE.contains(LocalDate.now()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // system date falls on the end date of a DateRange -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(DATE_RANGE_END_TODAY.contains(LocalDate.now()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // a date falls on the start date of a DateRange -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(DATE_RANGE_YEAR_2020.contains(LocalDate.of(2020, 1, 1)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range with specified style. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeWithStyle(LocalDate start, LocalDate end, DateRangeStyle style) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(start, end, style);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range with default style. */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRange(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createValidDateRangeWithStyle(start, end, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to create an invalid date range with specified style. */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createInvalidDateRangeWithStyle(LocalDate start, LocalDate end, DateRangeStyle style)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return DateRange.of(start, end, style);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Attempt to create an invalid date range with default style. */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createInvalidDateRange(LocalDate start, LocalDate end) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createInvalidDateRangeWithStyle(start, end, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with specified style. */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeMonthYearWithStyle(int month, int year, DateRangeStyle style) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.ofMonth(month, year, style);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with default style. */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeMonthYear(int month, int year) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createValidDateRangeMonthYearWithStyle(month, year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with specified style. */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeYearWithStyle(int year, DateRangeStyle style) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.ofYear(year, style);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Create date range of month in year with default style. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createValidDateRangeYear(int year) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        return createValidDateRangeYearWithStyle(year, DateRangeStyle.SMART);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 143
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Logic logicCopy;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonFoodieBotStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_no_errors() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.setGuiSettings(logic.getGuiSettings()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFilteredCanteenListSortedByDistance());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFilteredStallList(true));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFilteredFoodList(true));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFilteredFavoriteFoodList(true));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFilteredTransactionsList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFilteredRandomizeList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getReport());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e logic.getFoodieBot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParseException, IOException, CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* JsonFoodieBotStorage addressBookStorage \u003d new JsonFoodieBotIoExceptionThrowingStub("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                         temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                 new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_DECK;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         Canteen expectedCanteen \u003d new CanteenBuilder(DECK).withTags().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         expectedModel.addCanteen(expectedCanteen);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonFoodieBotIoExceptionThrowingStub("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logicCopy \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e logicCopy.execute(\"favorites set 2142\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e logic.getFilteredCanteenList().remove(0));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String inputCommand,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String inputCommand,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonFoodieBotIoExceptionThrowingStub extends JsonFoodieBotStorage {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonFoodieBotIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveFoodieBot(ReadOnlyFoodieBot addressBook, Path filePath, String modelType)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 46,
      "Samanthaseahpl": 1,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyFoodieBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingCanteenAdded modelStub \u003d new ModelStubAcceptingCanteenAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen validCanteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validCanteen).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validCanteen),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCanteen), modelStub.personsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateCanteen_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen validCanteen \u003d new CanteenBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validCanteen);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCanteen(validCanteen);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen alice \u003d new CanteenBuilder().withName(\"Deck\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen bob \u003d new CanteenBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public Path getFoodieBotFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setFoodieBotFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addCanteen(Canteen person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setFoodieBot(ReadOnlyFoodieBot newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasCanteen(Canteen person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteCanteen(Canteen target) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cCanteen\u003e getFilteredCanteenList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         * Returns an unmodifiable view of the filtered canteen list sorted by distance"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cCanteen\u003e getFilteredCanteenListSortedByDistance() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setLocationSpecified(boolean isLocationSpecified) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredCanteenList(Predicate\u003cCanteen\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cStall\u003e getFilteredStallList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cStall\u003e getFilteredStallList(boolean isInitialised) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        public FileReader listOfCanteens() throws FileNotFoundException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        public FileReader listOfStalls() throws FileNotFoundException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Updates the filter of the filtered stall list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * @param predicate"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredStallList(Predicate\u003cStall\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setFavorite(Food food) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFavoriteFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void updateFilteredFavoriteList(Predicate\u003cFood\u003e predicateShowAll) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            throw new AssertionError(\"This method is a placeholder\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList(boolean isInitialised) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public ObservableList\u003cPurchasedFood\u003e getFilteredTransactionsList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public void loadFilteredTransactionsList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public void updateFilteredTransactionsList(Predicate\u003cPurchasedFood\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public void addPurchasedFood(PurchasedFood food) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        public ObservableList\u003cStall\u003e getFilteredRandomizeList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void removeFavorite(Food food) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void setFavoriteList(ObservableList\u003cFood\u003e filteredFavoriteFoodList) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public Report getReport() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithCanteen extends ModelStub {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Canteen person;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithCanteen(Canteen person) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasCanteen(Canteen person) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSameCanteen(person);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingCanteenAdded extends ModelStub {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cCanteen\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasCanteen(Canteen person) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSameCanteen);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addCanteen(Canteen person) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyFoodieBot getFoodieBot() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FoodieBot();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 17,
      "lsjxavier": 25,
      "leslieharland": 46,
      "shaungoh97": 5,
      "-": 222,
      "ignatiusong": 9
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/BudgetCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.BudgetCommand.MESSAGE_VIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BudgetCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2020, 2, 20);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DateRange dr \u003d DateRange.of"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private Budget budget \u003d new Budget(15, 10, \"daily\", LocalDateTime.now(), dr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private BudgetCommand budgetView \u003d new BudgetCommand(\"view\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private BudgetCommand budgetSet \u003d new BudgetCommand(budget, \"set\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    BudgetCommandTest() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void systemDateIsInCycleRange() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert !budget.getCycleRange().equals(BudgetCommand.systemDateIsInCycleRange(budget));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void saveBudget() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        BudgetCommand.saveBudget(expectedModel, budget);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Budget b \u003d BudgetCommand.loadBudget(expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assert b.getTotalBudget() \u003d\u003d budget.getTotalBudget();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void loadBudget_modelIsNotPresent() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assert BudgetCommand.loadBudget(model).getTotalBudget() \u003d\u003d Float.MAX_VALUE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void commandSetSuccess() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(budgetSet, BudgetCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(BudgetCommand.MESSAGE_SET, budget.getDurationAsString(), budget.getTotalBudget(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        budget.getRemainingBudget()), expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void commandViewSuccess() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String display \u003d String.format(MESSAGE_VIEW,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                budget.getDurationAsString(), budget.getTotalBudget(), budget.getRemainingBudget(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                budget.getRemainingDailyBudget(), budget.getDurationAsString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* assertCommandSuccess(budgetView, BudgetCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                display , expectedModel); */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 70,
      "lsjxavier": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String command \u003d \"somecommand\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CommandResult commandResult \u003d new CommandResult(command, \"feedback\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(command, \"feedback\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(command, \"feedback\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(command, \"feedback\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            false, false)));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(command, \"different\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(command, \"feedback\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            true, false)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(command, \"feedback\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            false, true)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(command, \"feedback\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(command, \"feedback\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(command, \"different\").hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult.hashCode(), new CommandResult(command, \"feedback\", true, false)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult.hashCode(), new CommandResult(command, \"feedback\", false, true)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .hashCode());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void isShowHelp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void isExit() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void isLocationSpecified() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(commandResult.isLocationSpecified());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.testutil.EditCanteenDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_DECK \u003d \"The Deck\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_NUSFLAVORS \u003d \"NUS flavors\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_ASIAN \u003d \"asian\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_INDIAN \u003d \"indian\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_DECK \u003d \" \" + PREFIX_NAME + VALID_NAME_DECK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_NUSFLAVORS \u003d \" \" + PREFIX_NAME + VALID_NAME_NUSFLAVORS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_ASIAN \u003d \" \" + PREFIX_TAG + VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_INDIAN \u003d \" \" + PREFIX_TAG + VALID_TAG_INDIAN;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \" \" + PREFIX_NAME + \"Pizza\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditCanteenDescriptor DESC_DECK;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditCanteenDescriptor DESC_NUSFLAVORS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_DECK \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .withName(VALID_NAME_DECK)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_NUSFLAVORS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditCanteenDescriptorBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withName(VALID_NAME_NUSFLAVORS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Model actualModel,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command, String commandName, Model actualModel, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(commandName, expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * unchanged"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot expectedFoodieBot \u003d new FoodieBot(actualModel.getFoodieBot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCanteen\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCanteenList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFoodieBot, actualModel.getFoodieBot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCanteenList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the canteen at the given {@code"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /* public static void showCanteenAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCanteenList().size());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen canteen \u003d model.getFilteredCanteenList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d canteen.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredCanteenList("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredCanteenList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 2,
      "leslieharland": 1,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen personToDelete \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            model.getFilteredCanteenList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteCanteen(personToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, DeleteCommand.COMMAND_WORD, model, expectedMessage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCanteenList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showCanteenAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen canteenToDelete \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            model.getFilteredCanteenList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, canteenToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteCanteen(canteenToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showCanteenAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFoodieBot().getCanteenList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredCanteenList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredCanteenList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/EnterCanteenCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class EnterCanteenCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String invalidCanteenName \u003d \"My House\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final String validCanteenName \u003d \"The Deck\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EnterCanteenCommand command \u003d new EnterCanteenCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EnterCanteenCommand copy \u003d new EnterCanteenCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        EnterCanteenCommand command2 \u003d new EnterCanteenCommand(Index.fromOneBased(2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(command, command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(command, copy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(command, command2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SelectItemCommand otherCommandType \u003d new SelectItemCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(command.equals(otherCommandType));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new EnterCanteenCommand(Index.fromOneBased(1)),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new EnterCanteenCommand(validCanteenName),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                EnterCanteenCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 52
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/EnterStallCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class EnterStallCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        Canteen testCanteen \u003d new Canteen(new Name(\"The Deck\"), 0, 0, \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                \"\", \"\", new HashSet\u003c\u003e(), \"\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCanteenContext(testCanteen);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        assertCommandSuccess(new EnterStallCommand(\"Western\"), EnterStallCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"\", expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 29,
      "shaungoh97": 9
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.ParserContext;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommandResult(COMMAND_WORD, MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.FAVORITE_CONTEXT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(new ExitCommand().needToSaveCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 16,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/FavoritesCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FavoritesCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_viewFavorite_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FavoritesCommand(\"view\"), FavoritesCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FavoritesCommand.MESSAGE_VIEW_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FavoritesCommand(\"set 1\"), FavoritesCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FavoritesCommand.MESSAGE_VIEW_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FavoritesCommand(\"remove\"), FavoritesCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FavoritesCommand.MESSAGE_VIEW_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FavoritesCommand command \u003d new FavoritesCommand(\"view\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SelectItemCommand otherCommandType \u003d new SelectItemCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(new FavoritesCommand(\"view\").equals(otherCommandType));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_modifyFavorite_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.setFavorite(SampleDataUtil.getSampleFoods()[0]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FavoritesCommand(INDEX_FIRST_ITEM, \"set\"), FavoritesCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(FavoritesCommand.MESSAGE_SET_SUCCESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                SampleDataUtil.getSampleFoods()[0].getName()), expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel.removeFavorite(SampleDataUtil.getSampleFoods()[0]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FavoritesCommand(INDEX_FIRST_ITEM, \"remove\"), FavoritesCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FavoritesCommand.MESSAGE_VIEW_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 59
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/FilterCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FilterCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodieBot bot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Stream.of(SampleDataUtil.getSampleFoods())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .filter(f -\u003e f.getTags().contains(new Tag(\"asian\"))).collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(bot, new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        bot.setFood(foodList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(bot, new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_viewFavorite_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new FilterCommand(\"asian\"), FilterCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FilterCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 42
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/GoToCanteenCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.GoToCanteenCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class GoToCanteenCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String nearestBlockName \u003d \"COM1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private String canteenName \u003d \"The Deck\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private List\u003cCanteen\u003e canteens \u003d model.getFilteredCanteenList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model.getFilteredCanteenList().get(INDEX_FIRST_ITEM.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new GoToCanteenCommand(Index.fromOneBased(1), nearestBlockName),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                GoToCanteenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model, MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_indexIsPresent() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* Optional\u003cCanteen\u003e result \u003d canteens.stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .filter(c -\u003e c.getBlockName().equalsIgnoreCase(nearestBlockName)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        \u0026\u0026 c.getName().equals(canteenName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new GoToCanteenCommand(index, nearestBlockName), GoToCanteenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model, expectedMessage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_canteenNameIsPresent() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new GoToCanteenCommand(canteenName, nearestBlockName), GoToCanteenCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model, expectedMessage,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_noValuesPresent() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandFailure(new GoToCanteenCommand(\"\", \"\"), model,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                Messages.MESSAGE_NOTAVAILABLE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void is_equal_command() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        GoToCanteenCommand command \u003d new GoToCanteenCommand(\"\", \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        GoToCanteenCommand copy \u003d new GoToCanteenCommand(\"\", \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(command.equals(copy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(command.equals(new FavoritesCommand(\"view\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 84
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ListCommand command \u003d new ListCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ListCommand.COMMAND_WORD, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), ListCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_nearestBlockIsNotBlank() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ListCommand command \u003d new ListCommand(\"COM1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(command, ListCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                ListCommand.MESSAGE_NEAREST_BLOCK, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/RandomizeCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RandomizeCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Randomize randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_viewFavorite_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertCommandSuccess(new RandomizeCommand(\"\", \"all\", randomize), RandomizeCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    RandomizeCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 31
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/RateCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RateCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private PurchasedFood food \u003d new PurchasedFood(SampleDataUtil.getSampleFoods()[0], LocalDate.now(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        LocalTime.now(), new Rating(10), new Review(\"This is a short review\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_rate_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        RateCommand command \u003d new RateCommand(Index.fromOneBased(1), new Rating(10));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(command.needToSaveCommand());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertCommandSuccess(command, RateCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    String.format(MESSAGE_SUCCESS, food.getName(), food.getRating().toString()), expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //null parameters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RateCommand(null, new Rating(10)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RateCommand(Index.fromOneBased(1), null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //invalid index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new RateCommand(Index.fromOneBased(100), new Rating(10)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RateCommand(Index.fromOneBased(1), new Rating(11)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 56
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ReportCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate sameEndDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2020, 2, 20);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DateRange dr \u003d DateRange.of"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (startDate, endDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    ReportCommandTest() throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ReportCommand(dr),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "              ReportCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(ReportCommand.MESSAGE_SUCCESS, startDate, endDate), model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new ReportCommand(dr),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ReportCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(ReportCommand.MESSAGE_SUCCESS, startDate, sameEndDate), model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommand(DateRange.of"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (endDate, startDate)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void needToSaveCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert(!new ReportCommand(dr).needToSaveCommand());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 54
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/ReviewCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReviewCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private PurchasedFood food \u003d new PurchasedFood(SampleDataUtil.getSampleFoods()[0], LocalDate.now(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        LocalTime.now(), new Rating(10), new Review(\"This is a short review\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_review_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertCommandSuccess(new ReviewCommand(Index.fromOneBased(1), new Review(\"Short review\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    ReviewCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    String.format(MESSAGE_SUCCESS, food.getName(), food.getReview().toString()), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 39
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/SelectItemCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class SelectItemCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void execute_selectSuccess() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        SelectItemCommand command \u003d new SelectItemCommand(INDEX_FIRST_ITEM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model.setBudget(new Budget(0f, \"d/\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertCommandFailure(command, model, SelectItemCommand.EXCEEDED_BUDGET);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 32
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/commands/TransactionsCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class TransactionsCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate startDate \u003d LocalDate.of(2020, 1, 20);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDate endDate \u003d LocalDate.of(2020, 2, 20);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DateRange dr \u003d DateRange.of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            (startDate, endDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    TransactionsCommandTest() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void execute_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        model \u003d new ModelManager(getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertCommandSuccess(new TransactionsCommand(dr),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            TransactionsCommand.COMMAND_WORD, model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(TransactionsCommand.MESSAGE_SUCCESS, startDate, endDate), model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void needToSaveCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assert (!new TransactionsCommand(dr).needToSaveCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix * */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void multimapContainsPrefixes() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String argsString \u003d \"SomePreambleString p/ pSlash argument -t dashT argument\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Supplied prefixes are subset of multimap key set"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAll(pSlash));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAll(dashT, pSlash));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(argMultimap.containsAll(pSlash, dashT, hatQ));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Supplied prefixes are equal to multimap key set"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsExact(dashT, pSlash));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(argMultimap.containsExact(pSlash));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertFalse(argMultimap.containsExact(pSlash, dashT, hatQ, unknownPrefix));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        // Any prefix is in multimap key set"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAny(pSlash));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertTrue(argMultimap.containsAny(pSlash, dashT, hatQ));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public void multimapSize() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String argsStringA \u003d \"SomePreambleString p/ pSlash argument -t dashT argument\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimapA \u003d ArgumentTokenizer.tokenize(argsStringA, pSlash, dashT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(3, argMultimapA.size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(2, argMultimapA.size(false));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        String argsStringB \u003d \"SomePreambleString\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        ArgumentMultimap argMultimapB \u003d ArgumentTokenizer.tokenize(argsStringB, pSlash, dashT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(1, argMultimapB.size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        assertEquals(0, argMultimapB.size(false));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 33,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/BudgetCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CliSyntax.PREFIX_DATE_BY_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BudgetCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private BudgetCommandParser parser \u003d new BudgetCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse_validArgs_returnsBudgetCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Budget budget \u003d new Budget(15, PREFIX_DATE_BY_MONTH.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"set m/15 \", new BudgetCommand(budget, \"set\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void setBudget_invalid() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void getArgString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"fasfa/\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 33
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \"a\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/EnterCanteenCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class EnterCanteenCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private EnterCanteenCommandParser parser \u003d new EnterCanteenCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setMainContext() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validIndex_returnsEnterCanteenCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1\", new EnterCanteenCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidIndex_returnsEnterCanteenCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"0\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validName_returnsCanteenCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"The Deck\", new EnterCanteenCommand(\"The Deck\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidContext() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"1\", ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + ParserContext.MAIN_CONTEXT + \", \" + ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 47
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/EnterStallCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "//import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterStallCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class EnterStallCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_STALL_NAME \u003d \"Duck and Chicken Rice\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private EnterStallCommandParser parser \u003d new EnterStallCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setCanteenContext() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new EnterStallCommandParser().parse(\"enter 1\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validIndex_returnsEnterStallCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1\", new EnterStallCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidIndex_returnsEnterStallCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validName_returnsStallCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, VALID_STALL_NAME, new EnterStallCommand(VALID_STALL_NAME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 38,
      "ignatiusong": 3
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/FavoritesCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FavoritesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FavoritesCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FavoritesCommandParser parser \u003d new FavoritesCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStallContext() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse_validArgs_returnsFavoritesCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"set 1\", new FavoritesCommand(INDEX_FIRST_ITEM, \"set\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"view\", new FavoritesCommand(\"view\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"remove 1\", new FavoritesCommand(INDEX_FIRST_ITEM, \"remove\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse_invalidArgs_displaysInvalidCommandFormat() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FavoritesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"set\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FavoritesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"set 0\", ParserUtil.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidContext() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"set 1\", ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 45
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/FilterCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "//import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FilterCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_TAG \u003d \"asian\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_TAG_CASE \u003d \"AsiaN\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_TAG_ALPHANUMERIC \u003d \"discount20\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_TAG_SYMBOLS \u003d \"asian-stall\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setParserContext() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new FilterCommandParser().parse(\"asian\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new FilterCommandParser().parse(\"asian\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(ParserContext.getCurrentContext(), ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new FilterCommandParser().parse(\"asian\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows(IllegalArgumentException.class, () -\u003e new FilterCommandParser().parse(\"asian\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validName_returnsStallCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, VALID_TAG, new FilterCommand(VALID_TAG));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, VALID_TAG_CASE, new FilterCommand(VALID_TAG_CASE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, VALID_TAG_ALPHANUMERIC, new FilterCommand(VALID_TAG_ALPHANUMERIC));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, VALID_TAG_SYMBOLS, new FilterCommand(VALID_TAG_SYMBOLS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_index() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1\", new FilterCommand(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 45
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/FoodieBotParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterCanteenCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.EnterStallCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.RateCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ReportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.TransactionsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodieBotParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FoodieBotParser parser \u003d new FoodieBotParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_goToCanteen() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(GoToCanteenCommand.COMMAND_WORD + \" 1 f/com1\") instanceof GoToCanteenCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_enterCanteenOrStall() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(EnterCanteenCommand.COMMAND_WORD + \" The Deck\") instanceof EnterCanteenCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        ParserContext.setCanteenContext(SampleDataUtil.getSampleCanteens()[0]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(EnterStallCommand.COMMAND_WORD + \" 1\") instanceof EnterStallCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_selectItem() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(SelectItemCommand.COMMAND_WORD + \" 1\") instanceof SelectItemCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_budget() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(BudgetCommand.COMMAND_WORD + \" set m/1\") instanceof BudgetCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_report() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ReportCommand.COMMAND_WORD + \" \") instanceof ReportCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_randomize() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(RandomizeCommand.COMMAND_WORD + \" \") instanceof RandomizeCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_filter() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(FilterCommand.COMMAND_WORD + \" asian\") instanceof FilterCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_transactions() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(TransactionsCommand.COMMAND_WORD + \" \") instanceof TransactionsCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_rate() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(RateCommand.COMMAND_WORD + \" 1 7\") instanceof RateCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(RateCommand.COMMAND_WORD + \" 1 7\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_review() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ReviewCommand.COMMAND_WORD + \" 1 review\") instanceof ReviewCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parseCommand(ReviewCommand.COMMAND_WORD + \" 1 review\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            MESSAGE_UNKNOWN_COMMAND, ("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 59,
      "-": 64,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/GoToCanteenCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.GoToCanteenCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Block;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class GoToCanteenCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private GoToCanteenCommandParser parser \u003d new GoToCanteenCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setMainContext() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsGoToCanteenCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1 f/com1\", new GoToCanteenCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"com1\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"The Deck f/com1\", new GoToCanteenCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"com1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidArgs_returnsGoToCanteenCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            GoToCanteenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"a f/com1\", Canteen.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"The Deck\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            GoToCanteenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"The Deck f/asf\", Block.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 42
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ListCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 10
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ParserContextTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ParserContextTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStall_to_context() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setStallContext(SampleDataUtil.getSampleStalls()[0]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(ParserContext.getCurrentStall().get(), SampleDataUtil.getSampleStalls()[0]);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCanteenContext(SampleDataUtil.getSampleCanteens()[0]);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(ParserContext.getCurrentCanteen().get(), SampleDataUtil.getSampleCanteens()[0]);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(ParserContext.getCurrentContext(), ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(ParserContext.getPreviousContext(), ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 23
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"T@eDeck\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#asian\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"The Deck\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"western\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"asian\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            MESSAGE_INVALID_INDEX, ("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(INDEX_FIRST_ITEM, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            ParseException.class, ("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void parseFilterTag_emptyString_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        assertThrows(ParseException.class , () -\u003e ParserUtil.parseFilterTag(\"\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    public void parseFilterTag_nonEmptyString_returnsString() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String testString \u003d \"test\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        String resultString \u003d ParserUtil.parseFilterTag(testString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        assertEquals(testString, resultString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseStallIndex_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseStallIndex(\"1000\", SampleDataUtil.getSampleCanteens()[0]));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseStallIndex_validIndex_returnsIndex() throws ParseException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseStallIndex(\"1\", SampleDataUtil.getSampleCanteens()[0]));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseBlockName() throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(\"UHC\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseBlockName(\"UHC\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseBlockName(\"Invalid\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCanteenIndex() throws ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseCanteenIndex(\"1\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseBlockName(\"Invalid\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parseCanteenName() throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(\"The Deck\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseCanteenName(\"The Deck\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ParserUtil.parseCanteenName(\"Invalid\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 41,
      "-": 121,
      "ignatiusong": 12
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/RandomizeCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.RandomizeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RandomizeCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private RandomizeCommandParser parser \u003d new RandomizeCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Randomize randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setMainContext() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsRandomizeCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"\", new RandomizeCommand(\"\", \"all\", randomize));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertParseFailure(parser, \"asf\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    RandomizeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    //i dont know the issue to this test.."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    //public void parse_invalidArgs_returnsRandomizeCommand() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        //assertParseSuccess(parser, \"c/The Deck\", new RandomizeCommand(\"c/\",\"The Deck\", randomize));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertParseFailure(parser, \"c/\", MESSAGE_INVALID_CANTEEN_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertParseFailure(parser, \"c/a\", MESSAGE_INVALID_CANTEEN_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leslieharland": 28,
      "Samanthaseahpl": 8
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/RateCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.RateCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.RateCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RateCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private RateCommandParser parser \u003d new RateCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setParserContext() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new RateCommandParser().parse(\"1 5\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new RateCommandParser().parse(\"1 5\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new RateCommandParser().parse(\"1 5\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new RateCommandParser().parse(\"1 5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsRateCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertParseSuccess(parser, \"1 5\", new RateCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    new Rating(5)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidArgs_returnsRateCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"0 review\", MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"-1 review\", MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_FAILURE + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 42
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ReportCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ReportCommandParser parser \u003d new ReportCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setMainContext() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidArgs_returnsReportCommand() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        DateTimeFormatter validDateFormat \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String date \u003d \"12-02-2020\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        LocalDate localDateValid \u003d LocalDate.parse(date, validDateFormat);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //parameters unspecified"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommandParser().parse(\"f/12-02-2020 \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommandParser().parse(\"f/12-02-2020 t/\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //same date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertParseSuccess(parser, \"f/12-02-2020 t/12-02-2020\", new ReportCommand("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    DateRange.of(localDateValid, localDateValid, DateRangeStyle.STRICT)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //invalid date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommandParser().parse(\"f/2020-02-12 \"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommandParser().parse(\"f/2020-13-04 \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommandParser().parse(\"f/2020-10-33 \"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //invalid prefix t without f"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReportCommandParser().parse(\"t/2020-02-12 \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsReportCommand() throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertParseSuccess(parser, \"w/12-02-2020\", new ReportCommandParser().parse(\"w/12-02-2020\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"m/jan\", new ReportCommandParser().parse(\"m/jan\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"m/jan y/2019\", new ReportCommandParser().parse(\"m/jan y/2019\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"y/ 2020\", new ReportCommandParser().parse(\"y/ 2020\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 50
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/ReviewCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.ReviewCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.ReviewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.ReviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReviewCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ReviewCommandParser parser \u003d new ReviewCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setParserContext() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReviewCommandParser().parse(\"1 my review\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.CANTEEN_CONTEXT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReviewCommandParser().parse(\"1 my review\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ReviewCommandParser().parse(\"1 my review\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.TRANSACTIONS_CONTEXT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new ReviewCommandParser().parse(\"1 my review\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_validArgs_returnsReviewCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1 my review\", new ReviewCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new Review(\"my review\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidArgs_returnsReviewCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"0 my review\", MESSAGE_FAILURE.concat(MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"-1 my review\", MESSAGE_FAILURE.concat(MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows(Exception.class, () -\u003e new ReviewCommandParser().parse(\"100 my review\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_FAILURE.concat(MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 47
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/SelectItemCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalIndexes.INDEX_FIRST_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.SelectItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class SelectItemCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private SelectItemCommandParser parser \u003d new SelectItemCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setMainContext() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse_validArgs_returnsItemCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"1 \", new SelectItemCommand(INDEX_FIRST_ITEM));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseSuccess(parser, \"Combo Set\", new SelectItemCommand(\"Combo Set\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse_invalidArgs_returnsItemCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void parse_invalidContext() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        ParserContext.setCurrentContext(ParserContext.MAIN_CONTEXT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertParseFailure(parser, \"select 1\", ParserContext.INVALID_CONTEXT_MESSAGE + ParserContext.getCurrentContext()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + \"\\n\" + ParserContext.SUGGESTED_CONTEXT_MESSAGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            + ParserContext.STALL_CONTEXT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 39
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/logic/parser/TransactionsCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class TransactionsCommandParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TransactionsCommandParser parser \u003d new TransactionsCommandParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void parse() throws ParseException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertParseSuccess(parser, \"f/2020-02-20 t/2020-02-25\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new TransactionsCommand(DateRange.of("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        LocalDate.of(2020, 2, 20),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                        LocalDate.of(2020, 2, 25))));*/"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void getArgString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /*assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"fasfa/\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 25
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/FoodieBotTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_NAME_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "import seedu.foodiebot.model.randomize.Randomize;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.testutil.CanteenBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class FoodieBotTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FoodieBot foodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), foodieBot.getCanteenList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodieBot.resetData(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot newData \u003d getTypicalFoodieBot();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBot.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, foodieBot);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicateCanteens_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen editedAlice \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            new CanteenBuilder(DECK)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withName(VALID_NAME_DECK)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCanteen\u003e newCanteens \u003d Arrays.asList(DECK, editedAlice);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBotStub newData \u003d new FoodieBotStub(newCanteens, new ArrayList\u003c\u003e(), new Budget());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicateCanteenException.class, () -\u003e foodieBot.resetData(newData));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasCanteen_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodieBot.hasCanteen(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasCanteen_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(foodieBot.hasCanteen(DECK));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasCanteen_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBot.addCanteen(DECK);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(foodieBot.hasCanteen(DECK));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasCanteen_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        foodieBot.addCanteen(DECK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen editedAlice \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            new CanteenBuilder(DECK)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .withName(VALID_NAME_DECK)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_ASIAN)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(foodieBot.hasCanteen(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getCanteenList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            UnsupportedOperationException.class, () -\u003e foodieBot.getCanteenList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class FoodieBotStub implements ReadOnlyFoodieBot {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cCanteen\u003e canteens \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cStall\u003e stalls \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        private final ObservableList\u003cFood\u003e favorites \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        private final ObservableList\u003cPurchasedFood\u003e transactions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        private Budget budget;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        private Randomize randomize;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        private Report report;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBotStub(Collection\u003cCanteen\u003e canteens, Collection\u003cStall\u003e stalls, Budget budget) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            this.canteens.setAll(canteens);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stalls.setAll(stalls);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            this.randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            this.report \u003d new Report();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cCanteen\u003e getCanteenList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return canteens;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cStall\u003e getStallList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return stalls;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public ObservableList\u003cFood\u003e getFavoriteList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return favorites;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public Budget getBudget() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return budget;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public ObservableList\u003cPurchasedFood\u003e getTransactionsList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return transactions;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public void removeFavorite(Food food) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        public boolean isLocationSpecified() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        public Randomize getRandomize() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "            return randomize;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        public Report getReport() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return report;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Samanthaseahpl": 8,
      "lsjxavier": 15,
      "leslieharland": 16,
      "-": 126,
      "ignatiusong": 7
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.Model.PREDICATE_SHOW_ALL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.NUSFLAVORS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.testutil.FoodieBotBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FoodieBot(), new FoodieBot(modelManager.getFoodieBot()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setFoodieBotFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setFoodieBotFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFoodieBotFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.setFoodieBotFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(path, modelManager.getFoodieBotFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCanteen(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasCanteen(DECK));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addCanteen(DECK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasCanteen(DECK));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e modelManager.getFilteredCanteenList().remove(0));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot foodieBot \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            new FoodieBotBuilder().withCanteen(DECK).withCanteen(NUSFLAVORS).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot differentFoodieBot \u003d new FoodieBot();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(foodieBot, userPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(foodieBot, userPrefs);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFoodieBot, userPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d DECK.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredCanteenList("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.updateFilteredCanteenList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.updateFilteredStallList("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            f -\u003e f.getName().equals(\"Cai Fan\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.updateFilteredStallList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.updateFilteredCanteenList(PREDICATE_SHOW_ALL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //Favorites"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.setFavorite(SampleDataUtil.getSampleFoods()[1]));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //Reset Favorites"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(StallNotFoundException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .removeFavorite(SampleDataUtil.getSampleFoods()[0]));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            .removeFavorite(SampleDataUtil.getSampleFoods()[1]));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //Transactions"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        PurchasedFood food \u003d new PurchasedFood(SampleDataUtil.getSampleFoods()[0],"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LocalDate.now(), LocalTime.now(), new Rating(5), new Review());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.addPurchasedFood(food);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager \u003d modelManagerCopy;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //Get filtered list does not modify existing list"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.getFilteredCanteenListSortedByDistance();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.getFilteredStallList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.getFilteredFoodList());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.loadFilteredTransactionsList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.getFilteredFoodList(true));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.getFilteredFoodList(false));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.updateFilteredFoodList(PREDICATE_SHOW_ALL));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.updateModelManagerFavoriteList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e modelManager.updateModelManagerStalls());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //Budget"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        modelManager.setBudget(new Budget(15f, \"d/\"));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, userPrefs)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //assertEquals(modelManager.getBudget().get().getTotalBudget(), 15f);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (NoSuchElementException ex) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //failing test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setFoodieBotFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(foodieBot, differentUserPrefs)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 67,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/budget/BudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BudgetTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LocalDateTime dateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Budget budget \u003d new Budget(1.0f,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        0.5f, \"d/\", dateTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_isValid() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e budget);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void reset_clearsBudget() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Budget budget \u003d new Budget(1.0f,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            0.5f, \"d/\", LocalDateTime.now());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        budget.resetRemainingBudget();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(budget.getRemainingBudget(), 1.0f);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void changeBudget_invalidAmount_returnsBudget() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Budget budget \u003d new Budget(15f,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            0.5f, \"d/\", LocalDateTime.now());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        budget.subtractFromRemainingBudget(16f);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(budget.getRemainingBudget(), -15.5f);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        budget.addToRemainingBudget(15.5f);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(budget.getRemainingBudget(), 0f);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_stalls_equal() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Budget copy \u003d new Budget(1.0f,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            0.5f, \"d/\", dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(budget.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(budget.equals(canteen));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(budget.equals(budget));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 54
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/BlockTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BlockTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Block(new Name(null)));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Block(new Name(invalidName)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void isValidBlock() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Block.isValidBlock(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Block block \u003d new Block(new Name(\"com1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(block.getName().toString(), \"com1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(Name.isValidName(\"com1*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"pgpr\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"1\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"com1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"COM1\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(Name.isValidName(\"Nus Flavors\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 42
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/CanteenTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.COM1_TO_NUSFLAVORS_DIRECTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CanteenTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Canteen("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            11,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            3200,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"COM1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"utown_flavors.png\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COM1_TO_NUSFLAVORS_DIRECTIONS,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            getTagSet(\"asian\", \"western\", \"muslim\"), \"utown.jpg\", new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_canteens_equal() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen copy \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Stall stall \u003d SampleDataUtil.getSampleStalls()[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(canteen.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(canteen.equals(stall));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen stallNumber \u003d new Canteen("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new Name(\"Nus Flavors\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            10,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            3200,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"COM1\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"utown_flavors.png\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COM1_TO_NUSFLAVORS_DIRECTIONS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            getTagSet(\"asian\", \"western\", \"muslim\"), \"utown.jpg\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen differentStallNumber \u003d new Canteen("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new Name(\"Nus Flavors\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            11,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            3200,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"COM1\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"utown_flavors.png\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            COM1_TO_NUSFLAVORS_DIRECTIONS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            getTagSet(\"asian\", \"western\", \"muslim\"), \"utown.jpg\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(stallNumber.isSameCanteen(differentStallNumber));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 59
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/canteen/UniqueCanteenListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.model.canteen;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.NUSFLAVORS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.CanteenNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.exceptions.DuplicateCanteenException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.testutil.CanteenBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueCanteenListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueCanteenList uniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniqueCanteenList.contains(DECK));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniqueCanteenList.contains(DECK));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen editedCanteen \u003d new CanteenBuilder(DECK).withTags(VALID_TAG_ASIAN).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniqueCanteenList.contains(editedCanteen));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicateCanteen_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicateCanteenException.class, () -\u003e uniqueCanteenList.add(DECK));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_nullTargetCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.setCanteen(null, DECK));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_nullEditedCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.setCanteen(DECK, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_targetCanteenNotInList_throwsCanteenNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            CanteenNotFoundException.class, () -\u003e uniqueCanteenList.setCanteen(DECK, DECK));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_editedCanteenIsSameCanteen_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.setCanteen(DECK, DECK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_editedCanteenHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Canteen editedDeck \u003d new CanteenBuilder(DECK).withTags(VALID_TAG_ASIAN).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.setCanteen(DECK, editedDeck);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueCanteenList.add(editedDeck);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_editedCanteenHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.setCanteen(DECK, NUSFLAVORS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_editedCanteenHasNonUniqueIdentity_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            DuplicateCanteenException.class, ("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteen(DECK, NUSFLAVORS));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCanteenList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_itemDoesNotExist_throwsCanteenNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CanteenNotFoundException.class, () -\u003e uniqueCanteenList.remove(DECK));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingCanteen_removesCanteen() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.remove(DECK);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteen_nullUniqueCanteenList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteens((UniqueCanteenList) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteens_uniqueCanteenList_replacesOwnListWithProvidedUniqueCanteenList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.setCanteens(expectedUniqueCanteenList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteens_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteens((List\u003cCanteen\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteens_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueCanteenList.add(DECK);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cCanteen\u003e itemList \u003d Collections.singletonList(NUSFLAVORS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueCanteenList.setCanteens(itemList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueCanteenList expectedUniqueCanteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueCanteenList.add(NUSFLAVORS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniqueCanteenList, uniqueCanteenList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCanteens_listWithDuplicateCanteens_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCanteen\u003e listWithDuplicateCanteens \u003d Arrays.asList(DECK, DECK);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            DuplicateCanteenException.class, ("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e uniqueCanteenList.setCanteens(listWithDuplicateCanteens));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            ) -\u003e uniqueCanteenList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueCanteenList canteenList \u003d new UniqueCanteenList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(canteenList::iterator);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(canteenList::hashCode);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 11,
      "-": 171
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/favorites/FavoriteFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.favorites;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FavoriteFoodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidParameters_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FavoriteFood(null, 0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Food\", \"Cai Fan.png\", 1, \"The Deck\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Cai Fan\", getTagSet(\"expensive\")));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 15
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/food/FoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Food(null, 6,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                1, \"Nus Flavors\", \"Western\", getTagSet(\"1\")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        /* assertThrows(NullPointerException.class, () -\u003e new Food(\"Chicken Chop\", 0, \"1 Meat,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                1, \"Nus Flavors\", \"Western\", getTagSet(\"1\"))); */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_food_equal() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Food food \u003d SampleDataUtil.getSampleFoods()[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Food copy \u003d SampleDataUtil.getSampleFoods()[0];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(food.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(food.equals(canteen));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertSame(food, food);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 42
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/food/UniqueFoodListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.DuplicateStallException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class UniqueFoodListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueFoodList uniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Food food \u003d SampleDataUtil.getSampleFoods()[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Food food2 \u003d SampleDataUtil.getSampleFoods()[1];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(uniqueFoodList.contains(food));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(uniqueFoodList.contains(food));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Food copy \u003d SampleDataUtil.getSampleFoods()[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(uniqueFoodList.contains(copy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_duplicateFood_throwsDuplicateStallException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(DuplicateStallException.class, () -\u003e uniqueFoodList.add(food));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_nullTargetFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(null, food));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_nullEditedFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(food, null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_targetFoodNotInList_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StallNotFoundException.class, () -\u003e uniqueFoodList.setFood(food, food));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_editedFoodIsSameFood_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.setFood(food, food);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueFoodList.add(food);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_editedFoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Food copy \u003d SampleDataUtil.getSampleFoods()[0];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.setFood(food, copy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueFoodList.add(copy);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_editedFoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.setFood(food, food2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueFoodList.add(food2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_editedFoodHasNonUniqueIdentity_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    DuplicateFoodException.class, ("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    ) -\u003e uniqueFoodList.setFood(food, food2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_itemDoesNotExist_throwsFoodNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.remove(food));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_existingFood_removesFood() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.remove(food);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_nullUniqueFoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueFoodList.setFoods((UniqueFoodList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoods_uniqueFoodList_replacesOwnListWithProvidedUniqueFoodList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueFoodList.add(food2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.setFoods(expectedUniqueFoodList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueFoodList.setFoods(null));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.add(food);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cFood\u003e itemList \u003d Collections.singletonList(food2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueFoodList.setFood(itemList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueFoodList.add(food2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoods_listWithDuplicateFoods_throwsDuplicateFoodException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(food, food);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    DuplicateFoodException.class, ("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    ) -\u003e uniqueFoodList.setFoods(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueFoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueFoodList foodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(foodList::iterator);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(foodList::hashCode);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 180
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/randomize/RandomizeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.randomize;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.TypicalCanteens;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RandomizeTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static FileReader canteens \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static FileReader stalls \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(TypicalCanteens.getTypicalFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_randomize_equal() throws CommandException, FileNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Randomize randomize \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Randomize copy \u003d Randomize.checkRandomize();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotNull(randomize);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        randomize.setCanteens(createSampleModel().listOfCanteens());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e randomize.setCanteens(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        randomize.setSpecifiedCanteen(SampleDataUtil.getSampleCanteens()[0]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertNotEquals(randomize, copy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(copy.hashCode(), Randomize.checkRandomize().hashCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertDoesNotThrow(() -\u003e randomize.getOptionsByCanteen(createSampleModel().listOfCanteens()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e randomize.getOptionsByCanteen(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e randomize.getOptionsByCanteen("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new FileReader(\"invalid.json\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e randomize.getOptionsByCanteen(createSampleModel().listOfStalls()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Samanthaseahpl"
        },
        "content": "        //assertDoesNotThrow(() -\u003e randomize.getOptionsByTags(createSampleModel().listOfStalls()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e randomize.getOptionsByTags(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(FileNotFoundException.class, () -\u003e randomize.getOptionsByTags("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new FileReader(\"invalid.json\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 51,
      "Samanthaseahpl": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/rating/RatingTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.rating;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.rating.Rating.NO_RATING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RatingTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_rating_equal() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Rating rating \u003d new Rating(5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Rating copy \u003d new Rating(5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(rating.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(canteen, rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(rating.equals(rating));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void is_valid_rating() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Rating rating \u003d new Rating(5);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(rating.getRating(), Optional.empty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(rating.toString(), rating.getRating().get().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Rating invalidRating \u003d new Rating();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(invalidRating.toString(), NO_RATING);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 38
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/rating/ReviewTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.rating;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReviewTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Review(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_stalls_equal() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Review review \u003d new Review(\"review\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Review copy \u003d new Review(\"review\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(review.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(canteen, review);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertSame(review, review);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 31
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/report/ReportTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_reports_equal() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Report report \u003d new Report();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Report copy \u003d new Report();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(report.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(report.equals(canteen));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(report.equals(report));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        report.addFood(new PurchasedFood(\"ComboSet\", 5, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            1, \"Nus Flavors\", \"Western\", getTagSet(\"asian\"), LocalDate.of(2020, 03, 12),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LocalTime.of(20, 20), new Rating(5), new Review(\"review\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(report.toString(), copy.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 39
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/stall/StallTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StallTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Stall(null, \"The Deck\", 1, \"ChineseCookedFood.png\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"asian\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"$\", 0, getTagSet(\"rice\", \"noodle\", \"cheap\"), new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_stalls_equal() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Stall stall \u003d SampleDataUtil.getSampleStalls()[0];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Stall copy \u003d SampleDataUtil.getSampleStalls()[0];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(stall.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(stall.equals(canteen));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(stall.isSameStall(stall));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 37
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/stall/UniqueStallListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.logic.commands.CommandTestUtil.VALID_TAG_ASIAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.DuplicateStallException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.StallBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class UniqueStallListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final UniqueStallList uniqueStallList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Stall validStall \u003d SampleDataUtil.getSampleStalls()[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_nullStall_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStallList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(uniqueStallList.contains(validStall));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(uniqueStallList.contains(validStall));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Stall editedStall \u003d new StallBuilder(validStall).withTags(VALID_TAG_ASIAN).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(uniqueStallList.contains(editedStall));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_nullStall_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStallList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_duplicateStall_throwsDuplicateStallException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(DuplicateStallException.class, () -\u003e uniqueStallList.add(validStall));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStall_nullTargetStall_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStallList.setStall(null, validStall));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStall_nullEditedStall_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStallList.setStall(validStall, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStall_targetStallNotInList_throwsStallNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StallNotFoundException.class, () -\u003e uniqueStallList.setStall(validStall, validStall));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_nullStall_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStallList.remove(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_itemDoesNotExist_throwsStallNotFoundException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(StallNotFoundException.class, () -\u003e uniqueStallList.remove(validStall));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_existingStall_removesStall() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.remove(validStall);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueStallList expectedUniqueStallList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueStallList, uniqueStallList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStall_nullUniqueStallList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueStallList.setStalls((UniqueStallList) null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls_uniqueStallList_replacesOwnListWithProvidedUniqueStallList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueStallList expectedUniqueStallList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.setStalls(expectedUniqueStallList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueStallList, uniqueStallList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueStallList.setStalls((List\u003cStall\u003e) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cStall\u003e itemList \u003d Collections.singletonList(validStall);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        uniqueStallList.setStalls(itemList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueStallList expectedUniqueStallList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedUniqueStallList.add(validStall);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedUniqueStallList, uniqueStallList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setStalls_listWithDuplicateStalls_throwsDuplicateStallException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        List\u003cStall\u003e listWithDuplicateStalls \u003d Arrays.asList(validStall, validStall);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            DuplicateStallException.class, ("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueStallList.setStalls(listWithDuplicateStalls));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e uniqueStallList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueStallList canteenList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(canteenList::iterator);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(canteenList::hashCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 146
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/stall/exceptions/DuplicateStallExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.UniqueStallList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class DuplicateStallExceptionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void exception_thrownOnDuplicateStall() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueStallList stallList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Stall stall : SampleDataUtil.getSampleStalls()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            stallList.add(stall);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(DuplicateStallException.class, () -\u003e stallList.add(new Stall(new Name(\"Chinese Cooked Food\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"The Deck\", 1, \"ChineseCookedFood.png\", \"asian\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"$\", 0, getTagSet(\"rice\", \"noodle\", \"cheap\"), new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 27
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/stall/exceptions/StallNotFoundExceptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.stall.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.UniqueStallList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class StallNotFoundExceptionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void exception_thrownOnInvalidStall() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        UniqueStallList stallList \u003d new UniqueStallList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Stall[] stalls \u003d SampleDataUtil.getSampleStalls();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Stall stall : stalls) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            stallList.add(stall);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(StallNotFoundException.class, () -\u003e stallList.remove(new Stall(new Name(\"Taiwanee\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"The Deck\", 3, \"muslim.png\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"asian\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"$\", 0, getTagSet(\"expensive\", \"asian\"), new ArrayList\u003c\u003e())));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 29
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/transaction/PurchasedFoodListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.stall.exceptions.StallNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class PurchasedFoodListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private final PurchasedFoodList foodList \u003d new PurchasedFoodList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private PurchasedFood food \u003d new PurchasedFood(SampleDataUtil.getSampleFoods()[0],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        LocalDate.now(), LocalTime.now(), new Rating(5), new Review());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private PurchasedFood food2 \u003d new PurchasedFood(SampleDataUtil.getSampleFoods()[0],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        LocalDate.now(), LocalTime.now(), new Rating(5), new Review());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(foodList.contains(food));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(foodList.contains(food));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void contains_itemWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(foodList.contains(food2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void add_duplicateCanteen_throwsDuplicateCanteenException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e foodList.add(food));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_nullTargetCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodList.setFood(null, food));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_nullEditedCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodList.setFood(food, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_targetCanteenNotInList_throwsCanteenNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            StallNotFoundException.class, () -\u003e foodList.setFood(food, food));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_editedCanteenHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.setFood(food, food2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        PurchasedFoodList expectedPurchasedFoodList \u003d new PurchasedFoodList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        expectedPurchasedFoodList.add(food2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedPurchasedFoodList, foodList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_nullCanteen_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodList.remove(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_itemDoesNotExist_throwsCanteenNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(StallNotFoundException.class, () -\u003e foodList.remove(food));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void remove_existingCanteen_removesCanteen() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.add(food);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        foodList.remove(food);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        PurchasedFoodList expectedPurchasedFoodList \u003d new PurchasedFoodList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(expectedPurchasedFoodList, foodList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFood_nullPurchasedFoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e foodList.setFoods((PurchasedFoodList) null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            NullPointerException.class, ("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e foodList.setFoods((List\u003cPurchasedFood\u003e) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            UnsupportedOperationException.class, ("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ) -\u003e foodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        PurchasedFoodList canteenList \u003d new PurchasedFoodList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(canteenList::iterator);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(canteenList::hashCode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 125
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/transaction/PurchasedFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class PurchasedFoodTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new PurchasedFood(null, 5, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                1, \"Nus Flavors\", \"Western\", getTagSet(\"asian\"), LocalDate.of(2020, 03, 12),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                LocalTime.of(20, 20), new Rating(5), new Review(\"review\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void are_food_equal() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        PurchasedFood food \u003d new PurchasedFood(\"ComboSet\", 5, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            1, \"Nus Flavors\", \"Western\", getTagSet(\"asian\"), LocalDate.of(2020, 3, 12),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LocalTime.of(20, 20), new Rating(5), new Review(\"review\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        PurchasedFood copy \u003d new PurchasedFood(\"ComboSet\", 5, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            1, \"Nus Flavors\", \"Western\", getTagSet(\"asian\"), LocalDate.of(2020, 3, 12),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LocalTime.of(20, 20), new Rating(5), new Review(\"review\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Canteen canteen \u003d SampleDataUtil.getSampleCanteens()[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(food.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(food.compareTo(copy), 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(food.hashCode(), copy.hashCode());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        copy.setReview(new Review(\"another review\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(food, copy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(canteen, food);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertTrue(food.isSameFood(food));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 50
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/model/util/SampleDataUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class SampleDataUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void sampleData_returnsFoodieBot() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotNull(SampleDataUtil.getSampleFoodieBot());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedBudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.testutil.TypicalCanteens;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_BUDGET_NEGATIVE_VAL \u003d \"-1\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"2020-03-31T02:09:02.370197\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_validBudget() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new JsonAdaptedBudget(new Budget()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new JsonAdaptedBudget(TypicalCanteens.getTypicalFoodieBot()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_invalidBudget_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedBudget budget \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedBudget(INVALID_BUDGET_NEGATIVE_VAL, \"0\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedBudget budget2 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedBudget(\"0\", \"-1\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedBudget budget3 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedBudget(\"100\", \"120\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows(IllegalValueException.class, \"\", budget::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_emptyValues_setToZero() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(new JsonAdaptedBudget(\"0\", \"0\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\").toModelType(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedBudget(\"\", \"0\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\").toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(new JsonAdaptedBudget(\"0\", \"0\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\").toModelType(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedBudget(\"0\", \"\", \"w/\", VALID_DATETIME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"2020-03-31\", \"2020-04-06\").toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 46
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.storage.JsonAdaptedStall.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_validFoodDetails_returnsFood() throws Exception {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(\"Chicken Chop\", \"5\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"is delicious\", \"Combo Set.png\", \"9\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Nus Flavors\", \"Western\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertEquals(WESTERN, food.toModelType());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, \"5\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"is delicious\", \"Combo Set.png\", \"9\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"Nus Flavors\", \"Western\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 29
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedPurchasedFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.storage.JsonAdaptedPurchasedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonAdaptedPurchasedFoodTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final String INVALID_NUMBER_HAS_LETTERS \u003d \"five\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_validBudget() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new JsonAdaptedPurchasedFood(new PurchasedFood(SampleDataUtil.getSampleFoods()[0],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LocalDate.now(), LocalTime.now(), new Rating(5), new Review())));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_invalidValues_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new JsonAdaptedPurchasedFood("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Combo Set\", INVALID_NUMBER_HAS_LETTERS, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"1\", \"Nus Flavors\", \"Western\", \"2020-03-31\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"20:02:20\", \"5\", \"review\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e new JsonAdaptedPurchasedFood("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Combo Set\", INVALID_NUMBER_HAS_LETTERS, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            INVALID_NUMBER_HAS_LETTERS, \"Nus Flavors\", \"Western\", \"2020-03-31\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"20:02:20\", \"5\", \"review\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedPurchasedFood food \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonAdaptedPurchasedFood(null, \"5\", \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"1\", \"Nus Flavors\", \"Western\", \"2020-03-31\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"20:02:20\", \"5\", \"review\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 51
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonAdaptedStallTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.storage.JsonAdaptedStall.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalStalls.MUSLIM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedStallTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_CANTEEN_NAME \u003d DECK.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validStallDetails_returnsStall() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedStall stall \u003d new JsonAdaptedStall(\"Muslim\", \"The Deck\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \"5\", \"taiwanese.png\", \"muslim\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \"$\", \"0\", getTagSet(\"spciy\", \"rice\", \"halal\", \"cheap\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MUSLIM, stall.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    //    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    //        JsonAdaptedStall stall \u003d new JsonAdaptedStall(\"T@iwanese\", DECK.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    //            \"5\", \"taiwanese.png\", \"asian\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //            \"$\", \"0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    //        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    //        assertThrows(IllegalValueException.class, expectedMessage, stall::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedStall stall \u003d new JsonAdaptedStall(null, DECK.toString(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \"5\", \"taiwanese.png\", \"asian\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            \"$\", \"0\", getTagSet(\"spicy\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, stall::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static Set\u003cJsonAdaptedTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        return Arrays.stream(strings).map(JsonAdaptedTag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 16,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableFavoritesTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableFavoritesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_validFoodieBot() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new JsonSerializableFavorites(createSampleModel().getFoodieBot());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(SampleDataUtil.getSampleFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableFoodTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableFoodTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_validFood() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new JsonSerializableFood(createSampleModel().getFoodieBot());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(SampleDataUtil.getSampleFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableStallTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableStallTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void toModelType_duplicateStall() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(\"Chicken Chop\", \"5\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"is delicious\", \"ComboSet.png\", \"9\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            \"Nus Flavors\", \"Western\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_validStall() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new JsonSerializableStall(createSampleModel().getFoodieBot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(SampleDataUtil.getSampleFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 27
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/storage/JsonSerializableTransactionsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class JsonSerializableTransactionsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_validTransactions() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new JsonSerializableTransactions(createSampleModel().getFoodieBot());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(SampleDataUtil.getSampleFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 19
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/CanteenBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Canteen objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CanteenBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"The Deck\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DEFAULT_NUMBEROFSTALLS \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DEFAULT_DISTANCE \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_BLOCKNAME \u003d \"Kent Ridge MRT\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_IMAGENAME \u003d \"deck.jpg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_DIRECTIONSIMAGENAME \u003d \"com1_deck.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_DIRECTIONS \u003d \"This is a sample text\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private int numberOfStalls;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private int distance;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String blockName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String canteenImageName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String directionsImageName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String directions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        numberOfStalls \u003d DEFAULT_NUMBEROFSTALLS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        distance \u003d DEFAULT_DISTANCE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        blockName \u003d DEFAULT_BLOCKNAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        canteenImageName \u003d DEFAULT_IMAGENAME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        directionsImageName \u003d DEFAULT_DIRECTIONSIMAGENAME;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        directions \u003d DEFAULT_DIRECTIONS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the CanteenBuilder with the data of {@code canteenToCopy}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder(Canteen canteenToCopy) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d canteenToCopy.getName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        numberOfStalls \u003d canteenToCopy.getNumberOfStalls();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        distance \u003d canteenToCopy.getDistance();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        blockName \u003d canteenToCopy.getBlockName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        directionsImageName \u003d canteenToCopy.getDirectionImageName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        canteenImageName \u003d canteenToCopy.getCanteenImageName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(canteenToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code distance} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withDistance(int distance) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.distance \u003d distance;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code blockName} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withNearestBlock(String blockName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.blockName \u003d blockName;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code imageName} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withImage(String imageName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenImageName \u003d imageName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code imageName} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withDirectionsImage(String directionsImageName) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.directionsImageName \u003d directionsImageName;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code directions} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withDirections(String directions) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this.directions \u003d directions;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Canteen} that we are"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code numberOfStalls} of the {@code Canteen} that we are building."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public CanteenBuilder withNumberOfStalls(int numberOfStalls) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numberOfStalls \u003d numberOfStalls;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Creates the canteen object. */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public Canteen build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Canteen(name, numberOfStalls, distance, blockName, directionsImageName,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "                directions, tags, canteenImageName, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 130,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/StallBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ignatiusong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "import seedu.foodiebot.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Stall objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StallBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Taiwanese\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CANTEEN_NAME \u003d \"The Deck\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DEFAULT_STALL_NUMBER \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CUISINE \u003d \"muslim\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final String DEFAULT_STALL_IMAGE \u003d \"taiwanese.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_OVERALL_PRICERATING \u003d \"$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final int DEFAULT_IS_FAVORITE \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "    public static final Tag DEFAULT_TAG \u003d new Tag(\"spicy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String canteenName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private int stallNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String stallImageName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String cuisine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String overallPriceRating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private int favorite;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d DEFAULT_CANTEEN_NAME;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallNumber \u003d DEFAULT_STALL_NUMBER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallImageName \u003d DEFAULT_STALL_IMAGE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisine \u003d DEFAULT_CUISINE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.overallPriceRating \u003d DEFAULT_OVERALL_PRICERATING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.favorite \u003d DEFAULT_IS_FAVORITE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        this.tags.add(DEFAULT_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the StallBuilder with the data of {@code stallToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder(Stall stallToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d stallToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d stallToCopy.getCanteenName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallNumber \u003d stallToCopy.getStallNumber();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallImageName \u003d stallToCopy.getStallImageName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisine \u003d stallToCopy.getCuisine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.overallPriceRating \u003d stallToCopy.getOverallPriceRating();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.favorite \u003d stallToCopy.getFavorite();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code canteenName} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withCanteenName(String canteenName) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.canteenName \u003d canteenName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code stallNumber} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withStallNumber(int stallNumber) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallNumber \u003d stallNumber;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code stallImageName} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withStallImageName(String stallImageName) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stallImageName \u003d stallImageName;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code cuisine} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withCuisine(String cuisine) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.cuisine \u003d cuisine;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code overallPriceRating} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withOverallPriceRating(String overallPriceRating) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.overallPriceRating \u003d overallPriceRating;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Stall} that we are"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public StallBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code favorite} of the {@code Stall} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public StallBuilder withFavorite(int favorite) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        this.favorite \u003d favorite;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the stall object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stall build() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Stall(name, canteenName, stallNumber, stallImageName, cuisine,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "            overallPriceRating, favorite, tags, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 12,
      "shaungoh97": 7,
      "-": 114,
      "ignatiusong": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalBudgets.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.model.budget.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** A utility class containing a list of typical budgets. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TypicalBudgets {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_A \u003d LocalDate.of(2010, 12, 31);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_B \u003d LocalDate.of(2018, 1, 20);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_C \u003d LocalDate.of(2019, 2, 28);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_D \u003d LocalDate.of(2020, 2, 29);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_E \u003d LocalDate.of(2020, 3, 8);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_F \u003d LocalDate.of(2020, 7, 31);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_G \u003d LocalDate.of(2021, 3, 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final LocalDate LOCAL_DATE_H \u003d LocalDate.of(2022, 8, 18);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_A \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_A.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_B \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_B.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_C \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_C.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_D \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_D.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_E \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_E.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_F \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_F.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_G \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_G.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final Budget BUDGET_H \u003d new Budget(15, 15, \"w/\", LOCAL_DATE_H.atTime(LocalTime.now()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 29
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalCanteens.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalCanteens {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COM1_TO_DECK_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \"1. From Com1 entrance main entrance (facing car park), turn right\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. Walk up the steps \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COM1_TO_NUSFLAVORS_DIRECTIONS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \"1. From Com1, take shuttle D2 to Utown\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. Follow the path to Stephen Riady Centre \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"3. Walk straight and the canteen appears to your right\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Canteen DECK \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        new CanteenBuilder().withName(\"The Deck\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDistance(800).withNumberOfStalls(2).withNearestBlock(\"COM1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withImage(\"deck.jpg\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDirectionsImage(\"com1_deck.png\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDirections(COM1_TO_DECK_DIRECTIONS)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"asian\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Canteen NUSFLAVORS \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        new CanteenBuilder().withName(\"Nus Flavors\").withNumberOfStalls(2)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDistance(3200).withNearestBlock(\"COM1\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withImage(\"utown.jpg\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDirectionsImage(\"utown_flavors.png\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withDirections(COM1_TO_NUSFLAVORS_DIRECTIONS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"muslim\", \"asian\", \"western\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_DECK \u003d \"Deck\"; // A keyword that matches DECK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalCanteens() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code FoodieBot} with all the typical canteens."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static FoodieBot getTypicalFoodieBot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot ab \u003d new FoodieBot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Canteen canteen : getTypicalCanteens()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addCanteen(canteen);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        for (Food food : SampleDataUtil.getSampleFoods()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            ab.addFood(food);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cCanteen\u003e getTypicalCanteens() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DECK, NUSFLAVORS));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 6,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalDateRanges.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.commons.core.date.DateRange;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "import seedu.foodiebot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "/** Utility class with date ranges. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "public class TypicalDateRanges {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_YEAR_2020 \u003d createDateRange("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 1, 1),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 12, 31));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_MONTH_MAY_2020 \u003d createDateRange("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 5, 1),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 5, 31));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_SHORT \u003d createDateRange("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 5, 3),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 7, 9));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_LONG \u003d createDateRange("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2020, 1, 1),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2150, 3, 3));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_START_IN_DISTANT_FUTURE \u003d createDateRange("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2150, 1, 1),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(2150, 3, 3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    public static final DateRange DATE_RANGE_END_TODAY \u003d createDateRange("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.of(1999, 12, 31),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            LocalDate.now());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    /** Creates a date range */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    private static DateRange createDateRange(LocalDate start, LocalDate end) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return DateRange.of(start, end);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lsjxavier"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lsjxavier": 44
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Index INDEX_FIRST_ITEM \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Index INDEX_SECOND_ITEM \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static final Index INDEX_THIRD_ITEM \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/testutil/TypicalStalls.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.foodiebot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.FoodieBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Stall} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalStalls {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Stall MUSLIM \u003d new StallBuilder().withName(\"Muslim\").withCanteenName(\"The Deck\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        .withStallNumber(5).withStallImageName(\"taiwanese.png\").withCuisine(\"muslim\").withOverallPriceRating(\"$\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        .withFavorite(0)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Stall TAIWANESE \u003d new StallBuilder().withName(\"Taiwanese\").withCanteenName(\"Nus Flavors\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        .withStallNumber(5).withStallImageName(\"yongtaufoo.png\").withCuisine(\"asian\").withOverallPriceRating(\"$\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        .withFavorite(1)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_DECK \u003d \"Deck\"; // A keyword that matches DECK"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalStalls() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code FoodieBot} with all the typical canteens."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static FoodieBot getTypicalFoodieBot() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FoodieBot ab \u003d new FoodieBot();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Stall stall : getTypicalStalls()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addStall(stall);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cStall\u003e getTypicalStalls() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MUSLIM, TAIWANESE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shaungoh97": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/BaseSceneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class BaseSceneTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //stage.getScene().setRoot(getRootNode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //FxAssert.verifyThat(\"#statusBarPlaceHolder\", NodeMatchers.isNotNull());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    protected Parent getRootNode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Parent parent \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            parent \u003d FXMLLoader.load(getClass().getResource(\"MainScene.fxml\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            return parent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            //Todo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return parent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/CanteenCardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.NUSFLAVORS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CanteenCardTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CanteenCard canteenCardDeck \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new CanteenCard(DECK, 1, false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CanteenCard canteenCardNusFlavors \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new CanteenCard(NUSFLAVORS, 1, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        CanteenCard copy \u003d new CanteenCard(DECK, 1, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(canteenCardDeck, copy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(canteenCardDeck, canteenCardDeck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(canteenCardDeck, canteenCardNusFlavors);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(null, canteenCardDeck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(0, canteenCardDeck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different canteen, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(canteenCardDeck, new CanteenCard(NUSFLAVORS, 1, false));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same canteen, different index -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(canteenCardDeck, new CanteenCard(NUSFLAVORS, 2, false));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(canteenCardDeck.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#id\", LabeledMatchers.hasText(\"1. \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#distance\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LabeledMatchers.hasText(String.valueOf(DECK.getDistance())));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 73
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/CanteenListPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.ListViewMatchers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CanteenListPanelTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CanteenListPanel panel \u003d new CanteenListPanel(getTypicalFoodieBot().getCanteenList(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ListView\u003cCanteen\u003e listView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listView \u003d panel.getSimpleListView();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(listView, ListViewMatchers.hasItems("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                SampleDataUtil.getSampleCanteens().length));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 51
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/CommandBoxTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "/** Adapted from https://github.com/se-edu/addressbook-level4/blob/master/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": " * src/test/java/seedu/address/ui/CommandBoxTest.java.*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class CommandBoxTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* Create the ui card. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        commandBox \u003d new CommandBox(commandText -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new CommandResult(\"\", \"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBox.getCommandTextField().getStyleClass());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(\"\", commandBox.getCommandTextField().getText().trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(errorStyleOfCommandBox, commandBox.getCommandTextField().getStyleClass());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(\"\", commandBox.getCommandTextField().getText().trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBox.getCommandTextField().getStyleClass());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 77
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/DirectionsSceneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.commands.DirectionsCommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class DirectionsSceneTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonFoodieBotStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidArgs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new DirectionsScene(null, logic, new DirectionsCommandResult(SampleDataUtil.getSampleCanteens()[0],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                \"displayed\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 55
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/DirectionsToCanteenPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.base.NodeMatchers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class DirectionsToCanteenPanelTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DirectionsToCanteenPanel panel \u003d new DirectionsToCanteenPanel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private DirectionsToCanteenPanel copy \u003d new DirectionsToCanteenPanel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(panel, copy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(panel, panel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(null, panel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Platform.runLater(() -\u003e panel.fillView(DECK));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Platform.runLater(() -\u003e copy.fillView(DECK));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#textArea\", LabeledMatchers.hasText(DECK.getDirectionsText()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#iv\", NodeMatchers.isNotNull());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 65
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/FoodCardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FoodCardTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Food comboSet \u003d new Food(\"Combo Set\", 6, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            1, \"Nus Flavors\", \"Western\", getTagSet(\"western\", \"expensive\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FoodCard foodCard \u003d new FoodCard(comboSet, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FoodCard copy \u003d new FoodCard(comboSet, 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(foodCard, copy);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(foodCard, foodCard);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(null, foodCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(foodCard.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#id\", LabeledMatchers.hasText(\"1. \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#name\", LabeledMatchers.hasText(comboSet.getName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#stallName\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                LabeledMatchers.hasText(comboSet.getStallName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#description\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                LabeledMatchers.hasText(comboSet.getDescription()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 69
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/FoodListPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.ListViewMatchers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class FoodListPanelTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Food COMBO_SET \u003d new Food(\"Combo Set\", 6, \"1 Meat, 1 Pasta, 2 Sides\", \"Combo Set.png\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            1, \"Nus Flavors\", \"Western\", getTagSet(\"western\", \"expensive\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FoodListPanel panel \u003d new FoodListPanel("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            FXCollections.observableArrayList(SampleDataUtil.getSampleFoods()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ListView\u003cFood\u003e listView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listView \u003d panel.getSimpleListView();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "        FxAssert.verifyThat(listView, ListViewMatchers.hasItems("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shaungoh97"
        },
        "content": "                25));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(listView, ListViewMatchers.hasItems("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                SampleDataUtil.getSampleFoods().length));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 53,
      "shaungoh97": 2
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/HelpWindowTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class HelpWindowTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setupSpec(FxRobot robot) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        robot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) throws TimeoutException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue(FxRobot robot) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            robot.interact(() -\u003e helpWindow.show());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            helpWindow.copyUrl();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            assertFalse(Clipboard.getSystemClipboard().getString().isBlank());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            robot.interact(() -\u003e helpWindow.hide());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 59
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/MainWindowTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.FoodieBotStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class MainWindowTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private FoodieBotStorage foodieBotStorage \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new JsonFoodieBotStorage(Paths.get(\"foodiebot.json\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Paths.get(\"foodiebot-stalls\"), Paths.get(\"foodiebot-budget\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Paths.get(\"foodiebot-food\"), Paths.get(\"foodiebot-favorites\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            Paths.get(\"foodiebot-transactions\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Storage storage \u003d new StorageManager(foodieBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void init(Stage stage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        mainWindow \u003d new MainWindow(stage, new LogicManager(createSampleModel(), storage));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed(FxRobot robot) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //robot.clickOn(\"#exit\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //robot.clickOn(\"#file\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //assertEquals(Collections.emptyList(), robot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public ModelManager createSampleModel() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        return new ModelManager(SampleDataUtil.getSampleFoodieBot(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 59
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/RandomizeListPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Canteen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class RandomizeListPanelTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private RandomizeListPanel panel \u003d new RandomizeListPanel(getTypicalFoodieBot().getStallList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ListView\u003cCanteen\u003e listView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 47
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/ReportPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.report.Report;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportPanelTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ReportPanel panel \u003d new ReportPanel();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ReportPanel copy \u003d new ReportPanel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(panel, copy);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(panel, panel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(null, panel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Platform.runLater(() -\u003e panel.fillView(new Report()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Platform.runLater(() -\u003e copy.fillView(new Report()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#textArea\", LabeledMatchers.hasText(new Report().toString()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 63
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/ReportSceneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ReportSceneTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonFoodieBotStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * ."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void constructor_invalidArgs() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new ReportScene(null, logic));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 49
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/ResultDisplayTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.assertions.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class ResultDisplayTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ResultDisplay display \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TextArea result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(display.getRoot());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void result_isValidOutput(FxRobot robot) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Assertions.assertThat(robot.lookup(\"#resultDisplay\").queryAs(TextArea.class))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .hasText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        robot.interact(() -\u003e display.setFeedbackToUser(\"Result\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        Assertions.assertThat(robot.lookup(\"#resultDisplay\").queryAs(TextArea.class))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                .hasText(\"Result\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 46
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/StallCardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalStalls.MUSLIM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalStalls.TAIWANESE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class StallCardTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StallCard stallCardTaiwanese \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new StallCard(TAIWANESE, 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StallCard stallCardMuslim \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new StallCard(MUSLIM, 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StallCard copy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                new StallCard(TAIWANESE, 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(stallCardTaiwanese, copy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(stallCardTaiwanese, stallCardTaiwanese);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(stallCardTaiwanese, stallCardMuslim);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(null, stallCardTaiwanese);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(0, stallCardTaiwanese);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // different stall, same index -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(stallCardTaiwanese, new StallCard(MUSLIM, 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same stall, different index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(stallCardTaiwanese, new StallCard(TAIWANESE, 2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(stallCardTaiwanese.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#id\", LabeledMatchers.hasText(\"1. \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#name\", LabeledMatchers.hasText("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            TAIWANESE.getName().fullName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#stallNumber\", LabeledMatchers.hasText("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.valueOf(TAIWANESE.getStallNumber())));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#cuisine\", LabeledMatchers.hasText("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.valueOf(TAIWANESE.getCuisine())));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#overallPriceRating\", LabeledMatchers.hasText("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "                String.valueOf(TAIWANESE.getOverallPriceRating())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 80
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/StallsListPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.ListViewMatchers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.canteen.Stall;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class StallsListPanelTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private static final Stall CHINESE_COOKED_FOOD \u003d new Stall("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        new Name(\"Chinese Cooked Food\"), \"The Deck\", 1, \"ChineseCookedFood.png\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"asian\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        \"$\", 0, getTagSet(\"rice\", \"noodle\", \"cheap\"), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StallsListPanel panel \u003d new StallsListPanel("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FXCollections.observableArrayList(SampleDataUtil.getSampleStalls()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ListView\u003cStall\u003e listView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listView \u003d panel.getSimpleListView();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(listView, ListViewMatchers.hasListCell(CHINESE_COOKED_FOOD));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(listView, ListViewMatchers.hasItems("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            SampleDataUtil.getSampleStalls().length));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 58
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/StatusBarFooterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "public class StatusBarFooterTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /* Create the ui card. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setupSpec(FxRobot robot) throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        robot.interact(() -\u003e statusBarFooter \u003d new StatusBarFooter(Path.of(\"/foodiebot.json\")));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 32
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/TransactionsCardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.LabeledMatchers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.rating.Review;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class TransactionsCardTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private PurchasedFood food \u003d new PurchasedFood(SampleDataUtil.getSampleFoods()[0], LocalDate.now(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        LocalTime.now(), new Rating(10), new Review(\"This is a short review\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TransactionsCard tCard \u003d new TransactionsCard(food, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        TransactionsCard copy \u003d new TransactionsCard(food, 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(tCard, copy);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertEquals(tCard, tCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertNotEquals(null, tCard);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(tCard.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#id\", LabeledMatchers.hasText(\"1. \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#name\", LabeledMatchers.hasText(food.getName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#stallName\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LabeledMatchers.hasText(food.getStallName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#description\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LabeledMatchers.hasText(food.getDescription()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#datePurchased\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LabeledMatchers.hasText(\"Purchased: \" + food.getDateAdded() + \" at \" + food.getTimeAdded()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#rating\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LabeledMatchers.hasText(\"Rating: \" + food.getRating().toString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(\"#review\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            LabeledMatchers.hasText(\"Review: \" + food.getReview().toString()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 80
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/TransactionsPanelTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.TypicalCanteens.getTypicalFoodieBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.extension.ExtendWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.ApplicationExtension;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.matcher.control.ListViewMatchers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.transaction.PurchasedFood;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "@ExtendWith(ApplicationExtension.class)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class TransactionsPanelTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private TransactionsPanel panel \u003d new TransactionsPanel(getTypicalFoodieBot().getPurchasedFoodList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private ListView\u003cPurchasedFood\u003e listView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     * Create the ui card."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    /** Create the ui card. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private void start(Stage stage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StackPane stackPane \u003d new StackPane();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stackPane.getChildren().add(panel.getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.setScene(new Scene(stackPane));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        listView \u003d panel.getSimpleListView();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(FxRobot robot) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxAssert.verifyThat(listView, ListViewMatchers.hasItems(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 48
    }
  },
  {
    "path": "src/test/java/seedu/foodiebot/ui/UiManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "package seedu.foodiebot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import static seedu.foodiebot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import org.testfx.framework.junit5.Start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonFoodieBotStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "import seedu.foodiebot.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "class UiManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private UiManager manager \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public static void setupSpec() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonFoodieBotStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonFoodieBotStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Start"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void init(Stage stage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertDoesNotThrow(() -\u003e new UiManager(logic).start(stage));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leslieharland"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    void showAlertDialogAndWait() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        assertThrows(Exception.class, () -\u003e new UiManager(logic).start(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //Platform.runLater(() -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //    assertDoesNotThrow(() -\u003e new UiManager(logic).showAlertDialogAndWait(Alert.AlertType.ERROR,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "        //        \"Error\", \"Error\", \"Text\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leslieharland"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leslieharland": 58
    }
  }
]
